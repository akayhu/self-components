(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{104:function(module,__webpack_exports__,__webpack_require__){"use strict";var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(43),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(44),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(47),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(45),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(48),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),Task=function(_Component){function Task(){return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.a)(this,Task),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__.a)(this,Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.a)(Task).apply(this,arguments))}return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.a)(Task,_Component),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.a)(Task,[{key:"render",value:function render(){var _this$props=this.props,_this$props$task=_this$props.task,id=_this$props$task.id,title=_this$props$task.title,state=_this$props$task.state,onArchiveTask=_this$props.onArchiveTask,onPinTask=_this$props.onPinTask;return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"list-item ".concat(state)},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("label",{className:"checkbox"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("input",{type:"checkbox",defaultChecked:"TASK_ARCHIVED"===state,disabled:!0,name:"checked"}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span",{className:"checkbox-custom",onClick:function onClick(){return onArchiveTask(id)}})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"title"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("input",{type:"text",value:title,readOnly:!0,placeholder:"Input title"})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"actions",onClick:function onClick(event){return event.stopPropagation()}},"TASK_ARCHIVED"!==state&&react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a",{href:"https://www.google.com",onClick:function onClick(){return onPinTask(id)}},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span",{className:"icon-star"}))))}}]),Task}(react__WEBPACK_IMPORTED_MODULE_5__.Component);__webpack_exports__.a=Task},129:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/cover.9be246a0.jpg"},130:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/bg.4bb9ac51.png"},131:function(module,__webpack_exports__,__webpack_require__){"use strict";var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(128),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(43),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(44),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(47),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(45),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(48),react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__),_task_task__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(104),TaskList=function(_Component){function TaskList(){var _getPrototypeOf2,_this;Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.a)(this,TaskList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.a)(this,(_getPrototypeOf2=Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.a)(TaskList)).call.apply(_getPrototypeOf2,[this].concat(args)))).loadingRow=function(){return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"loading-item"},react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",{className:"glow-checkbox"}),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",{className:"glow-text"},react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",null,"Loading")," ",react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",null,"cool")," ",react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",null,"state")))},_this.loadingRender=function(){return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"list-items"},_this.loadingRow(),_this.loadingRow(),_this.loadingRow(),_this.loadingRow(),_this.loadingRow(),_this.loadingRow())},_this.renderTasks=function(){return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"list-items"},react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"wrapper-message"},react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span",{className:"icon-check"}),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"title-message"},"You have no tasks"),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"subtitle-message"},"Sit back and relax")))},_this}return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.a)(TaskList,_Component),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.a)(TaskList,[{key:"render",value:function render(){var _this$props=this.props,loading=_this$props.loading,tasks=_this$props.tasks,onPinTask=_this$props.onPinTask,onArchiveTask=_this$props.onArchiveTask,tasksInOrder=[].concat(Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.a)(tasks.filter(function(t){return"TASK_PINNED"===t.state})),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.a)(tasks.filter(function(t){return"TASK_PINNED"!==t.state}))),events={onPinTask:onPinTask,onArchiveTask:onArchiveTask};return loading?this.loadingRender():0===tasks.length?this.renderTasks():react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{className:"list-items"},tasksInOrder.map(function(task){return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_task_task__WEBPACK_IMPORTED_MODULE_7__.a,Object.assign({key:task.id,task:task},events))}))}}]),TaskList}(react__WEBPACK_IMPORTED_MODULE_6__.Component);TaskList.defaultProps={loading:!1},__webpack_exports__.a=TaskList},132:function(module,exports){module.exports="# TaskList Component\n\n此 Component 為編寫 Storybook 範例\n"},173:function(module,exports){module.exports="# Task Component\n\n此 Component 為編寫 Storybook 範例\n"},218:function(module,__webpack_exports__,__webpack_require__){"use strict";var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(43),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(44),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(47),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(45),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(48),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),Card=(__webpack_require__(712),function(_Component){function Card(){return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.a)(this,Card),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__.a)(this,Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.a)(Card).apply(this,arguments))}return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.a)(Card,_Component),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.a)(Card,[{key:"render",value:function render(){var _this$props=this.props,link=_this$props.link,linkTitle=_this$props.linkTitle,defultUserImage=_this$props.defultUserImage,defultBgImage=_this$props.defultBgImage,userName=_this$props.userName,userImage=_this$props.userImage,bgImage=_this$props.bgImage,introduction=_this$props.introduction;return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"card-main"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a",{href:link,title:linkTitle,target:"_blank",rel:"noopener noreferrer"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"card-bg"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img",{src:bgImage||defultBgImage,alt:"cover"}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"cardAvatar"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img",{src:userImage||defultUserImage,alt:"Avatar"}))),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"card-content"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:"username"},userName||"使用者名稱"),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("hr",{className:"top"}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("p",{className:"summary",dangerouslySetInnerHTML:{__html:introduction}}))))}}]),Card}(react__WEBPACK_IMPORTED_MODULE_5__.Component));__webpack_exports__.a=Card},219:function(module,exports){module.exports="# Card Component 使用說明\n\n列表有 RWD 效果，所以外面需再包一層 `div` 並給 `css` 為：\n\n```css\n {\n\tflex-wrap: wrap;\n\tdisplay: flex;\n\talign-content: flex-start;\n}\n```\n\n如果只有單筆，外層則需要寬度限制它，`<Card>` 有往右推`25px`，可再自行清除\n\n```js\n// 限制寬\n<div style={{ width: '300px' }}>\n\t<Card\n\t\tkey={data[0].index}\n\t\tlink={data[0].link}\n\t\tlinkTitle={data[0].linkTitle}\n\t\tuserImage={data[0].userImage}\n\t\tbgImage={data[0].bgImage}\n\t\tuserName={data[0].userName}\n\t\tintroduction={data[0].introduction}\n\t/>\n</div>\n```\n\nTODO：\n\ncode 優化\n"},223:function(module,exports){module.exports="# RWD(Responsive web design) 各尺寸參考\n\n### 不同數值所對應的裝置\n\n| 尺寸大小    | 裝置                                                                                                                                                                                     |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1440 (預設) | Laptop with HiDPI screen(橫)                                                                                                                                                             |\n| 1366        | iPad Pro(橫)                                                                                                                                                                             |\n| 1280        | Kindle Fire HDX(橫)、Laptop with MDPI screen(橫)、Laptop with touch(橫)、 Nexus 10(橫)                                                                                                   |\n| 1024        | BlackBerry PlayBook(橫)、iPad Mini(橫)、iPad(橫)、iPad Pro(直)                                                                                                                           |\n| 960         | Nexus 7(橫)                                                                                                                                                                              |\n| 950         | Laptop with touch(直)                                                                                                                                                                    |\n| 900         | Laptop with HiDPI screen(直)                                                                                                                                                             |\n| 854         | Nokia Lumia N9(橫)                                                                                                                                                                       |\n| 823         | Pixel 2 XL(橫)                                                                                                                                                                           |\n| 812         | iPhone X(橫)                                                                                                                                                                             |\n| 800         | Kindle Fire HDX(直)、Laptop with MDPI screen(直)、Nexus 10(直)                                                                                                                           |\n| 768         | iPad Mini(直)、iPad(直)                                                                                                                                                                  |\n| 736         | iPhone 6/7/8 Plus(橫)                                                                                                                                                                    |\n| 732         | Nexus 5X(橫)、Nexus 6(橫)、Nexus 6P(橫)                                                                                                                                                  |\n| 731         | Pixel 2(橫)                                                                                                                                                                              |\n| 667         | iPhone 6/7/8(橫)                                                                                                                                                                         |\n| 640         | BlackBerry Z30(橫)、Galaxy Note3(橫)、Galaxy Note2(橫)、Galaxy S3(橫)、Nexus 4(橫)、<br>LG Optimus L70(橫)、Microsoft Lumia 550(橫)、Microsoft Lumia 950(橫)、Nexus 5(橫)、Galaxy S5(橫) |\n| 600         | BlackBerry PlayBook(直)、Nexus 7(直)                                                                                                                                                     |\n| 568         | iPhone 5/SE(橫)                                                                                                                                                                          |\n| 533         | Nokia Lumia 520(橫)                                                                                                                                                                      |\n| 480         | Nokia Lumia N9(直)、iPhone 4(橫)                                                                                                                                                         |\n| 414         | iPhone 6/7/8 Plus(直)                                                                                                                                                                    |\n| 412         | Nexus 5X(直)、Nexus 6(直)、Nexus 6P(直)                                                                                                                                                  |\n| 411         | Pixel 2(直)、Pixel 2 XL(直)                                                                                                                                                              |\n| 384         | LG Optimus L70(直)、Nexus 4(直)                                                                                                                                                          |\n| 375         | iPhone 6/7/8(直)、iPhone X(直)                                                                                                                                                           |\n| 360         | BlackBerry Z30(直)、Galaxy Note3(直)、Galaxy Note2(直)、Galaxy S3(直)、Microsoft Lumia 550(直)、<br>Microsoft Lumia 950(直)、Nexus 5(直)、Galaxy S5(直)                                  |\n| 320         | Nokia Lumia 520(直)、iPhone 4(直)、iPhone 5/SE(直)                                                                                                                                       |\n\n尺寸參考為`scss`方式顯示，也可拿來直接套用。使用範例：\n\n```css\n@include rwd-to(533) {\n\twidth: 45px;\n\theight: 45px;\n\tbottom: -55px;\n}\n```\n\n尺寸參考：\n\n```css\n@mixin rwd-to($media: null) {\n\t@if $media {\n\t\t@media only screen and (max-width: $media + 'px') {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t// 預設桌機版\n\t\t@media only screen and (max-width: 1440px) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n```\n"},224:function(module,exports){module.exports="# px 與 em 轉換\n\n網頁的默認像素大小通常為 16px，以下為 16px 轉換\n\n## px 與 em 百分比轉換表\n\n| px   | em       | percent |\n| ---- | -------- | ------- |\n| 5px  | 0.3125em | 31.25%  |\n| 6px  | 0.3750em | 37.50%  |\n| 7px  | 0.4375em | 43.75%  |\n| 8px  | 0.5000em | 50.00%  |\n| 9px  | 0.5625em | 56.25%  |\n| 10px | 0.6250em | 62.50%  |\n| 11px | 0.6875em | 68.75%  |\n| 12px | 0.7500em | 75.00%  |\n| 13px | 0.8125em | 81.25%  |\n| 14px | 0.8750em | 87.50%  |\n| 15px | 0.9375em | 93.75%  |\n| 16px | 1.0000em | 100%    |\n| 17px | 1.0625em | 106.25% |\n| 18px | 1.1250em | 112.50% |\n| 19px | 1.1875em | 118.75% |\n| 20px | 1.2500em | 125.00% |\n| 21px | 1.3125em | 131.25% |\n| 22px | 1.3750em | 137.50% |\n| 23px | 1.4375em | 143.75% |\n| 24px | 1.5000em | 150.00% |\n| 25px | 1.5625em | 156.25% |\n\n> PX，EM 和百分比有什麼區別？\n>\n> 像素是靜態測量，而百分比和 EM 是相對測量。EM 或百分比的大小取決於其父級。如果正文的文本大小是 16 像素，那麼 150％或 1.5 EM 將是 24 像素（1.5 \\* 16）。查看 CSS 單位以獲取更多測量單位。\n\n如果不是以 16px 為基準，可至[這裡](https://www.w3schools.com/tags/ref_pxtoemconversion.asp)進行查詢。\n\n## 補充\n\n### 單位\n\n> px：絕對單位，代表螢幕中每個「點」( pixel )。\n\n> em：相對單位，每個子元素透過「倍數」乘以父元素的 px 值。\n\n> rem：相對單位，每個元素透過「倍數」乘以根元素的 px 值。\n\n> %：相對單位，每個子元素透過「百分比」乘以父元素的 px 值。\n\n### 屬性名稱\n\n> medium：預設值，等於 16px ( h4 預設值 )\n\n> xx-small：medium 的 0.6 倍 ( h6 預設值 )\n\n> x-small：medium 的 0.75 倍\n\n> small：medium 的 0.8 倍 ( h5 預設值，W3C 定義為 0.89，實測約為 0.8 )\n\n> large：medium 的 1.1 倍 ( h3 預設值，W3C 定義為 1.2，實測約為 1.1 )\n\n> x-large：medium 的 1.5 倍 ( h2 預設值 )\n\n> xx-large：medium 的 2 倍 ( h1 預設值 )\n\n> smaller：約為父層的 80%\n\n> larger：約為父層的 120%\n\n### 印刷\n\n> pt：印表機的每個「點」，定義為 1 pt ＝ 1/72 in，如果在 72 dpi 的系統上 1 px = 1 pt，但如果在 96 dpi 的系統上 1 px = 0.75 pt ( 72/96 = 0.75 )。\n\n> in：英吋，在 96 dpi 的系統上 1 in = 96 px。\n\n> cm：公分，在 96 dpi 的系統上 1 cm = 37.795275593333 px。\n\n> mm：公釐，在 96 dpi 的系統上 1 cm = 3.7795275593333 px。\n"},225:function(module,exports){module.exports="# HTTP 訊息的 header\n\nHTTP 協議的請求和回應一定含有 http header，客戶端和伺服端的 header 內容，針對處理請求和回應有所不同。請求 header 大部分都不需要親自查看。\n\n### 請求 header\n\n- 請求列\n\n- 請求 header\n\n- 通用 header\n\n- 實體 header\n\n### 回應 header\n\n- 狀態列\n\n- 回應 header\n\n- 通用 header\n\n- 實體 header\n\n## HTTP 首部字段\n\n### 結構\n\n由字串和值來形成，例如：\n\n```js\nContent-type: text/html\n```\n\n也有可能一個字串配多個值，例如：\n\n```js\nKeep-Alive: timeout=15, max=100\n```\n\n### 字串類型\n\n- 通用 header：請求訊息和回應訊息都會用的 header\n\n- 請求 header：從客戶端對伺服端發出請求訊息所使用的，包含補充請求的附加內容、客戶端訊息等等\n\n- 回應 header：從伺服器端回傳給客戶端所需要的，包含回應附加內容，也會要求客戶端附加額外的訊息內容\n\n- 實體 header：針對請求和回應訊息的實體使用，包含要補充的資料內容、更新時間等等\n\n## HTTP/1.1 header 字串一覽\n\nHTTP/1.1 規範了 47 種字串。\n\n### 通用 header\n\nCache-Control：控制緩存行為\n\nConnetion：逐跳 header、連接的管理\n\nDate：創建日期\n\nPragma：訊息指令\n\nTrailer：訊息尾端的 header 一覽\n\nTransfer-Encoding：指定訊息主體的傳輸編碼方式\n\nUpgrade：升級為其他協議\n\nVia：代理伺服器相關訊息\n\nWarning：錯誤通知\n\n### 請求 header\n\nAccept：用戶代理可處理的媒體類型\n\nAccept-Charset：優先的字串集\n\nAccept-Encoding：優先的內容編碼\n\nAccept-Language：優先的自然語言\n\nAuthorization：網頁認證訊息\n\nExpect：期待伺服器的特定行為\n\nForm：用戶的電子信箱地址\n\nHost：請求資料的伺服器位置\n\nIf-Match：比較實體標記（ETag）\n\nIf-Modified-Since：比較資料更新時間\n\nIf-None-Match：比較實體標記（與 If-Match 相反）\n\nIf-Range：資料未更新時發送的實體 Byte 的範圍請求\n\nIf-Unmodified-Since：比較資料更新時間（與 If-Modified-Since 相反）\n\nMax-Forwards：最大傳輸逐格跳\n\nProxy-Authorization：代理伺服器要求客戶端的認證訊息\n\nRange：實體的字串範圍請求\n\nReferer：對請求的 URI 的原始獲得方\n\nTE：傳輸編碼的優先級\n\nUser-Agent：HTTP 客戶端程式訊息\n\n### 回應 header\n\nAccept-Range：是否接受字串範圍請求\n\nAge：推算資料建立時間\n\nEtag：資料匹配訊息\n\nLocation：讓客戶端重新導向的 URI\n\nProxy-Authenticate：代理伺服器對客戶端的認證訊息\n\nRetry-After：對再次發請求的時機要求\n\nServer：HTTP 伺服器的安裝訊息\n\nVary：代理伺服器緩存的認證訊息\n\nWWW-Authenticate：伺服器對客戶端的認證訊息\n\n### 實體 header\n\nAllow：資料可支援的 HTTP 方式\n\nContent-Encoding：實體適用的編碼方式\n\nContent-Language：實體的自然語言\n\nContent-Length：實體的大小（字元）\n\nContent-Location：代替對應資料的 URI\n\nContent-MD5：實體的訊息摘要\n\nContent-Range：實體的位置範圍\n\nContent-Type：實體的媒體類型\n\nExpires：實體過期日期時間\n\nLast-Modified：資料最後修改日期時間\n\n### 非 HTTP/1.1 的首部字串\n\nHTTP 所使用的字串，不限於 RFC2616 定義的 47 種，還有 Cookie、Set-Cookie 和 Content-Desposition 等等。\n\n### End-to-end header 和 Hop-by-hop header\n\nHTTP header 定義成緩存代理和非緩存代理兩種類型：\n\n- End-to-end header：分在此類的 header 會轉發給請求 / 回應對應的最後接收目標，且必須保存由緩存所產生的回應中，另外規定他必須要被轉發。\n\n- Hop-by-hop header：分在此類的 header 只會對單次的轉發有效，會因為緩存或代理的關係而不再需要被轉發，HTTP/1.1 和之後的版本，如果要用此類型，需要提供 Connection header 字串。\n\n以下除了這八個 header 字串之外，其他都算 End-to-end header 字串：\n\n- Connection\n\n- Keep-Alive\n\n- Proxy-Authenticate\n\n- Trailer\n\n- TE\n\n- Transfer-Encoding\n\n- Upgrade\n\n## 出處\n\n[圖解 HTTP Chapter06 HTTP 首部 筆記精要](https://ithelp.ithome.com.tw/articles/10204743)\n"},226:function(module,exports){module.exports="# 安裝 React 開發環境\n\n安裝 create-react-app\n網址：https://github.com/facebook/create-react-app\n\n```js\nnpm init react-app my-app\n```\n\n安裝 redux\n網址：https://github.com/reduxjs/redux\n\n```js\nnpm install --save redux\n```\n\n安裝 react-redux\n網址：https://github.com/reduxjs/react-redux\n\n```js\nnpm install --save react-redux\n```\n\n安裝 react-router\n網址：https://github.com/ReactTraining/react-router\n\n```js\nnpm install --save react-router\n```\n\n安裝 react-router-dom\n網址：https://github.com/ReactTraining/react-router\n\n```js\nnpm install --save react-router-dom\n```\n\n安裝 Scss 環境(看專案需求)\n網址：https://github.com/sass/node-sass\n\n```js\nnpm install node-sass\n```\n"},227:function(module,exports){module.exports='# 安裝 Storybook 環境\n\n## 『自己的 Storybook』安裝相關 Storybook 套件升版\n\n```js\n\b// 2019/5/13 devDependencies storybook 升版\n@storybook/addon-a11y                   ^5.0.10  →  ^5.0.11\n@storybook/addon-actions                ^5.0.10  →  ^5.0.11\n@storybook/addon-backgrounds            ^5.0.10  →  ^5.0.11\n@storybook/addon-centered               ^5.0.10  →  ^5.0.11\n@storybook/addon-jest                   ^5.0.10  →  ^5.0.11\n@storybook/addon-knobs                  ^5.0.10  →  ^5.0.11\n@storybook/addon-links                  ^5.0.10  →  ^5.0.11\n@storybook/addon-notes                  ^5.0.10  →  ^5.0.11\n@storybook/addon-options                ^5.0.10  →  ^5.0.11\n@storybook/addon-storyshots             ^5.0.10  →  ^5.0.11\n@storybook/addon-storysource            ^5.0.10  →  ^5.0.11\n@storybook/addon-viewport               ^5.0.10  →  ^5.0.11\n@storybook/addons                       ^5.0.10  →  ^5.0.11\n@storybook/react                        ^5.0.10  →  ^5.0.11\nstorybook-addon-react-docgen             ^1.2.1  →   ^1.2.2\nstorybook-addon-styled-component-theme   ^1.2.1  →   ^1.2.3\nstorybook-readme                         ^5.0.2  →   ^5.0.3\n\n// 目前 "storybook-addon-react-docgen": "^1.1.5" 版本之後套件 console.log 會噴錯，導致 propType 與 description 會抓不到資料。須待查問題\n```\n\n## Storybook 安裝\n\n安裝 storybook\n網址：https://storybook.js.org/\n\n```js\nnpx -p @storybook/cli sb init\n```\n\n安裝 storybook 支援 Readme.md 格式\n網址：https://github.com/tuchk4/storybook-readme\n\n```js\nnpm install --save-dev storybook-readme\n```\n\n安裝 storybook 顯示紀錄 action 操作(addon-options)\n網址：https://github.com/storybooks/storybook/tree/next/addons/actions\n\n```js\nnpm i @storybook/addon-options\n```\n\n安裝 storybook 可以顯示 RWD 佈局(addon-viewport)\n網址：https://github.com/storybooks/storybook/tree/next/addons/viewport\n\n```js\nnpm i @storybook/addon-viewport\n```\n\n安裝 storybook 可以顯示 UI 中以交互方式編輯組件道具數據\n網址：https://github.com/storybooks/storybook/tree/next/addons/knobs\n\n```js\nnpm i @storybook/addon-knobs\n```\n\n安裝 storybook 支援 抓取 React Prop Type\n網址：https://github.com/hipstersmoothie/storybook-addon-react-docgen\n\n```js\nnpm i storybook-addon-react-docgen\n```\n'},228:function(module,exports){module.exports='# Apple Mac 安裝 Ruby 教學\n\n先去安裝 macOS 缺少套件的管理工具[Homebrew](https://brew.sh/index_zh-tw)\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/homebrew.png?raw=true)\n\n或直接貼上下面指令安裝。\n\n```js\n/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"\n```\n\n再安裝 [Ruby](https://www.ruby-lang.org/zh_tw/)\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/ruby.png?raw=true)\n\n指令如下：\n\n```js\nbrew install ruby\n```\n\nRuby 安裝完後，只要 gem install 指令加上套件的名字，敲完按下 Enter 鍵，就自動會連上網路、下載套件、安裝套件，一氣呵成，指令如下：\n\n```js\ngem install travis // 安裝 travis\n```\n\nPS：如果安裝出現錯誤`You don\'t have write permissions for the /Library/Ruby/Gems/2.3.0 directory.`，指令前面加上`sudo`試試。\n\n```js\nsudo gem install travis // 安裝 travis\n```\n'},229:function(module,exports){module.exports='# Apple Mac 安裝 Git 教學\n\n先去安裝 macOS 缺少套件的管理工具[Homebrew](https://brew.sh/index_zh-tw)\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/homebrew.png?raw=true)\n\n或直接貼上下面指令安裝。\n\n```js\n/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"\n```\n\nHomebrew 安裝完成後在用 Homebrew 軟體來安裝 Git，指令如下：\n\n```js\nbrew install git\n```\n\nGit 安裝完成。\n'},230:function(module,exports){module.exports="# 線上學習資源\n\nHiskio：[https://hiskio.com/](https://hiskio.com/)\n\nUdemy：[https://www.udemy.com/](https://www.udemy.com/)\n\nO'reilly：[https://learning.oreilly.com/accounts/login/](https://learning.oreilly.com/accounts/login/)\n\n彭彭的課程：[https://www.youtube.com/channel/UCguZS-y7codLSt6vpkVdnKg](https://www.youtube.com/channel/UCguZS-y7codLSt6vpkVdnKg)\n\nAlex 宅幹嘛：[https://www.youtube.com/channel/UCEL8871qFEakpqYpwBSjHNA](https://www.youtube.com/channel/UCEL8871qFEakpqYpwBSjHNA)\n\nCSScoke：[https://www.youtube.com/channel/UCQfjTYYrqxPg5LJmDBUesbQ](https://www.youtube.com/channel/UCQfjTYYrqxPg5LJmDBUesbQ)\n\nhsiang an chi：[https://www.youtube.com/channel/UCWyojczht33LY1TQbw2k4Sg](https://www.youtube.com/channel/UCWyojczht33LY1TQbw2k4Sg)\n\nYotta：[https://www.yottau.com.tw/home/](https://www.yottau.com.tw/home/)\n\nhahow：[https://hahow.in/](https://hahow.in/)\n\n慕課網：[https://www.imooc.com/](https://www.imooc.com/)\n\nfreeCodeCamp：[https://www.freecodecamp.org/](https://www.freecodecamp.org/)\n"},231:function(module,exports){module.exports="# GitHub Pages 與 Travis CI 串接教學\n\n[travis-ci.org](https://travis-ci.org/) 這個網址的 Travis CI 僅提供給 public repository 使用。\n\n若是想要存取 private repository ，則是要從 [travis-ci.com](https://travis-ci.com/) 這個網址進入。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/travis-ci.png?raw=true)\n\n## TODO：\n\n教學內容尚未編寫，待補\n"},232:function(module,exports){module.exports="# Visual Studio Code 推薦安裝套件\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/vsCode1.png?raw=true)\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/vsCode2.png?raw=true)\n"},233:function(module,exports){module.exports='# 安裝 PHP Laravel 開發環境\n\n先去安裝 macOS 缺少套件的管理工具[Homebrew](https://brew.sh/index_zh-tw)\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/homebrew.png?raw=true)\n\n或直接貼上下面指令安裝。\n\n```js\n/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"\n```\n\nHomebrew 安裝完成後在用 Homebrew 軟體來安裝 PHP，指令如下：\n\n```js\nbrew install php\n```\n\n確認 PHP 安裝\n\n```js\nphp - v;\n```\n\n安裝 Composer\n\n```js\nbrew install composer\n```\n\n開始建立 Laravel 專案\n\n`laravel-project` 專名稱可自訂\n\n```js\ncomposer create-project laravel/laravel laravel-project -–prefer-dist\n```\n\n之後到專案目錄後安裝 node_modules\n\n```js\nnpm install\n```\n\n再請動 server，指令如下：\n\n```js\nphp artisan serve\n```\n\n啟動位置通常為`http://127.0.0.1:8000`，看畫面表示安裝成功！\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/phpLaravel.png?raw=true)\n'},234:function(module,exports){module.exports='# Git 建立 SSH Key 教學\n\n用 https 去連 github 的話，每次都會要你重新輸入密碼，建議使用 ssh 連線會比較安全，也比較有效率。\n\n## 建立 SSH Key\n\nMac 方式顯示你的家目錄下有那些 ssh 的 key，`~` 代表 home 目錄\n\n```js\n$ ls ~/.ssh\n```\n\n沒有 ssh key 的話，可用下列語法產生 ssh key\n\n```js\n$ ssh-keygen -t rsa -C "{yourEmail}@gmail.com"\n```\n\n會叫你再輸入 passphrase (這個 key 的密碼)，可以不要輸入。會產生兩個檔案 id_rsa.pub(公鑰) 跟 id_rsa(私鑰)\n\n顯示公鑰的檔案內容\n\n```js\n$ cat ~/.ssh/id_rsa.pub\n```\n\n到 github 個人檔案中將 ssh 的公鑰建立上去，title 取個可以識別的名字就好，將 cat 出來的內容，貼到 key 中\n\nWindows 方式 只要你有 git bash 操作方法同上\n\n## Hosts 設定\n\n把 127.0.0.1 指向 domain，windows 請修改這隻檔案\n\n```js\nC:\\Windows\\System32\\drivers\\etc\n```\n\nmac 指令\n\n```js\n$ vim /etc/hosts\n```\n'},235:function(module,exports){module.exports="# 安裝 Vue 開發環境\n\n須先安裝 Node.js\n\n最低需求：\n\n- node 4\n- npm 3\n\n## 什麼 Vue-cli ?\n\n[vue-cli](https://github.com/vuejs/vue-cli) 可以說是作者開發的 vue 懶人開發包，裡面包含有 5 種結構，從最基礎的 `simple` 到 `browserify` 以及 `webpack` 版本皆可以自由選擇。\n\n### 安裝 vue-cli 在 command line 介面中執行：\n\n```js\nnpm install -g vue-cli\n```\n\n> `-g` 是 `npm` 安裝語法將套件安裝在`全域環境`的意思。\n> `npm`(內建) 是 `node.js` 安裝套件的管理工具之一，其他還有 facebook 的 `YARN`\n\n### 安裝 webpack 在 command line 介面中執行：\n\n```js\nvue init webpack your-project-name\n```\n\n> `your-project-name` -> 只需命名你喜歡的 project 名稱，cli 將會幫你產生此資料夾，並安裝你選定的結構。\n\n### 為什麼選用 webpack ?\n\n主要想使用 `Hot-loader` 功能體驗快速反應的開發系統，與最新的自動化建構工具。\n\n### 什麼是 Hot-loader ?\n\n你可以想像成 live-reload 的進階版本，Hot-loader 會直接在畫面上更新，改變你剛剛改好的程式碼。\n\n### 比較圖：\n\n| 套件        | 功能         | 畫面更新 | 資料重新 load  |\n| ----------- | ------------ | -------- | -------------- |\n| live-reload | 幫你按 F5    | 是       | 資料須重新 key |\n| Hot-loader  | 直接更新程式 | 是       | 資料會存在     |\n\n> 想像一下我們開發一個功能，更改了顏色，我不需要從登入開始一步一步點到那個畫面，按下存檔的瞬間，它就幫我把顏色更新上去了！\n\n### webpack 開發包選項：\n\n因為我們的目標是 `學習 vue` 因此，我們將不選擇安裝 test 與 coding style.\n\n> 如果是多人共同開發的專案中，還是建議使用 coding style 內建有 `airbnb` 選項。\n\n選項：\n\n- Project name learnVue\n- Project decsription learnVue\n- Auther hungjie19\n- User ESLine to lint your code? `No`\n- Pick an ESLine preset\n- Setup unit tests with Karma + Mocha? `No`\n- Setup e2e tests with Nigthwatch? `No`\n\n經過以上詢問式設定，安裝完成 webpack 開發包的結構後：\n\n1. 移動到開發包中：\n\n```js\ncd your-project-name\n```\n\n2. 透過 npm 安裝相依套件\n\n```js\nnpm install\n```\n\n3. 執行開發版\n\n```js\nnpm run dev\n```\n\n稍等一下 webpack 正在 build 與 setup server..\n\n接著就可以在 `http://localhost:8080` 看到預設的 Vue Hello Page!\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/installFile/image/vueHelloWord.png?raw=true)\n"},236:function(module,exports){module.exports="# 在 JavaScript 中編寫更好的條件的 5 個技巧\n\n## 目錄\n\n1. 對多個標準使用 Array.includes\n2. 減少嵌套，儘早返回\n3. 使用默認功能參數和解構\n4. 支持 Map / Object Literal 而不是 Switch 語句\n5. 對所有/部分標準使用 Array.every 和 Array.some\n\n### 1. 對多個標準使用 Array.includes\n\n```js\n// condition\nfunction test(fruit) {\n\tif (fruit == 'apple' || fruit == 'strawberry') {\n\t\tconsole.log('red');\n\t}\n}\n```\n\n乍一看，上面的例子看起來不錯。然而，如果我們得到更多的紅色水果，說的`cherry`和`cranberries`？我們是否會更多地擴展聲明`||`？\n\n我們可以使用[（Array.includes）](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)重寫上面的條件`Array.includes`\n\n```js\nfunction test(fruit) {\n\t// extract conditions to array\n\tconst redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n\n\tif (redFruits.includes(fruit)) {\n\t\tconsole.log('red');\n\t}\n}\n```\n\n我們將`red fruits`（條件）提取到數組中。通過這樣做，代碼看起來更整潔。\n\n### 2. 減少嵌套，儘早返回\n\n讓我們擴展前面的示例以包含另外兩個條件：\n\n如果沒有提供水果，拋出錯誤\n如果超過 10，則接受並打印水果數量。\n\n```js\nfunction test(fruit, quantity) {\n\tconst redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n\t// condition 1: fruit must has value\n\tif (fruit) {\n\t\t// condition 2: must be red\n\t\tif (redFruits.includes(fruit)) {\n\t\t\tconsole.log('red');\n\t\t\t// condition 3: must be big quantity\n\t\t\tif (quantity > 10) {\n\t\t\t\tconsole.log('big quantity');\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error('No fruit!');\n\t}\n}\n\n// test results\ntest(null); // error: No fruits\ntest('apple'); // print: red\ntest('apple', 20); // print: red, big quantity\n```\n\n看看上面的代碼，我們有：\n\n1 個 if / else 語句過濾掉無效條件\n3 級嵌套 if 語句（條件 1,2 和 3）\n\n我個人遵循的一般規則是**在**發現**無效條件時提前返回**。\n\n```js\n/_ return early when invalid conditions found _/;\n\nfunction test(fruit, quantity) {\n\tconst redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n\t// condition 1: throw error early\n\tif (!fruit) throw new Error('No fruit!');\n\t// condition 2: must be red\n\tif (redFruits.includes(fruit)) {\n\t\tconsole.log('red');\n\t\t// condition 3: must be big quantity\n\t\tif (quantity > 10) {\n\t\t\tconsole.log('big quantity');\n\t\t}\n\t}\n}\n```\n\n通過這樣做，我們有一個較少級別的 ​​ 嵌套語句。這種編碼風格很好，特別是當你有很長的 if 語句時（想像你需要滾動到最底層才知道有一個 else 語句，而不是很酷）。\n\n如果通過反轉條件並提前返回，我們可以進一步減少嵌套。請查看下面的條件 2，看看我們是如何做到的：\n\n```js\n/_ return early when invalid conditions found _/;\n\nfunction test(fruit, quantity) {\n\tconst redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n\n\tif (!fruit) throw new Error('No fruit!'); // condition 1: throw error early\n\tif (!redFruits.includes(fruit)) return; // condition 2: stop when fruit is not red\n\tconsole.log('red');\n\t// condition 3: must be big quantity\n\tif (quantity > 10) {\n\t\tconsole.log('big quantity');\n\t}\n}\n```\n\n通過反轉條件 2 的條件，我們的代碼現在沒有嵌套語句。當我們有很長的邏輯時，這種技術非常有用，我們希望在條件不滿足時停止進一步的處理。\n\n但是，這樣做並不是**一件難事**。問問自己，這個版本（沒有嵌套）比前一個更好/更可讀（條件 2 嵌套）？\n\n對我來說，我只是把它留作以前的版本（條件 2 嵌套）。這是因為：\n\n代碼簡短直接，嵌套 if 更清晰\n反轉條件可能會引發更多的思考過程（增加認知負荷）\n\n因此，始終**旨在儘早減少嵌套和返回，但不要過度**。如果您感興趣，有一篇文章和 StackOverflow 討論會進一步討論這個主題：\n\n[避免其他，早期](http://blog.timoxley.com/post/47041269194/avoid-else-return-early)由蒂姆奧克斯利[回歸](http://blog.timoxley.com/post/47041269194/avoid-else-return-early)\n[StackOverflow 討論](https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement) if / else 編碼風格\n\n### 3. 使用默認功能參數和解構\n\n我想下面的代碼可能看起來很熟悉，我們總是需要檢查`null`/ `undefined`值並在使用 JavaScript 時指定默認值：\n\n```javascript\nfunction test(fruit, quantity) {\n\tif (!fruit) return;\n\tconst q = quantity || 1; // if quantity not provided, default to one\n\n\tconsole.log(`We have ${q} ${fruit}!`);\n}\n\n//test results\ntest('banana'); // We have 1 banana!\ntest('apple', 2); // We have 2 apple!\n```\n\n實際上，我們可以`q`通過分配默認函數參數來消除變量。\n\n```js\nfunction test(fruit, quantity = 1) {\n\t// if quantity not provided, default to one\n\tif (!fruit) return;\n\tconsole.log(`We have ${quantity} ${fruit}!`);\n}\n\n//test results\ntest('banana'); // We have 1 banana!\ntest('apple', 2); // We have 2 apple!\n```\n\n更簡單直觀不是嗎？請注意，每個參數都有自己的[默認函數參數](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)。例如，我們也可以指定默認值`fruit`：`function test(fruit = 'unknown', quantity = 1)`。\n\n如果我們`fruit`是一個對象怎麼辦？我們可以指定默認參數嗎？\n\n```js\nfunction test(fruit) {\n\t// printing fruit name if value provided\n\tif (fruit && fruit.name) {\n\t\tconsole.log(fruit.name);\n\t} else {\n\t\tconsole.log('unknown');\n\t}\n}\n\n//test results\ntest(undefined); // unknown\ntest({}); // unknown\ntest({ name: 'apple', color: 'red' }); // apple\n```\n\n看看上面的例子，我們想要打印水果名稱，如果它可用，或者我們將打印未知。我們可以避免`fruit && fruit.name`使用默認函數參數和破壞進行條件檢查。\n\n```js\n// destructing - get name property only\n// assign default empty object {}\nfunction test({ name } = {}) {\n\tconsole.log(name || 'unknown');\n}\n\n//test results\ntest(undefined); // unknown\ntest({}); // unknown\ntest({ name: 'apple', color: 'red' }); // apple\n```\n\n由於我們只需要`name`來自水果的屬性，我們可以使用構造參數`{name}`，然後我們可以`name`在代碼中使用變量而不是`fruit.name`。\n\n我們還將空對象指定`{}`為默認值。如果我們不這樣做，那麼在執行該行時會出錯`test(undefined)`- `Cannot destructure property name of 'undefined' or 'null'.`因為`name` undefined 中沒有屬性。\n\n如果您不介意使用第三方庫，有幾種方法可以減少空檢查：\n\n使用[Lodash 獲取](https://lodash.com/docs/4.17.11#get)功能\n使用 Facebook 開源的[idx](https://github.com/facebookincubator/idx)庫（與 Babeljs）\n\n以下是使用 Lodash 的示例：\n\n```js\n// Include lodash library, you will get _\nfunction test(fruit) {\n  console.log(__.get(fruit, 'name', 'unknown'); // get property name, if not available, assign default value 'unknown'\n}\n\n// test results\ntest(undefined); // unknown\ntest({ }); // unknown\ntest({ name: 'apple', color: 'red' }); // apple\n```\n\n您可以在[此處](http://jsbin.com/bopovajiye/edit?js,console)運行演示代碼。此外，如果您是功能編程（FP）的粉絲，您可以選擇使用[Lodash fp](https://github.com/lodash/lodash/wiki/FP-Guide)，[Lodash](https://github.com/lodash/lodash/wiki/FP-Guide)的功能版本（方法更改為`get`或`getOr`）。\n\n### 4. 支持 Map / Object Literal 而不是 Switch 語句\n\n讓我們看看下面的例子，我們想根據顏色打印水果：\n\n```js\nfunction test(color) {\n\t// use switch case to find fruits in color\n\tswitch (color) {\n\t\tcase 'red':\n\t\t\treturn ['apple', 'strawberry'];\n\t\tcase 'yellow':\n\t\t\treturn ['banana', 'pineapple'];\n\t\tcase 'purple':\n\t\t\treturn ['grape', 'plum'];\n\t\tdefault:\n\t\t\treturn [];\n\t}\n}\n\n// test results\ntest(null); // []\ntest('yellow'); // ['banana', 'pineapple']\n```\n\n上面的代碼似乎沒有錯，但我覺得它很冗長。使用具有更清晰語法的 object literal 可以實現相同的結果：\n\n```js\n// use object literal to find fruits in color\nconst fruitColor = {\n\tred: ['apple', 'strawberry'],\n\tyellow: ['banana', 'pineapple'],\n\tpurple: ['grape', 'plum'],\n};\n\nfunction test(color) {\n\treturn fruitColor[color] || [];\n}\n```\n\n或者，您可以使用[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)來實現相同的結果：\n\n```js\n// use Map to find fruits in color\nconst fruitColor = new Map()\n\t.set('red', ['apple', 'strawberry'])\n\t.set('yellow', ['banana', 'pineapple'])\n\t.set('purple', ['grape', 'plum']);\n\nfunction test(color) {\n\treturn fruitColor.get(color) || [];\n}\n```\n\n[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)是自 ES2015 以來可用的對像類型，允許您存儲鍵值對。\n\n我們應該禁止使用 switch 語句嗎？不要局限於此。就個人而言，我盡可能使用對象文字，但我不會設置硬規則來阻止它，使用對你的場景有意義的。\n\nTodd Motto 有一篇文章深入研究了 switch 語句與對象文字，你可以[在這裡](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/)閱讀。\n\n**TL; DR; 重構語法**\n\n對於上面的例子，我們實際上可以重構我們的代碼以獲得相同的結果`Array.filter`。\n\n```js\nconst fruits = [\n\t{ name: 'apple', color: 'red' },\n\t{ name: 'strawberry', color: 'red' },\n\t{ name: 'banana', color: 'yellow' },\n\t{ name: 'pineapple', color: 'yellow' },\n\t{ name: 'grape', color: 'purple' },\n\t{ name: 'plum', color: 'purple' },\n];\n\nfunction test(color) {\n\t// use Array filter to find fruits in color\n\treturn fruits.filter(f => f.color == color);\n}\n```\n\n實現相同結果的方法總是不止一種。我們用相同的例子展示了 4。編碼很有趣！\n\n### 5. 對所有/部分標準使用 Array.every 和 Array.some\n\n最後一個提示更多的是利用新的（但不是那麼新的）Javascript Array 函數來減少代碼行。看下面的代碼，我們想檢查所有水果是否都是紅色的：\n\n```js\nconst fruits = [\n\t{ name: 'apple', color: 'red' },\n\t{ name: 'banana', color: 'yellow' },\n\t{ name: 'grape', color: 'purple' },\n];\n\nfunction test() {\n\tlet isAllRed = true;\n\n\t// condition: all fruits must be red\n\tfor (let f of fruits) {\n\t\tif (!isAllRed) break;\n\t\tisAllRed = f.color == 'red';\n\t}\n\tconsole.log(isAllRed); // false\n}\n```\n\n代碼太長了！我們可以通過以下方式減少行數`Array.every`：\n(every() 方法會測試陣列中的所有元素是否都通過了由給定之函式所實作的測試。)\n\n```js\nconst fruits = [\n\t{ name: 'apple', color: 'red' },\n\t{ name: 'banana', color: 'yellow' },\n\t{ name: 'grape', color: 'purple' },\n];\n\nfunction test() {\n\t// condition: short way, all fruits must be red\n\tconst isAllRed = fruits.every(f => f.color == 'red');\n\tconsole.log(isAllRed); // false\n}\n```\n\n現在更乾淨了嗎？以類似的方式，如果我們想測試任何水果是否為紅色，我們可以用`Array.some`它來實現它。\n(some() 方法會測試陣列中是否至少有一個元素通過由給定之函式所實作的測試。)\n\n```js\nconst fruits = [\n\t{ name: 'apple', color: 'red' },\n\t{ name: 'banana', color: 'yellow' },\n\t{ name: 'grape', color: 'purple' },\n];\n\nfunction test() {\n\t// condition: if any fruit is red\n\tconst isAnyRed = fruits.some(f => f.color == 'red');\n\tconsole.log(isAnyRed); // true\n}\n```\n\n## 出處：\n\n[5 Tips to Write Better Conditionals in JavaScript](https://scotch.io/bar-talk/5-tips-to-write-better-conditionals-in-javascript)\n"},237:function(module,exports){module.exports="# Immutable.js\n\nImmutable.js 是 facebook 官方與 React 同期推出的 JS 發明之一，只是因為 React 太過於耀眼，Immutable 的光芒被遮蔽了而已，但絲毫不耽誤它的傳播。\nReact 是一個用狀態 state 管理 UI 的表現層，狀態 state 的內容、值直接決定 UI 的樣式、表現。然而狀態 state 的值卻難以把控，眾多的錯誤、bug、以及不理想都是由於狀態 state 的不按預期更改。\nImmutable 就是用來解決這個問題的利器。\n\n官方文件網址：[https://immutable-js.github.io/immutable-js/](https://immutable-js.github.io/immutable-js/)\n\n## 痛點\n\n在 React state 中，數據經常以 object 或 array 的形式存儲，然後將現有數據、後台新數據、用戶操作產生的數據組成下一個新的 state，緊接著 setState --\x3e shouldComponentUpdate()。雖然在 setState 只需要傳入需要更新的數據，不需要傳入全部 state 值，同時還提供了 shouldComponentUpdate()這樣一個提高執行效率的大殺器，但使用起來並不簡單。 setState 前處理數據經常用到 Object.assign()、Array.concat()、 Object.freeze()等眾多方法處理引用類數據，以防數據被無意覆蓋或篡改。想想都累，緊接著，需要在 shouldComponentUpdate()中對比當前 state、props 與 nextstate、nextprops 的值，string number boolean 等值類型數據還好，可偏偏更多的數據是 Array 與 Object，深層對比 Object 、Array 便隨之而來，真是不知道處理對比損耗的性能和直接忽略去渲染哪個更合適一些。 。 。\n\n## Immutable 可以做什麼\n\n由於 Immutable 每次特點是每次都返回新的數據且數據生成後不可更改，即在此思路下，每次的數據更改不會影響到其與數據。也就降低了數據無意被修改、覆蓋的可能性。同時配備 Immutable 特殊的數據 hash 檢測機制，可以很輕易的對比兩個 Object、Array 數據對象。\n\n```js\nlet obj1 = { a: 1 };\nlet obj2 = obj1;\nobj2.a = 5;\nconsole.log(obj2.a); // 5\nconsole.log(obj1.a); // 5\n\nlet obj1 = { a: 1 };\nlet obj2 = Object.assign({}, obj1, { a: 5 });\nconsole.log(obj2.a); // 5\nconsole.log(obj1.a); // 1\n```\n\n看著就心累。 Immutable 解放了我 ​​ 們的天性。\n\n```js\n// 暫時不考慮實際api\nlet obj1 = Immutable.object({ a: 1 }); // 聲明一個immutable類型的object\nlet obj2 = Immutable.object(obj1); // 複製一個immutable類型的object\n// 數據不可變，且總是返回新數據\nobj2 = obj2.update({ a: 5 }); // 對數據的更改都將返回新的數據，並不影響原數據\nconsole.log(obj2.a); // 5\nconsole.log(obj1.a); // 1\n```\n\n看著還是調用了不少方法來完成這個操作，可如果習慣了之後就和 let 聲明變量一樣簡單，侵入血液，豈不是就不麻煩了。而且還完成了我們的需求。\n\nImmutable 很好的幫我們解決了前面提到的一部分痛點，另一部分在後面繼續介紹。\n\n## 卸下 Immutable 面紗\n\n剛才在上一段代碼中為了便於理解，沒有使用真實的 api，只是模擬了一下便於書寫。\n上面一段代碼轉換為真實代碼其實也很簡單\n\n```js\nlet obj1 = Immutable.Map({ a: 1 }); // 聲明一個immutable類型的object\nlet obj2 = obj1.set('a', 5); // 數據不可變，且總是返回新數據\nconsole.log(obj2.get('a')); // 5\nconsole.log(obj1.get('a')); // 1\n```\n\n可以看出真實代碼更簡單，由於對 obj1 的更改不會真實作用在 obj1 身上，而是返回新的對像被 obj2 接收，代碼其實少了一行。同時 obj1、obj2 相對獨立，不會互相干擾。可能對 Map 還有所疑惑，在之後的 post 會詳細解釋 Immutable 的各種類型數據，並附有 Immutable 的全文文檔翻譯。\n\n剛剛還提到一個 Immutable 利用 hash 來解決引用數據內部對比的問題。在 Immutable 內部也非常簡單的實現了，Object、Array 的深層對比。\n\n```js\n// immutable的object對比\nlet obj1 = Immutable.Map({ a: Immutable.Map({ a: 1 }) });\nlet obj2 = Immutable.Map({ a: Immutable.Map({ a: 1 }) });\nlet obj3 = Immutable.Map({ a: Immutable.Map({ a: 5 }) });\nImmutable.is(obj1, obj2); // true\nImmutable.is(obj1, obj3); // false\n\n// plain js的object對比\nlet a = { a: { a: { a: 1 } } };\nlet b = { a: { a: { a: 1 } } };\nlet c = { a: { a: { a: 5 } } };\na === b; // false\na === c; // false\n```\n\n在 Immutable 的世界裡，對比一個 Object 與 Array 對象就是如此簡單，是不是在 shouldComponentUpdate( ) 簡直好用到不行。\n\n## Immutable 不止這麼簡單\n\n1、Immutable 幫我們降低了數據的更改風險，增加了我們對數據的可控性\n\n2、Immutable 大部分 api 都是以函數式編程方式實現，便於現在函數式編程的大潮流。\n\n3、Immutable 對數據的檢測機制更完善，並不是無腦的深複製，而是盡可能利用現有的數據，降低了內存的開銷。\n\n4、Immutable 僅僅是一種數據格式的更改，使用過程中相當於一個簡單的對象(實際為類)，可以與任意框架、結構、插件搭配，不會產生衝突式危害。\n\n## 優點\n\nimmutable.js 的優點是\n\n- 效能佳（perfermance）\n- 簡化變異的追蹤（mutation tracking）\n\n效能佳（perfermance）\nimmutable.js 利用結構共享（structural sharing）的方式實作 persistent data structure。 所有的更新都會產生新值，但內部利用結構分享來大大減低記憶體的使用。 例如：假設要新加入一個值到一個長度為 1000 的陣列，它並非產生一個新的長度為 1001 的陣列，而是少部份的物件被建立－ 更改的部份新建立節點，而沒有更改的部份仍維持共享。\n\n簡化變異的追蹤（mutation tracking）- Reference & Value Equality Check\n在比對兩個物件是否相等時，不使用指標的比對（reference equality check），而是值的比對（value equality check）－減少了 reference equality check 所帶來的 recursive scan，因此效能較佳。\n\n但由於 immutable.js 在實作上是把 JavaScript 物件外包一層糖衣做處理，這個產生的物件是 immutable 物件而非一般的 JavaScript 物件，因此若其它 library 是使用一般的 JavaScript 物件，交互使用上可能會產生一些困擾。\n\n解法是使用另外的靜態類型檢查工具 / 系統（例如：TypeScript or Flow）或隱藏實作細節（例如：Redux）來處理。\n\n可參考文件：[https://github.com/AllFE/blog/issues/2](https://github.com/AllFE/blog/issues/2)\n\n## Immutable Map 與 List 共同點\n\n查看官方文檔可得知，地圖與列表兩者的成員都是只有一個尺寸用來表示成員的個數。方法可以分為幾個大類\n\n1，構造類，包含構造方法或者向目標類型轉換的方法\n\n2，數據更改類：持久性變化與深度持續變化兩類，功能是更改集合內的某個數據\n\n3，查看數據類：閱讀價值與深度閱讀價值兩類。\n\n4，類型轉換類：轉換為 JavaScript 類型，轉換為集合併轉換為 Seq 三類\n\n5，迭代類：迭代器類\n\n6，比較類：價值平等類\n\n7，類似原生 js 的方法類：其與幾個類，搜索值，縮小值，組合，創建子集，副作用\n\n這幾個大類在兩者中都比較通用，並且絕大多數都是共有的相似的 API 接口。並且擁抱函數式編程且絕大多數對數據操作的方法與原生 JS 類似。\n\n## 將原生 JS 轉為不可改變\n\n常用的兩種方法\n\n```js\nImmutable.fromJS(plainJS); // 原生對象轉換為Map，原生Array轉換為List\nImmutable.Map({}); // 將原生對象轉為Map\nImmutable.List([]); // 將原生數組轉換為List\n```\n\nImmutable.fromJS（）的好處在於它會嵌套遞歸執行轉換，但地圖與列表不支持深層嵌套轉換。因此實際生產中需要選擇需要的方法進行轉換\n\n## 將不可改變轉換為原生 JS\n\n```js\nImmutableDate.toJS(); // 會自動判別Map與LIst並轉換為原生Object與Array\n```\n\n## 判斷兩個不可變數據是否相等\n\n```js\n// Immutable會根據內部的hash機制等來判斷兩個Immutable對像是否值相等，而不是引用相等\nconst map1 = Map({ a: 1, b: 1, c: 1 });\nconst map2 = Map({ a: 1, b: 1, c: 1 });\nImmutable.is(map1, map2); // true\n\nmap1.equals(map2); // 也是利用Immutable.is但是提供單獨的書寫方式\nlist1.equals(list2);\n```\n\n## Map 詳解\n\n### 建構 Map\n\n```js\nmap0 = Immutable.Map() // 空Map\nmap1 = Immutable.Map({a:1}）// 不支持嵌套\nmap2 = Immutable.fromJS({a:{b:{c:1}}}) // 支持嵌套\n```\n\n### 判斷類型\n\n```js\nImmutable.Map.isMap(x); // true or false\n```\n\n### 數據獲取，更新與刪除\n\n謹記 Map 中的關鍵都為字符串\n\n```js\nmap1.get('a'); // 獲取鍵為的值\nmap2.getIn(['a', 'b', 'c']); // 深層遞歸獲取鍵為c的值類似於obj.a.b.c\nmap1.set('a', 2); // 設置或更新鍵a的值為2\nmap2.setIn(['a', 'b', 'c'], 2); // 深層遞歸獲設置或更新鍵c的值類似於obj.a.b.c\nmap1.has('a');\nmap2.has(['a', 'b', 'c']);\n```\n\n除了常規的原生 JS 中用。。。來獲取，更新數據的方式外，一成不變增加了一個更新方法用來通過函數方法更新數據\n\n```js\nmap1.update('a', value => value + value);\nmap2.updateIn(['a', 'b', 'c'], value => value + value);\n```\n\n其中每個方法都有一個以在結尾的對應方法，他們的第一個參數是一個數組形式的查詢路徑，注意路徑中絕大多數應該是字符串類型，一定要記得加引號。\n\n```js\n// Map中Key的刪除也是非常簡單\nmap1.delete('a');\nmap2.deleteIn(['a', 'b', 'c']);\n```\n\n## Map 常用方法\n\n### map 方法，便利操作\n\n```js\nMap({ a: 1, b: 2 }).map(x => 10 * x);\n```\n\n### filter 方法，類似於數組的 filter 數據篩選方法\n\n```js\nMap({ x: 1, y: 2, z: 3 }).filter((value, key) => value % 2 === 0);\n```\n\n### 三種迭代器方法 keys()，values()，entries()使用方法類似，只是默認傳入的參數不一樣\n\n```js\nlet a = Immutable.Map({ x: 1, y: 2, z: 3 }).keys();\na.next();\na.next();\na.next();\na.next();\n```\n\n執行結果\n\n```js\nObject {value: \"x\", done: false}\nObject {value: \"y\", done: false}\nObject {value: \"z\", done: false}\nObject {value: undefined, done: true}\n```\n\n### merge 方法：Map 的合併\n\n類似於 Object.assign({}，obj1，obj2)這樣非常高頻的方法\n\n```js\nlet b = Immutable.Map({ x: 1, y: 2, z: 3 });\nlet c = Immutable.Map({ xx: 1, yy: 2, zz: 3, x: 5 });\nlet d = b.merge(c);\n```\n\n## List 詳解\n\n### 建構 List\n\n```js\nlist0 = Immutable.List(); // 空Map\nlist1 = Immutable.List([1, 2, 3, 4, 5]); // 不支持嵌套\nlist2 = Immutable.fromJS([1, 2, 3, 4, 5, [1, 2, 3, 4, 5, [1, 2, 3, 4, 5]]]); // 支持嵌套\n```\n\n### 判斷類型\n\n```js\nImmutable.List.isList(x); // true or false\n```\n\n### List 長度\n\n```js\nlist1.size;\nlist1.count(); // 即使是一個懶惰的名單，調用計數方法也會返回正確的長度\n```\n\n### 數據獲取，更新與刪除\n\n```js\nlist1.get(1); // 獲取索引為1的值\nlist2.getIn([1, 2, 3]); // 深層遞歸獲取索引路徑的值類似於數組[1] [2] [3]\nlist1.set(1, 2); // 設置或更新索引為1的值為2\nlist2.setIn([1, 2, 3], 2); // 深層遞歸設置或更新索引路徑的值類似於array [1] [2] [3] = 2\n```\n\n除了常規的原生 JS 中用[1][2] [3]來獲取，更新數據的方式外，不可變增加了一個更新方法用來通過函數方法更新數據\n\n```js\nlist1.update(1, value => value + value);\nlist2.updateIn([1, 2, 3], value => value + value);\n```\n\n其中每個方法都有一個以在結尾的對應方法，他們的第一個參數是一個數組形式的查詢路徑。\n\n```js\n// 名單中關鍵的刪除也是非常簡單\nlist1.delete(1);\nlist2.deleteIn([1, 2, 3]);\n```\n\n## list 常用方法\n\n### map 方法，便利操作\n\n```js\nList([1, 2, 3, 4, 5]).map(x => 10 * x);\n```\n\n### 過濾方法，類似於數組的過濾數據篩選方法\n\n```js\nList([1, 2, 3, 4, 5]).filter((value, key) => value % 2 === 0);\n```\n\n### 查找符合條件的第一個值\n\n```js\n// 返回的是值，而不是index\nList([1, 2, 3, 4]).find(x => x > 1);\nList([1, 2, 3, 4]).findLast(x => x > 1);\n```\n\n### 查找某個值\n\n```js\n// 返回第一個符合條件的指數\nList([1, 2, 3, 4]).indexOf(2);\n// 倒序進行查找\nList([1, 2, 3, 4]).lastIndexOf(2);\n```\n\n### 三種迭代器方法 keys()，values()，entries()使用方法類似，只是默認傳入的參數不一樣\n\n```js\nlet a = Immutable.List([1, 2, 3, 4, 5]).keys();\na.next();\na.next();\na.next();\na.next();\na.next();\na.next();\n```\n\n執行結果\n\n```js\nObject {value: 1, done: false}\nObject {value: 2, done: false}\nObject {value: 3, done: false}\nObject {value: 4, done: false}\nObject {value: 5, done: false}\nObject {value: undefined, done: true}\n```\n\n### 尾部壓入，尾部壓出，頭部塞入與頭部取出方法\n\n```js\nList([1, 2, 3, 4]).push(5);\nList([1, 2, 3, 4]).pop();\nList([2, 3, 4]).unshift(1);\nList([0, 1, 2, 3, 4]).shift();\n```\n\n### concat 方法：list 的合併\n\n```js\nlet b = Immutable.list([1, 2, 3, 4]);\nlet c = Immutable.list([1, 2, 3, 4]);\nlet d = b.concat(c); // [ 1, 2, 3, 4, 1, 2, 3, 4 ]\n```\n\n### 覆蓋合併合併方法\n\n```js\nlet b = Immutable.List([1, 2, 3, 4]);\nlet c = Immutable.List([7, 8]);\nlet d = b.merge(c); // [ 7, 8, 3, 4 ]\n```\n\n## 其他範例\n\n```js\n// 將 map1.b 改為 87\nconst { Map } = Immutable;\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 87);\n\nconsole.log(\n\tmap1.get('b'), // 2\n\tmap2.get('b'), // 87\n\tmap2.toJS() // { a: 1, b: 87, c: 3 }\n);\n```\n\n```js\n// 過濾掉奇數\n// 加 1\n// 並加總\nconst { List } = Immutable;\nconst list1 = List([1, 2, 3, 4, 5, 6]);\nconst list2 = list1.filter(x => x % 2 == 1).map(x => x + 1);\nconst sumList2 = list2.reduce((acc, x) => acc + x);\n\nconsole.log(\n\tlist2.toJS(), // [2, 4, 6]\n\tsumList2 // 12\n);\n```\n"},238:function(module,exports){module.exports="# JavaScript 七種陣列的處理方法\n\n以下使用這份陣列資料來實作\n\n```js\nlet people = [\n\t{\n\t\tname: '大中天',\n\t\tmoney: 500,\n\t},\n\t{\n\t\tname: '大小天',\n\t\tmoney: 3000,\n\t},\n\t{\n\t\tname: '大大天',\n\t\tmoney: 60000,\n\t},\n\t{\n\t\tname: '大中小',\n\t\tmoney: Infinity,\n\t},\n];\n```\n\n## ForEach\n\n除了 forEach 以外的幾個方法都會回傳陣列或一個值，在等號的左方如果放置一個變數，那麼此變數會是 `undefined` (沒有回傳任何值)。\n\n```js\nvar forEachLoop = people.forEach(function(item, index, array) {\n\tconsole.log(item, index, array); // 物件, 索引, 全部陣列)\n});\n\nconsole.log(forEachLoop); // undefined\n```\n\n其它的方法都會回傳一個值或陣列，以此來說就會回傳原本的陣列值。\n\n```js\nvar mapLoop = people.map(function(item, index, array) {\n\treturn item;\n});\n\nconsole.log(mapLoop); // 與原本陣列資料相同\n```\n\n## Filter\n\n`filter` 可以用來過濾陣列中符合條件的物件，以下範例中搜尋符合大於 5000 元的，只要將該物件中的回傳為 true，那麼就會回傳完整的物件。\n\n```js\nvar filterEmpty = people.filter(function(item, index, array) {});\n\nconsole.log(filterEmpty); // 沒有條件，會是一個空陣列\n\nvar filterMoneyThan5000 = people.filter(function(item, index, array) {\n\treturn item.money > 5000; // 取得大於五千元\n});\n\nconsole.log(filterMoneyThan5000); // 大大天, 大中小 這兩個物件\n```\n\n## find\n\n`find` 是用來搜尋陣列中符合條件的物件，且僅能有一個，當回傳 `true` 數量超過兩者以上，那會以第一個為優先，通常會適合搜尋來搜尋特定 id。\n\n```js\nvar findEmpty = people.find(function(item, index, array) {});\n\nconsole.log(findEmpty); // 沒有條件，會是 undefined\n\nvar findMoneyThan5000 = people.find(function(item, index, array) {\n\treturn item.money > 5000; // 取得大於五千元\n});\n\nconsole.log(findMoneyThan5000); // 雖然答案有兩個，但只會回傳 '大大天' 這一個物件\n\nvar findJay = people.find(function(item, index, array) {\n\treturn item.name === '大大天'; // 找到大大天\n});\n\nconsole.log(findJay);\n```\n\n## map\n\n`map` 會回傳 return 的物件、值，功用上是用來處理陣列回傳新值產生一個新陣列，要特別注意回傳的值數量與原始陣列長度相同，所以留空的 return 則會產生 `undefined`。\n\n```js\n// 沒有 return 也會產生 undefined\nvar mapEmpty = people.map(function(item, index, array) {});\nconsole.log(mapEmpty); // [undefined, undefined, undefined, undefined]\n\nvar everyoneAdd = people.map(function(item, index, array) {\n\titem.money = item.money + 500; // 每個 money + 500\n\treturn item; // 回傳物件\n});\n\nconsole.log(everyoneAdd);\n// 回傳每個處理後的數值，不過記得這是傳參考特性，會影響到原始的物件\n// {name: \"大中天\", money: 1000}\n// {name: \"大小天\", money: 3500}\n// {name: \"大大天\", money: 60500}\n// {name: \"大中小\", money: Infinity}\n\nvar mapMoneyThan5000 = people.map(function(item, index, array) {\n\t// 錯誤示範，長度不符合時\n\tif (item.money > 5000) {\n\t\treturn item; // 取得大於五千元\n\t}\n});\n\nconsole.log(mapMoneyThan5000);\n\n// [undefined, undefined, {name: \"大大天\", money: 60000}, {name: \"大中小\", money: Infinity} ]\n```\n\n## every\n\n驗證全部的結果，當全部的值都為 true 時，則最終會得到 true；只要其中之一為 false，則回傳為 false。\n\n```js\nvar ans = people.every(function(item, index, array) {\n\treturn item.money > 10000;\n});\n\nconsole.log(ans); // false: 只要有部分不符合，則為 false\n\nvar ans2 = people.every(function(item, index, array) {\n\treturn item.money > 300;\n});\n\nconsole.log(ans2); // true: 大家錢都有超過 300\n```\n\n## some\n\n與前者類似，但只要部分為 true，則回傳為 true；全部為 false 則才會為 false。\n\n```js\nvar ans = people.some(function(item, index, array) {\n\treturn item.money > 10000;\n});\n\nconsole.log(ans); // false: 只要有部分符合，則為 true\n\nvar ans2 = people.some(function(item, index, array) {\n\treturn item.money < 300;\n});\n\nconsole.log(ans2); // true: 大家錢都不少於 300\n```\n\n## reduce\n\n`reduce` 是其中最為特別的，首先他回傳的參數與先前的不同，他會接收到前一個回傳的值供下一個物件使用，很適合用在累加與比對上，以下提供不同範例供參考。\n\n- accumulator：前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值\n- currentValue：當前變數\n- currentIndex：當前索引\n- array：全部陣列\n\n```js\nvar reduceEmpty = people.reduce(function(\n\taccumulator,\n\tcurrentValue,\n\tcurrentIndex,\n\tarray\n) {});\nconsole.log(reduceEmpty);\n```\n\n可以透過與前一個相加的方式，累加陣列中所有的值。\n\n```js\npeople.pop(); // 大中小的錢深不可測，先移除掉\nvar reducePlus = people.reduce(function(\n\taccumulator,\n\tcurrentValue,\n\tcurrentIndex,\n\tarray\n) {\n\t// 分別為前一個回傳值, 目前值, 當前索引值\n\tconsole.log(accumulator, currentValue, currentIndex);\n\treturn accumulator + currentValue.money; // 與前一個值相加\n},\n0); // 傳入初始化值為 0\n\nconsole.log(reducePlus); // 總和為 63500\n```\n\n也可以相互比對，取出最高的值。\n\n```js\nvar reduceBestOne = people.reduce(function(\n\taccumulator,\n\tcurrentValue,\n\tcurrentIndex,\n\tarray\n) {\n\tconsole.log('reduce', accumulator, currentValue, currentIndex);\n\treturn Math.max(accumulator, currentValue.money); // 與前一個值比較哪個大\n},\n0);\n\nconsole.log(reduceBestOne); // 最大值為 60000\n```\n\n## 出處\n\n[JavaScript 常用陣列方法](https://ithelp.ithome.com.tw/articles/10194206)\n"},239:function(module,exports){module.exports="# JavaScript 正則表達式\n\nJavaScript 的特性借鑑許多語言：\n\n- 文法：Java\n\n- 函式：Schema\n\n- 原型繼承：Self\n\n- 正則表達式：Perl\n\n可處理正則表達式的方法：\n\n- regexp.exec\n\n- regexp.test\n\n- string.match\n\n- string.replace\n\n- string.search\n\n- string.split\n\n## 範例\n\n### Parse URL\n\n這邊有個範例要找對應分配的 URL。\n\n```js\nvar parse_url =\n\t'/^(?:([A-Za-z+]:)?(/(0,3))([0-9.-A-Z-a-z]+)(?::(d+))?(?:/([^?#]*))?(?:?([^#]*))?(?:#(.*))?$/';\n\nvar url = 'https://www.ora.com:80/goodparts?q#frament';\n\nvar result = parse_url.exec(url);\n\nvar names = ['url', 'scheme', 'slash', 'host', 'port', 'path', 'query', 'hash'];\n\nvar blanks = '  ';\nvar i;\n\nfor (i = 0; i < name.length; i += 1) {\n\tdocument.wrintIn(name[i] + ':' + blanks.substring(name[i].length), result[i]);\n}\n```\n\n使用 `parse_url` 的 `exec` 方法，傳入字串比對成功則回傳擷取自 url 的零碎字串陣列。\n\n得到結果如下\n\n- url: https://www.ora.com:80/goodparts?q#frament\n\n- sheme: http\n\n- slash: //\n\n- host: www.ora.com:80\n\n- port: 80\n\n- path: goodparts\n\n- query: q\n\n- hash: fragment\n\n現在讓我們開始解析 parse\\_ url ，\n\n```js\nvar parse_url = /^(?:([A-Za-z+]:)?(\\/(0,3))([0-9.\\-A-Z-a-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\n```\n\n`^`：指出字串的開始，為一個定位點，阻止 exec 跳過不像 URL 的字首。\n\n`(?:([A-Za-z+]:)?`：這個字段比對 scheme 名稱，名稱後面必須接:。\n\n`(?:...)`：表示本段落非記憶集結，字尾? 表示該集結為選用集結。\n\n`(...)`：括號表示一個記憶集結。選用：重複零或一次。\n\n`[...]`：字元類組，以這次的[A-Za-z+]來說，就是包含二十六個大小寫字母。\n\n`-`：指範圍連字號。\n\n`+`：用於字元類組用於一或多次比對。這個群組緊接在:字元後，比對時將照字面如實比對。\n\n記憶集結複製符合比對的文字，放到 result 變數中。每個記憶集結都拿到一個編號，假設某個記憶集結得到 1，符合這個記憶集結的文字複本會出現在 `result[1]`。\n\n```js\n(\\/{0,3})\n```\n\n`\\/` 比對是否有`/`斜線字元，它被\\反斜線字元轉義，所以不會被翻譯為正規式實字的結尾。`{0,3}` 意指它前面的`/`可以出現 1~3 次。\n\n```js\n([0-9.\\-A-Za-z]+)\n```\n\n比對 host，由一個或多個英數字元，加上「.」或「-」組成。`-` 需做轉義，表示為`\\-`，避免誤解為範圍連字號。\n\n```js\n(?::(/d+))?\n```\n\n比對 port，接在字元後的數字序列。`\\d` 表示數字字元。一或多個數字則是第四個記憶集結。\n\n```js\n(?:\\/([^?#]*))?\n```\n\n選用性集結，開頭為`/`。\n\n字元類組 `[^?#]` 起始為`^`，代表類組包含所有字元，但`?`與`#`除外。`*`則表示前面的字元類組應出現零或多次。\n\n```js\n(?:\\?([^#]*))?\n```\n\n以`?`起始的選用集結，它包含第六個記憶集結，負責比對零或多個字元（不含#）。\n\n```js\n(?:#(.*))?\n```\n\n以`#`起始，「.」用於比對任何字元，但行末字元除外。\n\n```js\n$;\n```\n\n表示字串結尾，確保 URL 後沒有其他東西。\n\n## Parse Number\n\n```js\nvar parse_number = /^-?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d+)?$/i;\nvar test = function(num) {\n\tdocument.writeln(parse_number.test(num));\n};\ntest('l'); //true\ntest('number'); //false\ntest('98.6'); //true\ntest('132.21.86.100'); //false\ntest('123.45E-67'); //true\ntest('123.45D-67'); //false\n```\n\nparse_number 可以分辨符合規格和不符合的字串，但看不出來哪裡不符合，那現在來分解：\n\n```js\n/^     $/I\n```\n\n看到定位點`^`和`$`，所以字串中的所有字元要跟正規式比對。\n\n省略定位點，正規表示字串中是否包含數字；\n\n有了定位點，正規表示字串中是否只有數字。\n\n如果採用 `^`，可對出以數字起始的字串，\n\n如果採用 `$`，可對出以數字結尾的字串。\n\ni 找到相符合文字，忽略大小寫的差異，樣式中唯一一個字元就是 e，我們希望 e 也能找出 E，這個部分寫成 [Ee] 或 (?:E|e) ，也可以達到相同效果。\n\n```js\n-?\n```\n\n負號（-）後的字尾，表示負號為選用。\n\n```js\n\\d+\n```\n\n`\\d` 與`[0-9]` 相同，用來比對數字。字尾`+` 要求前面的數字出現一次或多次。\n\n```js\n(?:\\.|d*)?\n```\n\n`(?:...)`表示一個非記憶集結。\n\n```js\n(?:...)\n```\n\n也是一個非記憶集結，可比對出 e 或 (E)，加上選用正負號，以及一或多個數字。\n\n## 建構\n\n正規式實字：由一對斜線圍起。\n\n對 RegExp 可設置三個旗標，分別以 g、i、m 代表，旗標直接附加在正規實字後方。\n\n- g：全域，比對多次。\n\n- i：鈍感，忽略字元大小寫。\n\n- m：多行，^ 與 \\$ 能比對行末字元。\n\n```js\nvar my_regexp = /\"(?:\\\\.|[^\\\\\\\"\"])*\"/g;\n```\n\n【 建構式 】\n\n構式接受傳入字串，並編譯成 RegExp 物件。\n\n```js\nvar my_regexp = new RegExp('\"(?:\\\\.|[^\\\\\\\\\\\\\"])*\"', 'g');\n```\n\n- 建字串需要額外注意反斜線各自有不同意義，須以引號轉義。\n\n- 第二個參數為指定旗標的字串。\n\n## RegExp 物件的特性\n\nglobal：使用 `g` 時為 true。\n\nignoreCase：使用 `i` 時為 true。\n\nlastIndex：開始下一輪 exec 比對時為 true。\n\nmuliline：使用 `m` 時為 true。\n\nsource：正規式來源字元。\n\n## 以 RegExp 物件共享實例：\n\n```js\nfunction make_a_matcher() {\n\treturn /a/gi;\n}\n\nvar x = make_a_matcher();\nvar y = make_a_matcher();\nx.lastIndex = 10;\nconsole.log(y.lastIndex); //10\n```\n\n## 零件\n\n### 正規式選項\n\n包含一至多個正規式序列。\n\n序列以|字元區分。\n\n```js\n'into.match(/in|int/)';\n```\n\n從 into 中找出 in 就不會再找 int 了。\n\n## 正規式序列\n\n包含一至多個正規式要素。\n\n每個正規式都能選用性地後街量詞，如果沒量詞表示只需比對一次。\n\n## 正規式要素\n\n可能是字元、集結、字元類組，或是轉義序列。\n\n所有字元都被視為實字，除了控制字元和特殊字元：\n\n- \\ / [ ]() { } ? + \\\\\\\\\\\\\\\\\\\\\\\\\\* | . ^ \\$\n\n- 如果想比對上述字元必須加上\\。\n\n- 特殊字元加上\\都能變為實字，但\\無法讓英文變實字。\n\n未轉義的.可以比對任何字元，行末字元例外。\n\n未轉義的^可以比對字串始處，但 lastIndex 特性需為 0，若指定旗標 m 亦可以把行末字元納入比對。\n\n未轉義的\\$可以比對字串尾處，若指定旗標 m 亦可以把行末字元納入比對。\n\n## 正規式轉義\n\n`\\` 在正規要素及字串中皆表示轉義，但在正規要素的運作稍微不同。\n\n`\\f`：與在字串相同，表示換頁字元\n\n`\\n`：表示換行字元。\n\n`\\r`：表示游標歸位（列首）字元。\n\n`\\t`：表 tab 字元。\n\n`\\u`：表示十六進位常數，來指定 unicode 字元。\n\n`\\b`：在正規式中，不表示為倒退字元。\n\n`\\d`：與[0-9]意思相同；\\D：為前者反義，與[^0-9]相同，比對非數字字元。\n\n`\\s` 與 [\\f\\n\\r\\t\\u000B\\u0020\\u00A0\\2028\\u2029] 同義；\\S 與前者反義，與 [^\\f\\n\\r\\t\\u000b\\u0020\\u00a0\\2028\\u2029] 同義。\n\n`\\w` 與 [0-9A-Z_a-z] 意思相同，能比對所有英數字元；\\W 與前者反義，與 [^0-9a-z_a-z] 同義。（/w 應該代表組成詞彙的一組字元。）\n\n`\\b` 設計為字詞邊界的定位點，它使用/w 尋找字詞邊界，對於多國語系無效，這不算優良部份。\n\n## 正規式集結\n\n記憶集結：記憶集結是以括號圍起的正規式選項。每個記憶集結都有編號，第一個左括號為第一個集結，第二個左括號是第二個集結。\n\n非記憶集結：多了(?，非記憶集結只單純做比對，不記憶符合的文段。\n\n右合樣集結：多了(?=字首，比對出集結的文段後，又再回到集結開始的地方，無法比對東西，他也不算優良部份。\n\n右不合樣集結：多了(?!字首，無法比對東西才成功，他也不算優良部份。\n\n## 其他規則\n\n正規式類組：是用來指定一組字元的便利方式。例如：(?:a|e|i|o|u) 可以寫成[aeiou]。\n\n正規式類組轉義：與一般正規轉義規則不太相同。[\\b]意思是倒退字元。\n\n正規式量詞：正規式要素後接正規式量詞，以決定要素與比對次數，大括號圍起的數字就是要比對的次數。\n\n- /www/ ：等同於 /w{3}/。\n\n- {3,6}：比對三、四、五或六次。\n\n- {3,}：可比對三次以上。\n\n- ?：等同於 {0,1}。\n\n- \\*：等同於 {0,}。\n\n- +：等同於 {1,}。\n\n## 出處\n\n[JavaScript 設計模式 優良部份 Chapter07 正則表達式](https://ithelp.ithome.com.tw/articles/10209312)\n"},240:function(module,exports){module.exports="# 瀏覽器不支援警告視窗\n\n提供舊瀏覽器版本偵測、顯示不支援警告\n\n## 使用方式\n\n```js\n<script>\n  commonBrowser.init({\n    date: '2018年01月01日', // 必填 - 到期日文案\n    browserVersion: 'IE11', // 必填 - 支援度文案\n    lowest: [11, 63], // 必填 - 最低支援版本號(Array格式)\n    support: ['ie', 'chrome'] // 必填 - 要偵測的瀏覽器(Array格式)\n    language: [4, 1], // 非必填 - 要顯示的語系\n    date_en: 'January 1, 2018' // 非必填 - 到期日英文文案\n    fixedHeight: '10px' // 非必填 - 要fixed height的高度\n    appendId: 'browserId' // 非必填 - 要提示顯示塞入到id裡(default: body最上面)\n    closeFun: myFunction // 非必填 - 點選關閉後要執行的function\n    closeCookieTime: 1 // 非必填 - 關閉後1天內不再出現不支援提示，輸入'tonight'為關閉後到今晚12點前不顯示\n  });\n<\/script>\n```\n\n### language 值說明\n\n- 1： 繁體中文\n- 2： 簡體中文\n- 3： 繁體中文 + 簡體中文\n- 4： 英文\n- 5： 繁體中文 + 英文\n- 6： 簡體中文 + 英文\n- 7： 繁體中文 + 簡體中文 + 英文\n\n## 顯示結果\n\n```html\n親愛的使用者，為了您的資料安全及更好的使用體驗，從 2018年01月01日\n起，我們將不再支援 IE11 (含)以下的瀏覽器，\n建議您點選下面連結盡快升級安裝以下瀏覽器\n```\n\n## Javascript Code\n\n```js\n(function(window, name, definition) {\n\tif (!window[name]) {\n\t\twindow[name] = definition();\n\t}\n\twindow.onload = function() {\n\t\tif (document.getElementById('browser-support-alert')) window[name].init();\n\t};\n})(window, 'commonBrowser', function() {\n\t/* 防止重複塞進 body */\n\tvar appendChildBody = false;\n\t/* 取用戶代理 */\n\tvar userAgent = window.navigator.userAgent;\n\t/* 是否為手機或平板裝置 */\n\tvar isMobileDevice = false;\n\t/* 是否為 Android */\n\tvar isAndroid = false;\n\t/* 是否為 IOS */\n\tvar isIOS = false;\n\t/* 參數資料 */\n\tvar browserData = '';\n\t/* 連結資料 */\n\tvar linkData = {\n\t\tzh_tw: {\n\t\t\tie:\n\t\t\t\t'https://support.microsoft.com/zh-tw/help/17621/internet-explorer-downloads',\n\t\t\tchrome: 'https://www.google.com.tw/chrome/browser/desktop/index.html',\n\t\t\tsafari: 'https://www.apple.com/tw/safari/',\n\t\t\tfirefox: 'https://www.mozilla.org/zh-TW/firefox/new/',\n\t\t},\n\t\ten_us: {\n\t\t\tie:\n\t\t\t\t'https://support.microsoft.com/en-us/help/17621/internet-explorer-downloads',\n\t\t\tchrome: 'https://www.google.com/intl/en/chrome/',\n\t\t\tsafari: 'https://www.apple.com/safari/',\n\t\t\tfirefox: 'https://www.mozilla.org/en-US/firefox/new/',\n\t\t},\n\t};\n\t/* 預設連結(繁中) */\n\tvar browserLink = linkData.zh_tw;\n\t/* 取瀏覽器與版本號 */\n\tvar userAgentMatch = function(ua) {\n\t\tif (!ua) {\n\t\t\tconsole.log('browser.min.js未帶入navigator.userAgent');\n\t\t\treturn 'browser.min.js未帶入navigator.userAgent';\n\t\t}\n\t\tua = ua.toLowerCase();\n\t\tvar match =\n\t\t\t/(opr)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t\t/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t\t/(edge)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t\t/(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t\t/(webkit)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t\t/(msie) ([\\w.]+)/.exec(ua) ||\n\t\t\t(ua.indexOf('trident') > 0 &&\n\t\t\t\t/(rv)(?:.*version|)[ \\:]([\\w.]+)/.exec(ua)) ||\n\t\t\t(ua.indexOf('compatible') < 0 &&\n\t\t\t\tua.indexOf('trident') < 0 &&\n\t\t\t\t/(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua)) ||\n\t\t\t[];\n\t\treturn {\n\t\t\tbrowser: match[1] || '',\n\t\t\tversion: match[2] || '0',\n\t\t};\n\t};\n\t/* 取得瀏覽器版本 */\n\tvar getVersion = function() {\n\t\treturn userAgentMatch(userAgent).version;\n\t};\n\t/* 取開起的瀏覽器 */\n\tvar getBrowser = function(browserValue) {\n\t\treturn userAgentMatch(userAgent).browser === browserValue;\n\t};\n\t/* 判斷目前開啟的瀏覽器 */\n\tvar detectBrowser = {\n\t\topera: getBrowser('opr') || getBrowser('opera'),\n\t\tie: getBrowser('msie') || getBrowser('rv'),\n\t\tedge: getBrowser('edge'),\n\t\tfirefox: getBrowser('mozilla'),\n\t\tsafari: getBrowser('webkit'),\n\t\tchrome: getBrowser('chrome'),\n\t\tmobileDevice: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n\t\t\tnavigator.userAgent\n\t\t),\n\t\tandroid: /Android/i.test(navigator.userAgent),\n\t\tios: /iPhone|iPad|iPod/i.test(navigator.userAgent),\n\t};\n\t/* createElement */\n\tvar createElementTag = function(tag) {\n\t\treturn document.createElement(tag);\n\t};\n\t/* createElement 加 css */\n\tvar createElementCss = function(elem, cssObj) {\n\t\tfor (var property in cssObj) {\n\t\t\telem.style[property] = cssObj[property];\n\t\t}\n\t};\n\t/* createElemen 加 setAttribute */\n\tvar setAttributeAll = function(elem, attr) {\n\t\tfor (var property in attr) {\n\t\t\telem.setAttribute(property, attr[property]);\n\t\t}\n\t};\n\t/* 顯示語言的css - 主要 */\n\tvar languageCssＭain = function(langTag) {\n\t\tcreateElementCss(langTag, {\n\t\t\tfontSize: '19px',\n\t\t\tcolor: '#c74708',\n\t\t\tfontWeight: 'bold',\n\t\t\tmarginTop: '5px',\n\t\t\tlineHeight: '1.5',\n\t\t\tmarginBottom: '5px',\n\t\t});\n\t};\n\t/* 顯示語言的css - 次要 */\n\tvar languageCssSecondary = function(langTag) {\n\t\tcreateElementCss(langTag, {\n\t\t\tmargin: '0',\n\t\t\tcolor: '#c74708',\n\t\t\tfontSize: '14px',\n\t\t});\n\t};\n\t/* outerFrame css */\n\tvar outerFrameCss = function(outerFrame, width) {\n\t\tvar paddingCss;\n\t\twidth === 736\n\t\t\t? (paddingCss = '40px 20px 10px')\n\t\t\t: (paddingCss = '40px 17px 10px');\n\t\tif (width === 1024) {\n\t\t\tcreateElementCss(outerFrame, {\n\t\t\t\tmaxWidth: '960px',\n\t\t\t\tmargin: '0 auto',\n\t\t\t\tpadding: '5px 20px 10px',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\toverflow: 'hidden',\n\t\t\t\tdisplay: 'block',\n\t\t\t});\n\t\t} else {\n\t\t\tcreateElementCss(outerFrame, {\n\t\t\t\tmaxWidth: '960px',\n\t\t\t\tmargin: '0 auto',\n\t\t\t\tpadding: paddingCss,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tdisplay: 'block',\n\t\t\t});\n\t\t}\n\t};\n\t/* browserSupport css */\n\tvar browserSupportCss = function(browserSupport, width, urlData) {\n\t\tvar positionCss;\n\t\tpositionCss === 1024 ? (positionCss = 'fixed') : (positionCss = 'absolute');\n\t\tcreateElementCss(browserSupport, {\n\t\t\tposition: positionCss,\n\t\t\tzIndex: '10000',\n\t\t\tleft: '0',\n\t\t\ttop: parseInt(urlData.fixedHeight.replace(/px/gi, '')) + 'px',\n\t\t});\n\t};\n\t/* linkTag css */\n\tvar linkTagCss = function(linkTag, width) {\n\t\tvar widthCss;\n\t\twidth >= 414\n\t\t\t? width === 480\n\t\t\t\t? (widthCss = '45%')\n\t\t\t\t: (widthCss = '44%')\n\t\t\t: (widthCss = '42%');\n\t\tif (width >= 736) {\n\t\t\tcreateElementCss(linkTag, {\n\t\t\t\tmargin: '10px',\n\t\t\t\ttextDecoration: 'none',\n\t\t\t\tstyleFloat: 'left',\n\t\t\t\tfloat: 'left',\n\t\t\t\tcolor: '#000',\n\t\t\t\tfontSize: '14px',\n\t\t\t});\n\t\t} else {\n\t\t\tcreateElementCss(linkTag, {\n\t\t\t\tmargin: '10px',\n\t\t\t\ttextDecoration: 'none',\n\t\t\t\tstyleFloat: 'left',\n\t\t\t\tfloat: 'left',\n\t\t\t\tcolor: '#000',\n\t\t\t\tfontSize: '13px',\n\t\t\t\tdisplay: 'block',\n\t\t\t\twidth: widthCss,\n\t\t\t});\n\t\t}\n\t};\n\t/* 過濾陣列重複值且需二進制數字 */\n\tvar filterArrayRepeat = function(array) {\n\t\tvar n = [];\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tif (\n\t\t\t\tn.indexOf(array[i]) === -1 &&\n\t\t\t\t(array[i] === 1 || array[i] === 2 || array[i] === 4)\n\t\t\t)\n\t\t\t\tn.push(array[i]);\n\t\t}\n\t\treturn n;\n\t};\n\t/* 繁體中文 */\n\tvar chineseTraditional = function(urlData) {\n\t\treturn (\n\t\t\t'親愛的使用者，為了您的資料安全及更好的使用體驗，從 ' +\n\t\t\turlData.date +\n\t\t\t' 起，我們將不再支援 ' +\n\t\t\turlData.browserVersion +\n\t\t\t' (含)以下的瀏覽器，建議您點選下面連結盡快升級安裝以下瀏覽器'\n\t\t);\n\t};\n\t/* 簡體中文 */\n\tvar chineseSimplified = function(urlData) {\n\t\treturn (\n\t\t\t'亲爱的使用者，为了您的资料安全及更好的使用体验，从 ' +\n\t\t\turlData.date +\n\t\t\t' 起，我们将不再支援 ' +\n\t\t\turlData.browserVersion +\n\t\t\t' (含)以下的浏览器，建议您点选下面连结尽快升级安装以下浏览器'\n\t\t);\n\t};\n\t/* 英文 */\n\tvar english = function(urlData) {\n\t\t// 未輸入 date_en 參數防呆機制會取 date 參數\n\t\tvar enDate = urlData.date_en || urlData.date;\n\t\treturn (\n\t\t\t'After ' +\n\t\t\tenDate +\n\t\t\t' we will stop support ' +\n\t\t\turlData.browserVersion +\n\t\t\t' and older versions. For your security and better browsing experience, please update your browser. Install one of the following browsers.'\n\t\t);\n\t};\n\t/* 顯示的語言 */\n\tvar languageBitand = function(urlData, outerFrame) {\n\t\tvar showLanguageArr = [];\n\t\tvar p_tw = chineseTraditional(urlData);\n\t\tvar p_cn = chineseSimplified(urlData);\n\t\tvar p_us = english(urlData);\n\t\tif (urlData.language instanceof Array) {\n\t\t\tvar newArr = filterArrayRepeat(urlData.language);\n\t\t\tif (newArr.length === 0) {\n\t\t\t\tshowLanguageArr.push(p_tw);\n\t\t\t} else {\n\t\t\t\tfor (var x = 0; x < newArr.length; x++) {\n\t\t\t\t\tif (x === 0 && newArr[0] === 4) browserLink = linkData.en_us;\n\t\t\t\t\tswitch (newArr[x]) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tshowLanguageArr.push(p_tw);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tshowLanguageArr.push(p_cn);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tshowLanguageArr.push(p_us);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 目前只有1、2、4沒有8，所以8是為了做使用者亂輸入數字所做的防呆機制，大於8會固定顯示繁中\n\t\t\t// 未輸入 language 參數的防呆機制顯示繁中\n\t\t\tif (\n\t\t\t\t(urlData.language & 1) === 1 ||\n\t\t\t\turlData.language >= 8 ||\n\t\t\t\t!urlData.language\n\t\t\t)\n\t\t\t\tshowLanguageArr.push(p_tw);\n\t\t\tif ((urlData.language & 2) === 2 && urlData.language < 8)\n\t\t\t\tshowLanguageArr.push(p_cn);\n\t\t\tif ((urlData.language & 4) === 4 && urlData.language < 8)\n\t\t\t\tshowLanguageArr.push(p_us);\n\t\t\tif (urlData.language === 4) browserLink = linkData.en_us;\n\t\t}\n\t\t// array.map 方法 IE8 以下不支援，所以用 for 迴圈方法\n\t\tfor (var i = 0; i < showLanguageArr.length; i++) {\n\t\t\tvar p = createElementTag('p');\n\t\t\tvar p_Text = document.createTextNode(showLanguageArr[i]);\n\t\t\ti === 0 ? languageCssＭain(p) : languageCssSecondary(p);\n\t\t\tp.appendChild(p_Text);\n\t\t\touterFrame.appendChild(p);\n\t\t}\n\t};\n\t/* 自訂關閉扭 function */\n\tvar closeFun = function(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tconsole.log('browser.min.js帶入closeFun格式錯誤，請帶入function格式');\n\t\t\treturn 'browser.min.js帶入closeFun格式錯誤，請帶入function格式';\n\t\t} else {\n\t\t\tcallback();\n\t\t\treturn '成功執行callback';\n\t\t}\n\t};\n\t/* 視窗寬度 RWD */\n\tvar windowWidth = function(urlData, outerFrame, browserSupport, linkTag) {\n\t\tvar bodyWidth = document.body.clientWidth;\n\t\tif (bodyWidth <= 360) {\n\t\t\tif (outerFrame) outerFrameCss(outerFrame, 360);\n\t\t\tif (browserSupport) browserSupportCss(browserSupport, 360, urlData);\n\t\t\tif (linkTag) linkTagCss(linkTag, 360);\n\t\t} else if (bodyWidth <= 414) {\n\t\t\tif (outerFrame) outerFrameCss(outerFrame, 414);\n\t\t\tif (browserSupport) browserSupportCss(browserSupport, 414, urlData);\n\t\t\tif (linkTag) linkTagCss(linkTag, 414);\n\t\t} else if (bodyWidth <= 480) {\n\t\t\tif (outerFrame) outerFrameCss(outerFrame, 480);\n\t\t\tif (browserSupport) browserSupportCss(browserSupport, 480, urlData);\n\t\t\tif (linkTag) linkTagCss(linkTag, 480);\n\t\t} else if (bodyWidth <= 736) {\n\t\t\tif (outerFrame) outerFrameCss(outerFrame, 736);\n\t\t\tif (browserSupport) browserSupportCss(browserSupport, 736, urlData);\n\t\t\tif (linkTag) linkTagCss(linkTag, 736);\n\t\t} else {\n\t\t\tif (outerFrame) outerFrameCss(outerFrame, 1024);\n\t\t\tif (browserSupport) browserSupportCss(browserSupport, 1024, urlData);\n\t\t\tif (linkTag) linkTagCss(linkTag, 1024);\n\t\t}\n\t};\n\t/* html 頁面 */\n\tvar htmlRender = function(urlData) {\n\t\tvar doc = document;\n\n\t\tvar outerFrame = createElementTag('div');\n\t\twindowWidth('', outerFrame);\n\n\t\t// 顯示語言\n\t\tlanguageBitand(urlData, outerFrame);\n\n\t\tvar allLinkDiv = createElementTag('div');\n\t\tcreateElementCss(allLinkDiv, {\n\t\t\tmargin: '20px auto 0',\n\t\t\tmaxWidth: '510px',\n\t\t\toverflow: 'hidden',\n\t\t});\n\n\t\tvar br1 = createElementTag('br');\n\t\tvar br2 = createElementTag('br');\n\t\tvar br3 = createElementTag('br');\n\t\tvar br4 = createElementTag('br');\n\n\t\t// ie 連結\n\t\tvar ieLink = createElementTag('a');\n\t\tsetAttributeAll(ieLink, {\n\t\t\thref: browserLink.ie,\n\t\t\ttarget: '_blank',\n\t\t\trel: 'noopener noreferrer',\n\t\t\ttitle: 'Internet Explorer',\n\t\t});\n\t\twindowWidth('', '', '', ieLink);\n\n\t\t// ie 圖\n\t\tvar ieImg = createElementTag('img');\n\t\tsetAttributeAll(ieImg, {\n\t\t\ttitle: 'Internet Explorer',\n\t\t\talt: 'Internet Explorer',\n\t\t\tsrc: 'https://static.104.com.tw/104main/common/ie11.png',\n\t\t\twidth: 100,\n\t\t\theight: 100,\n\t\t});\n\t\tcreateElementCss(ieImg, { border: 0 });\n\n\t\t// ie 圖加文合併\n\t\tvar ieLinkText = doc.createTextNode('Internet Explorer');\n\t\tieLink.appendChild(ieImg);\n\t\tieLink.appendChild(br1);\n\t\tieLink.appendChild(ieLinkText);\n\n\t\t// chrome 連結\n\t\tvar chromeLink = createElementTag('a');\n\t\tsetAttributeAll(chromeLink, {\n\t\t\thref: browserLink.chrome,\n\t\t\ttarget: '_blank',\n\t\t\trel: 'noopener noreferrer',\n\t\t\ttitle: 'Chrome',\n\t\t});\n\t\twindowWidth('', '', '', chromeLink);\n\n\t\t// chrome 圖\n\t\tvar chromeImg = createElementTag('img');\n\t\tsetAttributeAll(chromeImg, {\n\t\t\ttitle: 'Chrome',\n\t\t\talt: 'Chrome',\n\t\t\tsrc: 'https://static.104.com.tw/104main/common/chrome.png',\n\t\t\twidth: 101,\n\t\t\theight: 100,\n\t\t});\n\t\tcreateElementCss(chromeImg, { border: 0 });\n\n\t\t// chrome 圖加文合併\n\t\tvar chromeLinkText = doc.createTextNode('Chrome');\n\t\tchromeLink.appendChild(chromeImg);\n\t\tchromeLink.appendChild(br2);\n\t\tchromeLink.appendChild(chromeLinkText);\n\n\t\t// safari 連結\n\t\tvar safariLink = createElementTag('a');\n\t\tsetAttributeAll(safariLink, {\n\t\t\thref: browserLink.safari,\n\t\t\ttarget: '_blank',\n\t\t\trel: 'noopener noreferrer',\n\t\t\ttitle: 'Safari',\n\t\t});\n\t\twindowWidth('', '', '', safariLink);\n\n\t\t// safari 圖\n\t\tvar safariImg = createElementTag('img');\n\t\tsetAttributeAll(safariImg, {\n\t\t\ttitle: 'Safari',\n\t\t\talt: 'Safari',\n\t\t\tsrc: 'https://static.104.com.tw/104main/common/safari.png',\n\t\t\twidth: 100,\n\t\t\theight: 100,\n\t\t});\n\t\tcreateElementCss(safariImg, { border: 0 });\n\n\t\t// safari 圖加文合併\n\t\tvar safariLinkText = doc.createTextNode('Safari');\n\t\tsafariLink.appendChild(safariImg);\n\t\tsafariLink.appendChild(br3);\n\t\tsafariLink.appendChild(safariLinkText);\n\n\t\t// firefox 連結\n\t\tvar firefoxLink = createElementTag('a');\n\t\tsetAttributeAll(firefoxLink, {\n\t\t\thref: browserLink.firefox,\n\t\t\ttarget: '_blank',\n\t\t\trel: 'noopener noreferrer',\n\t\t\ttitle: 'Firefox',\n\t\t});\n\t\twindowWidth('', '', '', firefoxLink);\n\n\t\t// firefox 圖\n\t\tvar firefoxImg = createElementTag('img');\n\t\tsetAttributeAll(firefoxImg, {\n\t\t\ttitle: 'Firefox',\n\t\t\talt: 'Firefox',\n\t\t\tsrc: 'https://static.104.com.tw/104main/common/firefox.png',\n\t\t\twidth: 107,\n\t\t\theight: 100,\n\t\t});\n\t\tcreateElementCss(firefoxImg, { border: 0 });\n\n\t\t// firefox 圖加文合併\n\t\tvar firefoxLinkText = doc.createTextNode('Firefox');\n\t\tfirefoxLink.appendChild(firefoxImg);\n\t\tfirefoxLink.appendChild(br4);\n\t\tfirefoxLink.appendChild(firefoxLinkText);\n\n\t\t// 四張圖文合併\n\t\tif (!isMobileDevice) allLinkDiv.appendChild(ieLink);\n\t\tallLinkDiv.appendChild(chromeLink);\n\t\tif (!isMobileDevice || (isMobileDevice && isIOS))\n\t\t\tallLinkDiv.appendChild(safariLink);\n\t\tallLinkDiv.appendChild(firefoxLink);\n\n\t\t// 顯示四張連結圖\n\t\touterFrame.appendChild(allLinkDiv);\n\n\t\t// 最外層\n\t\tvar browserSupport = createElementTag('div');\n\t\tsetAttributeAll(browserSupport, {\n\t\t\tid: 'bsOverlay',\n\t\t});\n\t\tcreateElementCss(browserSupport, {\n\t\t\tbackground: '#eee',\n\t\t\tborderTop: '1px solid #ccc',\n\t\t\tborderBottom: '1px solid #ccc',\n\t\t\tfontFamily: 'Arial, sans-serif',\n\t\t\twidth: '100%',\n\t\t\tletterSpacing: '1px',\n\t\t\tlineHeight: '1.5',\n\t\t\ttextAlign: 'center',\n\t\t\tdisplay: 'block',\n\t\t});\n\n\t\tvar closeSpan = createElementTag('span');\n\t\tsetAttributeAll(closeSpan, {\n\t\t\ttitle: '關閉',\n\t\t});\n\t\tcreateElementCss(closeSpan, {\n\t\t\tstyleFloat: 'right',\n\t\t\tfloat: 'right',\n\t\t\tmarginRight: '20px',\n\t\t\tmarginTop: '10px',\n\t\t\tcursor: 'pointer',\n\t\t});\n\t\tcloseSpan.onclick = function() {\n\t\t\tif (urlData.closeFun) {\n\t\t\t\t// 如有自訂關閉function，則執行\n\t\t\t\tcloseFun(urlData.closeFun);\n\t\t\t}\n\t\t\tif (urlData.appendId && doc.getElementById(urlData.appendId)) {\n\t\t\t\tdoc.getElementById(urlData.appendId).removeChild(browserSupport);\n\t\t\t} else {\n\t\t\t\tdoc.body.removeChild(browserSupport);\n\t\t\t}\n\t\t\tvar browserCookie = getCookie('browserSupportTime');\n\t\t\tif (urlData.closeCookieTime && browserCookie === null)\n\t\t\t\tsetCookie(urlData.closeCookieTime);\n\t\t};\n\n\t\tvar closeImg = createElementTag('img');\n\t\tsetAttributeAll(closeImg, {\n\t\t\tsrc: 'https://static.104.com.tw/104main/common/browser-close.png',\n\t\t\ttitle: '關閉',\n\t\t});\n\t\tcreateElementCss(closeImg, {\n\t\t\tverticalAlign: 'middle',\n\t\t\twidth: '30px',\n\t\t});\n\n\t\tcloseSpan.appendChild(closeImg);\n\n\t\tif (urlData.fixedHeight) {\n\t\t\twindowWidth(urlData, '', browserSupport);\n\t\t}\n\n\t\tbrowserSupport.appendChild(closeSpan);\n\t\tbrowserSupport.appendChild(outerFrame);\n\n\t\tif (doc.body) {\n\t\t\tif (!appendChildBody) {\n\t\t\t\tappendChildBody = true;\n\t\t\t\tif (urlData.appendId && doc.getElementById(urlData.appendId)) {\n\t\t\t\t\tdoc.getElementById(urlData.appendId).appendChild(browserSupport);\n\t\t\t\t} else {\n\t\t\t\t\tvar first = doc.body.firstChild;\n\t\t\t\t\tdoc.body.insertBefore(browserSupport, first);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/* 取引入檔案後面的參數 */\n\tvar getSrcVars = function() {\n\t\tif (!document.getElementById('browser-support-alert')) {\n\t\t\tconsole.log('browser.min.js找不到id browser-support-alert');\n\t\t\treturn 'browser.min.js找不到id browser-support-alert';\n\t\t}\n\t\tvar vars = {},\n\t\t\thash,\n\t\t\tmore;\n\t\tvar scriptsId = document.getElementById('browser-support-alert');\n\t\tvar srcVal = scriptsId.getAttribute('src');\n\t\tvar hashes = srcVal.slice(srcVal.indexOf('?') + 1).split('&');\n\t\tfor (var i = 0; i < hashes.length; i++) {\n\t\t\thash = hashes[i].split('=');\n\t\t\tif (hash[0] === 'support' || hash[0] === 'lowest') {\n\t\t\t\tmore = hash[1].split(',');\n\t\t\t\tvars[hash[0]] = more;\n\t\t\t} else {\n\t\t\t\tvars[hash[0]] = hash[1];\n\t\t\t}\n\t\t}\n\t\treturn vars;\n\t};\n\t/* 判斷值 */\n\tvar checkUrlData = function(urldata) {\n\t\tif (\n\t\t\t!urldata ||\n\t\t\t!urldata.support ||\n\t\t\t!urldata.lowest ||\n\t\t\t!urldata.date ||\n\t\t\t!urldata.browserVersion\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\t/* 寫入 cookie */\n\tvar setCookie = function(time) {\n\t\texpire_days = time; // 指定天數或今晚\n\t\tvar d = new Date();\n\t\tif (typeof expire_days === 'string' && expire_days === 'tonight') {\n\t\t\td.setTime(d.getTime() + getExpireTime());\n\t\t} else if (typeof expire_days === 'number') {\n\t\t\td.setTime(d.getTime() + expire_days * 24 * 60 * 60 * 1000);\n\t\t} else {\n\t\t\tconsole.log('browser.min.js帶入closeCookieTime參數格式錯誤');\n\t\t\treturn 'browser.min.js帶入closeCookieTime參數格式錯誤';\n\t\t}\n\t\tvar expires = d.toGMTString();\n\t\tdocument.cookie =\n\t\t\t'browserSupportTime=' + d + ';expires=' + expires + ';path=/';\n\t};\n\t/* 讀取 cookie */\n\tvar getCookie = function(name) {\n\t\tvar arr = document.cookie.match(\n\t\t\tnew RegExp('(^| )' + name + '=([^;]*)(;|$)')\n\t\t);\n\t\tif (arr != null) return unescape(arr[2]);\n\t\treturn null;\n\t};\n\t/* 刪除 cookie */\n\tvar delCookie = function() {\n\t\tvar exp = new Date();\n\t\texp.setTime(exp.getTime() - 1);\n\t\tvar expires = exp.toGMTString();\n\t\tvar cval = getCookie('browserSupportTime');\n\t\tif (cval != null)\n\t\t\tdocument.cookie = 'browserSupportTime=;expires=' + expires;\n\t};\n\t/* 現在距離當天結束時間 */\n\tvar getExpireTime = function() {\n\t\tvar date = new Date();\n\t\tvar hour = 23 - date.getHours();\n\t\tvar min = 59 - date.getMinutes();\n\t\tvar sec = 59 - date.getSeconds();\n\t\tvar ms = (3600 * hour + 60 * min + sec) * 1000;\n\t\treturn ms;\n\t};\n\t/* 執行 */\n\tvar run = function(urlData) {\n\t\tvar nowVersion = getVersion();\n\t\tvar urlDataValue = checkUrlData(urlData);\n\t\tif (!urlDataValue) {\n\t\t\tconsole.log('browser.min.js參數輸入不完全');\n\t\t\treturn 'browser.min.js參數輸入不完全';\n\t\t} else if (urlData.support.length !== urlData.lowest.length) {\n\t\t\tconsole.log('browser.min.js參數輸入錯誤');\n\t\t\treturn 'browser.min.js參數輸入錯誤';\n\t\t} else {\n\t\t\tfor (var i = 0; i < urlData.support.length; i++) {\n\t\t\t\tif (!urlData.support[i] || !urlData.lowest[i]) continue;\n\t\t\t\tif (detectBrowser.mobileDevice) isMobileDevice = true;\n\t\t\t\tif (detectBrowser.android) isAndroid = true;\n\t\t\t\tif (detectBrowser.ios) isIOS = true;\n\t\t\t\tif (\n\t\t\t\t\tdetectBrowser[urlData.support[i]] &&\n\t\t\t\t\tparseInt(nowVersion) <= parseInt(urlData.lowest[i])\n\t\t\t\t) {\n\t\t\t\t\thtmlRender(urlData);\n\t\t\t\t\treturn '成功執行htmlRender';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/* 執行 */\n\tvar execution = function(browserObj) {\n\t\tvar browserCookie = getCookie('browserSupportTime');\n\t\tvar browserId = document.getElementById('browser-support-alert');\n\t\tvar browserIdVars = browserId ? getSrcVars() : '';\n\t\tbrowserData = browserObj || browserIdVars;\n\n\t\tif (browserObj) {\n\t\t\tif (\n\t\t\t\tbrowserObj.onlyOneShow &&\n\t\t\t\ttypeof browserObj.onlyOneShow === 'boolean'\n\t\t\t) {\n\t\t\t\t// 不管有沒有按關閉都只顯示一次\n\t\t\t\tif (!browserObj.closeCookieTime) {\n\t\t\t\t\t// 需傳 closeCookieTime 值防呆\n\t\t\t\t\tconsole.log('browser.min.js未傳入參數 closeCookieTime');\n\t\t\t\t\treturn 'browser.min.js未傳入參數 closeCookieTime';\n\t\t\t\t} else if (browserCookie === null) {\n\t\t\t\t\tsetCookie(browserObj.closeCookieTime);\n\t\t\t\t\treturn run(browserObj);\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\t!browserObj.closeCookieTime ||\n\t\t\t\t(browserObj.closeCookieTime && browserCookie === null)\n\t\t\t) {\n\t\t\t\t// 一直顯示或按關閉後不顯示\n\t\t\t\tif (!browserObj.closeCookieTime) delCookie();\n\t\t\t\treturn run(browserObj);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!browserId) {\n\t\t\t\t// 1.0 方式傳入\n\t\t\t\tconsole.log('browser.min.js找不到id browser-support-alert');\n\t\t\t\treturn 'browser.min.js找不到id browser-support-alert';\n\t\t\t} else {\n\t\t\t\treturn run(getSrcVars());\n\t\t\t}\n\t\t}\n\t};\n\t/* init */\n\tvar init = function(browserObj) {\n\t\twindow.onload = function() {\n\t\t\texecution(browserObj);\n\t\t\treturn '成功執行init';\n\t\t};\n\t};\n\t/* 查詢 browser support 狀態 */\n\tvar browserSupportStatusLog = function() {\n\t\tvar obj = {\n\t\t\tappendChildBody: appendChildBody,\n\t\t\tisMobileDevice: isMobileDevice,\n\t\t\tisAndroid: isAndroid,\n\t\t\tisIOS: isIOS,\n\t\t\tuserAgent: userAgent,\n\t\t\tbrowserData: browserData,\n\t\t\tbrowserLink: linkData,\n\t\t\tbrowserVersion: getVersion(),\n\t\t\tuserAgentBrowser: userAgentMatch(userAgent),\n\t\t};\n\t\tconsole.log('browserSupportStatusLog', obj);\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tuserAgentMatch: userAgentMatch,\n\t\tgetVersion: getVersion,\n\t\tgetBrowser: getBrowser,\n\t\tgetSrcVars: getSrcVars,\n\t\trun: run,\n\t\tcloseFun: closeFun,\n\t\tbrowserSupportStatusLog: browserSupportStatusLog,\n\t\tdelCookie: delCookie,\n\t};\n});\n```\n\n## API 提供\n\n| API                     | 需傳入參數                                                               | 說明                                                          | 範例                                                  |\n| ----------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------- | ----------------------------------------------------- |\n| userAgentMatch          | navigator.userAgent                                                      | 查詢瀏覽器與瀏覽器版本                                        | commonBrowser104.userAgentMatch(navigator.userAgent); |\n| getVersion              | 無                                                                       | 查詢瀏覽器版本                                                | commonBrowser104.getVersion();                        |\n| getBrowser              | string，格式為 `chrome,mozilla,webkit,edge,msie,rv,opr,opera` (參數備註) | 查詢目前開啟的瀏覽器是否符合                                  | commonBrowser104.getBrowser('chrome');                |\n| getSrcVars              | 無                                                                       | 查詢 browser.min.js src 的 url 帶入 string 參數               | commonBrowser104.getSrcVars();                        |\n| browserSupportStatusLog | 無                                                                       | 查詢 browser support 所有狀態 (僅限於 Console 查詢，無法抓取) | commonBrowser104.browserSupportStatusLog();           |\n| delCookie               | 無                                                                       | 刪除 browserSupportTime cookie (3.0 才有)                     | commonBrowser104.delCookie();                         |\n\n## browserSupportStatusLog 參數說明\n\n| 參數             | 說明                              | 備註                 |\n| ---------------- | --------------------------------- | -------------------- |\n| appendChildBody  | 是否出現提醒瀏覽器不支援視窗      |                      |\n| tls              | 是否 TLS 為 1.0，出現 TLS1.0 警告 | 已拔除               |\n| isMobileDevice   | 是否為平板與手機裝置              |                      |\n| isAndroid        | 是否為安卓系統                    |                      |\n| isIOS            | 是否為 IOS 系統                   |                      |\n| userAgent        | userAgent 狀態                    |                      |\n| browserData      | 帶入 init 的參數                  |                      |\n| browserLink      | banner 連結資訊                   | Release 3.0 版本才有 |\n| browserVersion   | 瀏覽器版本                        |                      |\n| userAgentBrowser | 開啟的瀏覽器與瀏覽器版本          |                      |\n\n### 參數備註:\n\n- 查詢 opera： opr、opera\n- 查詢 ie6~ie10： msie\n- 查詢 ie11： rv\n- 查詢 edge： edge\n- 查詢 firefox： mozilla\n- 查詢 safari： webkit\n- 查詢 chrome： chrome\n"},241:function(module,exports){module.exports='# JavaScript：使用 Array.map、Object.values 和 Object.keys 處理一連串的資料\n\n使用 `Array.map`、`Object.values` 和 `Object.keys` 處理「物件中有物件」和「陣列中有物件」的情況。\n\n### 物件中有物件\n\n一個物件包含了一串物件。\n\n範例如下，這裡有一串 ID 與名字。\n\n```js\n{\n  "1234567890": {\n    id: "1234567890",\n    name: "Nina Ricci",\n  },\n  "2345678901": {\n    id: "2345678901",\n    name: "Hello Kitty",\n  },\n  "3456789012": {\n    id: "3456789012",\n    name: "Pusheen the cat",\n  },\n}\n```\n\n### 取得 key 的陣列\n\n在這一連串資料下取得 key 的陣列。\n\n- 使用 Object.keys 取得物件的鍵值，組成陣列後回傳。\n\n```js\nconst idList = Object.keys(list);\n\nidList; // ["1234567890", "2345678901", "3456789012"]\n```\n\n### 取得 value 的陣列\n\n在這一連串資料下取得 value 之特性屬性的陣列。\n\n- 使用 Object.values 取得物件的 value，組成陣列。\n- 承上，使用 Array.map 將陣列中的特定屬性值取出，組成新陣列後回傳。\n\n```js\nconst nameList = Object.values(list).map(item => item.name);\n\nnameList; // ["Nina Ricci", "Hello Kitty", "Pusheen the cat"]\n```\n\n## 陣列中有物件 1\n\n一個陣列包含了一串物件。\n\n範例如下，這裡有一串 ID 與名字。\n\n```js\nconst list = [\n\t{\n\t\tid: \'1234567890\',\n\t\tname: \'Nina Ricci\',\n\t},\n\t{\n\t\tid: \'2345678901\',\n\t\tname: \'Hello Kitty\',\n\t},\n\t{\n\t\tid: \'3456789012\',\n\t\tname: \'Pusheen the cat\',\n\t},\n];\n```\n\n### 取得特性屬性值的陣列\n\n取得 id。\n\n- 使用 Array.map 迭代陣列，並將 callback 中的執行結果組成新陣列後回傳。\n- 承上，在迭代陣列過程中，使用 Object.values 取得第一個屬性值，也就是 id 的值。\n\n```js\nconst idList = list.map(item => Object.values(item)[0]); // 0 表示第一個屬性值\n\nidList; // ["1234567890", "2345678901", "3456789012"]\n```\n\n取得 name。\n\n```js\nconst nameList = list.map(item => Object.values(item)[1]); // 1 表示第二個屬性值\n\nnameList; // ["Nina Ricci", "Hello Kitty", "Pusheen the cat"]\n```\n\n## 陣列中有物件 2\n\n一個陣列包含了一串物件。\n\n範例如下，這裡有一串 ID 與名字，key 是 ID，value 是名字。\n\n```js\n[\n\t{\n\t\t\'1234567890\': \'Nina Ricci\',\n\t},\n\t{\n\t\t\'2345678901\': \'Hello Kitty\',\n\t},\n\t{\n\t\t\'3456789012\': \'Pusheen the cat\',\n\t},\n];\n```\n\n### 取得 key 的陣列\n\n- 使用 Array.map 迭代陣列，並將 callback 中的執行結果組成新陣列後回傳為最終結果 idList。\n- 使用 Object.keys 取得每個物件的鍵值，由於 Object.keys 會幫每個物件在取鍵值時建立一個陣列，因此要用 [0] 再取得內容，即字串後回傳結果。\n\n```js\nconst idList = list.map(item => Object.keys(item)[0]);\n\nidList; // ["1234567890", "2345678901", "3456789012"]\n```\n\n### 取得 value 的陣列\n\n- 使用 Array.map 迭代陣列，並將 callback 中的執行結果組成新陣列後回傳為最終結果 nameList。\n- 使用 Object.values 取得每個物件的 value，由於 Object.value 會幫每個物件在取值時建立一個陣列，因此要用 [0] 再取得內容，即字串後回傳結果。\n\n```js\nconst nameList = list.map(item => Object.values(item)[0]);\n\nnameList; // ["Nina Ricci", "Hello Kitty", "Pusheen the cat"]\n```\n\n## 出處\n\n[JavaScript：使用 Array.map、Object.values 和 Object.keys 處理一連串的資料](https://cythilya.github.io/2018/06/17/array-and-object-handling/)\n'},242:function(module,exports){module.exports="# Currying in JavaScript（柯里化）\n\nCurrying（柯里化），又稱為 parital application 或 partial evaluation，是個「將一個接受 n 個參數的 function，轉變成 n 個只接受一個參數的 function」的過程。\n\n原理是將傳入 function 的參數，利用 closure（閉包）特性，將它們存放在另一個 function 中並當做回傳值，而這些 function 會形成一個鏈（chain），待最後參數傳入，完成運算。\n\n這樣做的好處是\n\n- 簡化參數的處理，基本上是一次處理一個參數，藉以提高程式的彈性和可讀性\n- 將程式碼依功能拆解成更細的片段，有助於重複利用\n\n這對於整理冗長程式碼、需要詳客製化的 function 和非同步呼叫的處理等有很大的幫助。\n\n## 說明\n\n假設有個 function，傳入被乘數和乘數之後可得到兩數相乘的結果\n\n```js\nfunction multiply(x, y) {\n\treturn x * y;\n}\n\nmultiply(3, 5); // 15\n```\n\n柯里化後就是這樣了…\n\n```js\nfunction curriedMultiply(x) {\n\treturn function(y) {\n\t\treturn x * y;\n\t};\n}\n```\n\n假設固定被乘數為 3，接著會分別帶入乘數為 5 和 10 來取得運算結果。意即，3 _ 5 = 15，3 _ 10 = 10\n\n```js\nvar multipleOfThreeAndNumberY = curriedMultiply(3);\n\nmultipleOfThreeAndNumberY(5); // 15\nmultipleOfThreeAndNumberY(10); // 30\n```\n\n## 備註\n\n- curriedMultiply 並沒有計算結果，而是回傳一個 function 作為未來計算結果之用。 也就是說，待之後呼叫 multipleOfThreeAndNumberY 和 multipleOfFiveAndNumberY 傳入參數後才回傳計算結果。\n- `multiply(x, y)` 等於 `curriedMultiply(x)(y)`\n\n```js\nmultiply(3, 5); //15\ncurriedMultiply(3)(5); //15\n```\n\n以上這個簡單範例就呼應一開始所提到的柯里化的優點 - 將程式碼拆解成更細的片段，有助於重複利用。\n\n再來看看另一個例子會覺得柯里化更好用 - 在非同步存取資料上的應用。\n\n## Currying the Callback\n\n在非同步資料存取上，一般來說，我們常將「讀取資料 」和「處理資料」兩件事寫在一起，導致程式碼的冗長與雜亂。例如像這個樣子…\n\n```js\nfunction fetchData(path, handler) {\n\tvar xmlHttp = new XMLHttpRequest();\n\tvar result = {};\n\n\txmlHttp.open('GET', path, false);\n\txmlHttp.send(null);\n\tresult = JSON.parse(xmlHttp.responseText);\n\thandler(result.data);\n}\n\nfunction showResult(result) {\n\tconsole.log('The result is: ' + result);\n}\n\nvar path = 'http://www.json-generator.com/api/json/get/bPQMSaHjsi?indent=2';\nfetchData(path, showResult); // The result is: Hello, World!\n```\n\n若將負責處理資料的 callback 這個參數提出來（在這裡是 handler），就可改善程式碼如下。\n\n```js\nfunction curriedFetchData(path) {\n\tvar xmlHttp = new XMLHttpRequest();\n\tvar result = {};\n\n\txmlHttp.open('GET', path, false);\n\txmlHttp.send(null);\n\tresult = JSON.parse(xmlHttp.responseText);\n\n\treturn function(_callback) {\n\t\t_callback(result.data);\n\t};\n}\n\nfunction showResult(result) {\n\tconsole.log('The result is: ' + result);\n}\n\nvar path = 'http://www.json-generator.com/api/json/get/bPQMSaHjsi?indent=2';\nvar getData = curriedFetchData(path);\ngetData(showResult); // The result is: Hello, World!\n```\n\n這看起來好像沒什麼，那麼再看看如果是這樣的話…\n\n如果在循序讀取下，要取得兩筆資料-先取得第一筆，再取得第二筆，並一同做處理，剛剛尚未柯里化的的程式碼就會變得非常龐大複雜…\n\n但柯里化後的程式處理起來就相對容易多了…這因為我們將「讀取資料 」和「處理資料」兩個動作拆開的緣故…就算是用 promise 而非 callback hell 也能更順手…\n\n```js\nvar path1 =\n\t'http://www.json-generator.com/api/json/get/bPQMSaHjsi?indent=2&ver=1';\nvar path2 =\n\t'http://www.json-generator.com/api/json/get/bPQMSaHjsi?indent=2&ver=2';\n\nvar getData1 = curriedFetchData(path1);\nvar getData2 = curriedFetchData(path2);\n\ngetData1(function(result1) {\n\tgetData2(function(result2) {\n\t\tconsole.log(result1 + ' ' + result2); //Hello, World! Hello, World!\n\t});\n});\n```\n\n## 出處\n\n[Currying in JavaScript（柯里化）](https://cythilya.github.io/2017/02/27/currying-in-javascript/)\n"},243:function(module,exports){module.exports="# Javascript 的 require 模塊(ES6 以前)\n\n### 為什麼有模塊概念\n\n理想情況下，開發者只需要實現核心的業務邏輯，其他都可以加載別人已經寫好的模塊。\n\n但是，Javascript 不是一種模塊化編程語言，在 es6 以前，它是不支持”類”（class），所以也就沒有”模塊”（module）了。\n\n## require\n\nJavascript 社區做了很多努力，在現有的運行環境中，實現”模塊”的效果。\n\n### 原始寫法\n\n模塊就是實現特定功能的一組方法。\n\n只要把不同的函數（以及記錄狀態的變量）簡單地放在一起，就算是一個模塊。\n\n```js\nfunction m1() {\n\t//...\n}\nfunction m2() {\n\t//...\n}\n```\n\n上面的函數 m1()和 m2()，組成一個模塊。使用的時候，直接調用就行了。\n\n這種做法的缺點很明顯：”污染”了全局變量，無法保證不與其他模塊發生變量名衝突，而且模塊成員之間看不出直接關係。\n\n### 對象寫法\n\n為了解決上面的缺點，可以把模塊寫成一個對象，所有的模塊成員都放到這個對象裡面\n\n```js\nvar module1 = new Object({\n\t_count: 0,\n\tm1: function() {\n\t\t//...\n\t},\n\tm2: function() {\n\t\t//...\n\t},\n});\n```\n\n上面的函數 m1()和 m2(），都封裝在 module1 對象裡。使用的時候，就是調用這個對象的屬性\n\n```js\nmodule1.m1();\n```\n\n這樣的寫法會暴露所有模塊成員，內部狀態可以被外部改寫。比如，外部代碼可以直接改變內部計數器的值\n\n```js\nmodule._count = 1;\n```\n\n### 立即執行函數寫法\n\n使用”立即執行函數”（Immediately-Invoked Function Expression，IIFE），可以達到不暴露私有成員的目的\n\n```js\nvar module = (function() {\n\tvar _count = 0;\n\tvar m1 = function() {\n\t\talert(_count);\n\t};\n\tvar m2 = function() {\n\t\talert(_count + 1);\n\t};\n\n\treturn {\n\t\tm1: m1,\n\t\tm2: m2,\n\t};\n})();\n```\n\n使用上面的寫法，外部代碼無法讀取內部的\\_count 變量。\n\n```js\nconsole.info(module._count); //undefined\n```\n\nmodule 就是 Javascript 模塊的基本寫法。\n\n## 出處\n\n[徹底搞清楚 javascript 中的 require、import 和 export](https://www.cnblogs.com/libin-1/p/7127481.html)\n"},244:function(module,exports){module.exports="# ES6 Modules(export 和 import)\n\nES6 標準發布後，module 成為標準，標準使用是以 export 指令導出接口，以 import 引入模塊，但是在我們一貫的 node 模塊中，我們依然採用的是 CommonJS 規範，使用 require 引入模塊，使用 module.exports 導出接口。\n\n## export 導出模塊\n\nexport 語法聲明用於導出函數、對象、指定文件（或模塊）的原始值\n\n> 注意：在 node 中使用的是 exports,不要混淆了\n\nexport 有兩種模塊導出方式：`命名式導出（名稱導出）`和`默認導出（定義式導出）`，命名式導出每個模塊可以多個，而默認導出每個模塊僅一個。\n\n```js\nexport { name1, name2, …, nameN };\nexport { variable1 as name1, variable2 as name2, …, nameN };\nexport let name1, name2, …, nameN; // also var\nexport let name1 = …, name2 = …, …, nameN; // also var, const\n\nexport default expression;\nexport default function (…) { … } // also class, function*\nexport default function name1(…) { … } // also class, function*\nexport { name1 as default, … };\n\nexport * from …;\nexport { name1, name2, …, nameN } from …;\nexport { import1 as name1, import2 as name2, …, nameN } from …;\n```\n\n- name1… nameN－導出的“標識符”。導出後，可以通過這個“標識符”在另一個模塊中使用 import 引用\n- default－設置模塊的默認導出。設置後 import 不通過“標識符”而直接引用默認導入\n- －繼承模塊並導出繼承模塊所有的方法和屬性\n- as－重命名導出“標識符”\n- from－從已經存在的模塊、腳本文件…導出\n\n### 命名式導出\n\n模塊可以通過 export 前綴關鍵詞聲明導出對象，導出對象可以是多個。這些導出對像用名稱進行區分，稱之為命名式導出。\n\n```js\nexport { myFunction }; // 導出一個已定義的函數\nexport const foo = Math.sqrt(2); // 導出一個常量\n```\n\n我們可以使用\\*和 from 關鍵字來實現的模塊的繼承：\n\n```js\nexport * from 'article';\n```\n\n模塊導出時，可以指定模塊的導出成員。導出成員可以認為是類中的公有對象，而非導出成員可以認為是類中的私有對象：\n\n```js\nvar name = 'IT筆錄';\nvar domain = 'http://itbilu.com';\nexport { name, domain }; // 相當於導出 {name:name, domain:domain}\n```\n\n模塊導出時，我們可以使用 as 關鍵字對導出成員進行重命名：\n\n```js\nvar name = 'IT筆錄';\nvar domain = 'http://itbilu.com';\nexport { name as siteName, domain };\n```\n\n注意，下面的語法有嚴重錯誤的情況：\n\n```js\n// 錯誤演示\nexport 1; // 絕對不可以\n \nvar a = 100;\nexport a;\n```\n\nexport 在導出接口的時候，必須與模塊內部的變量具有一一對應的關係。直接導出 1 沒有任何意義，也不可能在 import 的時候有一個變量與之對應\n\nexport a 雖然看上去成立，但是 a 的值是一個數字，根本無法完成解構，因此必須寫成 export {a}的形式。`即使a被賦值為一個function，也是不允許的`。而且，大部分風格都建議，模塊中最好在末尾用一個 export 導出所有的接口，例如：\n\n```js\nexport { fun as default, a, b, c };\n```\n\n### 默認導出\n\n默認導出也被稱做定義式導出。命名式導出可以導出多個值，但在在 import 引用時，也要使用相同的名稱來引用相應的值。而默認導出每個導出只有一個單一值，這個輸出可以是一個函數、類或其它類型的值，這樣在模塊 import 導入時也會很容易引用。\n\n```js\nexport default function() {}; // 可以導出一個函數\nexport default class(){}; // 也可以出一個類\n```\n\n### 命名式導出與默認導出\n\n默認導出可以理解為另一種形式的命名導出，默認導出可以認為是使用了 default 名稱的命名導出。\n\n下面兩種導出方式是等價的：\n\n```js\nconst D = 123;\n\nexport default D;\nexport { D as default };\n```\n\n### export 使用示例\n\n使用名稱導出一個模塊時：\n\n```js\n// \"my-module.js\" 模塊\nexport function cube(x) {\n\treturn x * x * x;\n}\nconst foo = Math.PI + Math.SQRT2;\nexport { foo };\n```\n\n在另一個模塊（腳本文件）中，我們可以像下面這樣引用：\n\n```js\nimport { cube, foo } from 'my-module';\nconsole.log(cube(3)); // 27\nconsole.log(foo); // 4.555806215962888\n```\n\n使用默認導出一個模塊時：\n\n```js\n// \"my-module.js\"模塊\nexport default function(x) {\n\treturn x * x * x;\n}\n```\n\n在另一個模塊（腳本文件）中，我們可以像下面這樣引用，相對名稱導出來說使用更為簡單：\n\n```js\n// 引用 \"my-module.js\"模塊\nimport cube from 'my-module';\nconsole.log(cube(3)); // 27\n```\n\n## import 引入模塊\n\nimport 語法聲明用於從已導出的模塊、腳本中導入函數、對象、指定文件（或模塊）的原始值。\n\nimport 模塊導入與 export 模塊導出功能相對應，也存在兩種模塊導入方式：命名式導入（名稱導入）和默認導入（定義式導入）。\n\n> import 的語法跟 require 不同，而且 import 必須放在文件的最開始，且前面不允許有其他邏輯代碼，這和其他所有編程語言風格一致。\n\n```js\nimport defaultMember from \"module-name\";\nimport * as name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport defaultMember, { member [ , [...] ] } from \"module-name\";\nimport defaultMember, * as name from \"module-name\";\nimport \"module-name\";\n```\n\n- name－從將要導入模塊中收到的導出值的名稱\n- member, memberN－從導出模塊，導入指定名稱的多個成員\n- defaultMember－從導出模塊，導入默認導出成員\n- alias, aliasN－別名，對指定導入成員進行的重命名\n- module-name－要導入的模塊。是一個文件名\n- as－重命名導入成員名稱（“標識符”）\n- from－從已經存在的模塊、腳本文件等導入\n\n### 命名式導入\n\n我們可以通過指定名稱，就是將這些成員插入到當作用域中。導出時，可以導入單個成員或多個成員：\n\n注意，花括號裡面的變量與 export 後面的變量一一對應\n\n```js\nimport { myMember } from 'my-module';\nimport { foo, bar } from 'my-module';\n```\n\n通過`*`符號，我們可以導入模塊中的全部屬性和方法。當導入模塊全部導出內容時，就是將導出模塊（’my-module.js’）所有的導出綁定內容，插入到當前模塊（’myModule’）的作用域中：\n\n```js\nimport * as myModule from 'my-module';\n```\n\n導入模塊對象時，也可以使用 as 對導入成員重命名，以方便在當前模塊內使用：\n\n```js\nimport { reallyReallyLongModuleMemberName as shortName } from 'my-module';\n```\n\n導入多個成員時，同樣可以使用別名：\n\n```js\nimport {\n\treallyReallyLongModuleMemberName as shortName,\n\tanotherLongModuleName as short,\n} from 'my-module';\n```\n\n導入一個模塊，但不進行任何綁定：\n\n```js\nimport 'my-module';\n```\n\n### 默認導入\n\n在模塊導出時，可能會存在默認導出。同樣的，在導入時可以使用 import 指令導出這些默認值。\n\n直接導入默認值：\n\n```js\nimport myDefault from 'my-module';\n```\n\n也可以在命名空間導入和名稱導入中，同時使用默認導入：\n\n```js\nimport myDefault, * as myModule from 'my-module'; // myModule 做為命名空間使用\n// 或\nimport myDefault, { foo, bar } from 'my-module'; // 指定成員導入\n```\n\n### import 使用示例\n\n```js\n// --file.js--\nfunction getJSON(url, callback) {\n\tlet xhr = new XMLHttpRequest();\n\txhr.onload = function() {\n\t\tcallback(this.responseText);\n\t};\n\txhr.open('GET', url, true);\n\txhr.send();\n}\n\nexport function getUsefulContents(url, callback) {\n\tgetJSON(url, data => callback(JSON.parse(data)));\n}\n\n// --main.js--\nimport { getUsefulContents } from 'file';\n\ngetUsefulContents('http://itbilu.com', data => {\n\tdoSomethingUseful(data);\n});\n```\n\n## default 關鍵字\n\n```js\n// d.js\nexport default function() {}\n \n// 等效於：\nfunction a() {};\nexport {a as default};\n```\n\n在 import 的時候，可以這樣用：\n\n```js\nimport a from './d';\n// 等效於，或者說就是下面這種寫法的簡寫，是同一個意思\nimport { default as a } from './d';\n```\n\n這個語法糖的好處就是 import 的時候，可以省去花括號{}。\n\n簡單的說，如果 import 的時候，你發現某個變量沒有花括號括起來（沒有\\*號），那麼你在腦海中應該把它還原成有花括號的 as 語法。\n\n所以，下面這種寫法你也應該理解了吧：\n\n```js\nimport $, { each, map } from 'jquery';\n```\n\nimport 後面第一個$是{defalut as $}的替代寫法。\n\n## as 關鍵字\n\n```js\n// a.js\nvar a = function() {};\nexport { a as fun };\n\n// b.js\nimport { fun as a } from './a';\na();\n```\n\n上面這段代碼，export 的時候，對外提供的接口是 fun，它是 a.js 內部 a 這個函數的別名，但是在模塊外面，認不到 a，只能認到 fun。\n\nimport 中的 as 就很簡單，就是你在使用模塊裡面的方法的時候，給這個方法取一個別名，好在當前的文件裡面使用。之所以是這樣，是因為有的時候不同的兩個模塊可能通過相同的接口，比如有一個 c.js 也通過了 fun 這個接口：\n\n```js\n// c.js\nexport function fun() {}\n```\n\n如果在 b.js 中同時使用 a 和 c 這兩個模塊，就必須想辦法解決接口重名的問題，as 就解決了。\n\n## 出處\n\n[徹底搞清楚 javascript 中的 require、import 和 export](https://www.cnblogs.com/libin-1/p/7127481.html)\n"},245:function(module,exports){module.exports="# JavaScript 閉包（Closure）\n\n閉包解釋非常多，這裡先透過幾個方式說明一下閉包是什麼：\n\n- 運作原理：就是呼叫 Function 內的 Function\n- 這樣有什麼用：內層 Function 作用域變數只會存在內層\n- 然後勒：內層 Function 變數可以不被釋放，重複使用\n- 那幹麻學：理解作用域\n\n## 範例\n\n這個範例用花錢的概念來說明，我們每次都會傳入不同的金額，並且把剩餘的金額存在內部作用域。\n\n### 直接呼叫內層函示\n\n閉包就是存取內部的函式，所以直接使用 `buyItem()(100)` 兩個括號就是呼叫內部的函式。\n\n```js\nfunction buyItem() {\n\tvar myMoney = 1000;\n\treturn function(price) {\n\t\t// 這裡就是一個閉包，不過目前只會使用一次\n\t\tmyMoney = myMoney - price;\n\t\treturn myMoney;\n\t};\n}\nlet balance = buyItem()(100); // 存取內部函式的變數\nconsole.log(balance);\n```\n\n幹麻要這樣？\n\n- 外層 `myMoney` 此時的變數可以被內層的 function 存取\n- 內層的 `myMoney` 後來是私有的變數，外層無法讀取\n- 運行 `buyItem()(100)` 時，等同於呼叫一次外層，在呼叫一次內層，最終將內層的值回傳給 `balance` 的變數。\n\n這樣還沒完，目前只是一次性運作，來調整一下程式碼。\n\n> 這個的行為是直接去操作內部的錢包，就像是直接花費一樣，接下來我們會用扣款的概念，不斷的使用錢包內部的金額。\n\n### 將外層函式賦予到另一個變數上\n\n接下來不要直接呼叫，而是將函式賦予在另一個變數上，這樣的方式就會將 `myMoney` 這個變數存在內層的作用域，然後每次執行後不斷更新此值。\n\n```js\nfunction buyItem() {\n\tvar myMoney = 1000;\n\treturn function(price) {\n\t\t// 這個閉包目前會被重複呼叫\n\t\tmyMoney = myMoney - price;\n\t\t// myMoney 第一次由外部傳入，接下來在這個 function 內不斷更新\n\t\treturn myMoney;\n\t};\n}\nvar balance = buyItem(); // 存取內部函式的變數\nbalance(100); // 900\nbalance(100); // 800\nbalance(100); // 700\n// 每次執行都是跑內層的函式，因此也只更新內層的函式變數\n```\n\n然後勒？\n\n- `buyItem()` 直接執行會出現 `function ...`，所以沒辦法直接使用。\n- balance 現在指向 `buyItem()` 使其可以不斷的反覆呼叫，且內層記憶體不會被釋放。\n- balance() 每次執行時，只會執行內層的函式，在內層記憶體沒有被釋放的情況下，`myMoney` 變數會不斷的被更新。\n\n### 多個具私有變數的函式\n\n> 小明拜訪完漂亮阿姨以後，接著遇到 Rich 的朋友 “杰倫哥”，杰倫哥與小明去四處揮霍，小明也想趁此機會計算一下杰倫哥的花費狀況。透過閉包的方法，小明可以用同一個公式算出兩個人剩餘多少錢。\n\n```js\n// 使用閉包產生兩個作用域\n// 這裡的 money 代表身上帶的錢\nfunction buyItem(money) {\n\tvar myMoney = money;\n\tconsole.log(this); // 趁機偷問，此地的 this 指向誰？\n\treturn function(price) {\n\t\tconsole.log(this); // 趁機偷問，此地的 this 指向誰？\n\t\t// myMoney 第一次由外部傳入，接下來在這個 function 內不斷更新\n\t\tmyMoney = myMoney - price;\n\t\treturn myMoney;\n\t};\n}\nlet MingCost = buyItem(1000); // 存取內部函式的變數，這個是小明錢包內的錢\nlet JayCost = buyItem(10000); // 杰哥拿出的小錢\n// 小明的內層作用域變數，也就是小明剩的錢\nconsole.log(MingCost(100)); // 900\nconsole.log(MingCost(100)); // 800\nconsole.log(MingCost(100)); // 700\n// 杰哥的內層作用域變數，這裡是杰哥剩的錢\nconsole.log(JayCost(1000)); // 9000\nconsole.log(JayCost(1000)); // 8000\nconsole.log(JayCost(1000)); // 7000\n```\n\n以上片段建議分段執行，更能理解其中的過程：\n\n- `let MingCost = buyItem(1000);` 此時 `buyItem` 已經執行過一次，並且 `myMoney` 的變數已經依傳入的變數做調整。\n- 每次執行 `MingCost(100)` 時，調整的則是傳至內層的 `myMoney` 變數。\n\n要了解閉包，就要多了解函式的作用域，掌握 `變數` 的作用域及函式的運作原理，此篇章難度就不會很高。\n\n## 出處\n\n[鐵人賽：另一種方式介紹 JavaScript 閉包](https://wcc723.github.io/javascript/2017/12/13/javascript-closure/)\n"},246:function(module,exports){module.exports="# Functional Programming 基本觀念\n\n## 什麼是 Functional Programming ?\n\nFunctional Programming 是一種編程範式(programming paradigm)，就像 Object-oriented Programming(OOP)一樣，就是一種寫程式的方法論，這些方法論告訴我們如何思考及解決問題。\n\n簡單說 Functional Programming 核心思想就是做運算處理，並用 function 來思考問題，例如像以下的算數運算式：\n\n```js\n5 + 6 - 1 * 3;\n```\n\n我們可以寫成\n\n```js\nconst add = (a, b) => a + b;\nconst mul = (a, b) => a * b;\nconst sub = (a, b) => a - b;\n\nsub(add(5, 6), mul(1, 3));\n```\n\n我們把每個運算包成一個個不同的 function，並用這些 function 組合出我們要的結果，這就是最簡單的 Functional Programming。\n\n## Functional Programming 基本要件\n\n跟 OOP 一樣不是所有的語言都支持 FP，要能夠支持 FP 的語言至少需要符合函式為一等公民的特性。\n\n### 函式為一等公民 (First Class)\n\n一等公民就是指跟其他資料型別具有同等地位，也就是說函式能夠被賦值給變數，函式也能夠被當作參數傳入另一個函式，也可當作一個函式的回傳值\n\n#### 函式能夠被賦值給變數\n\n```js\nvar hello = function() {};\n```\n\n#### 函式能被當作參數傳入\n\n```js\nfetch('www.google.com').then(function(response) {}); // 匿名 function 被傳入 then()\n```\n\n#### 函式能被當作回傳值\n\n```js\nvar a = function(a) {\n\treturn function(b) {\n\t\treturn a + b;\n\t};\n\t// 可以回傳一個 function\n};\n```\n\n## Functional Programming 重要特性\n\n### Expression, no Statement\n\nFunctional Programming 都是 表達式 (Expression) 不會是 陳述式(Statement)。\n基本區分表達式與陳述式：\n\n`表達式` 是一個運算過程，一定會有返回值，例如執行一個 function\n\n```js\nadd(1, 2);\n```\n\n- 陳述式 則是表現某個行為，例如一個 賦值給一個變數\n\n```js\na = 1;\n```\n\n> 有時候表達式也可能同時是合法的陳述式，這裡只講基本的判斷方法。如果想更深入了解其中的差異，可以看這篇文章 [Expressions versus statements in JavaScript](http://2ality.com/2012/09/expressions-vs-statements.html)\n\n由於 Functional Programming 最早就是為了做運算處理不管 I/O，而 Statement 通常都屬於對系統 I/O 的操作，所以 FP 很自然的不會是 Statement。\n\n> 當然在實務中不可能完全沒有 I/O 的操作，Functional Programming 只要求對 I/O 操作限制到最小，不要有不必要的 I/O 行為，盡量保持運算過程的單純。\n\n### Pure Function\n\n#### Pure function 是指 一個 function 給予相同的參數，永遠會回傳相同的返回值，並且沒有任何顯著的副作用(Side Effect)\n\n舉個例子：\n\n```js\nvar arr = [1, 2, 3, 4, 5];\n\narr.slice(0, 3); // [1, 2, 3]\n\narr.slice(0, 3); // [1, 2, 3]\n\narr.slice(0, 3); // [1, 2, 3]\n```\n\n這裡可以看到 slice 不管執行幾次，返回值都是相同的，並且除了返回一個值(value)之外並沒有做任何事，所以 `slice` 就是一個 pure function。\n\n```js\nvar arr = [1, 2, 3, 4, 5];\n\narr.splice(0, 3); // [1, 2, 3]\n\narr.splice(0, 3); // [4, 5]\n\narr.slice(0, 3); // []\n```\n\n這裡我們換成用 `splice`，因為 `splice` 每執行一次就會影響 `arr` 的值，導致每次結果都不同，這就很明顯不是一個 pure function。\n\n### Side Effect\n\nSide Effect 是指一個 function 做了跟本身運算返回值沒有關係的事，比如說修改某個全域變數，或是修改傳入參數的值，甚至是執行 `console.log` 都算是 Side Effect。\n\nFunctional Programming 強調沒有 Side Effect，也就是 function 要保持純粹，只做運算並返回一個值，沒有其他額外的行為。\n\n這裡列舉幾個前端常見的 Side Effect，但不是全部\n\n- 發送 http request\n- 在畫面印出值或是 log\n- 獲得使用者 input\n- Query DOM 物件\n\n### Referential transparency\n\n前面提到的 pure function 不管外部環境如何，只要參數相同，函式執行的返回結果必定相同。這種不依賴任何外部狀態，只依賴於傳入的參數的特性也稱為 引用透明(Referential transparency)\n\n### 利用參數保存狀態\n\n由於最近很紅的 Redux 使我能很好的舉例，讓大家了解什麼是用參數保存狀態。了解 Redux 的開發者應該會知 Redux 的狀態是由各個 reducer 所組成的，而每個 reducer 的狀態就是保存在參數中！\n\n```js\nfunction countReducer(state = 0, action) {\n\t// ...\n}\n```\n\n如果你跟 Redux 不熟可以看下面遞回的例子\n\n```js\nfunction findIndex(arr, predicate, start = 0) {\n\tif (0 <= start && start < arr.length) {\n\t\tif (predicate(arr[start])) {\n\t\t\treturn start;\n\t\t}\n\t\treturn findIndex(arr, predicate, start + 1);\n\t}\n}\nfindIndex(['a', 'b'], x => x === 'b'); // 找陣列中 'b' 的 index\n```\n\n這裡我們寫了一個 findIndex 用來找陣列中的元素位置，我們在 `findIndex` 中故意多塞了一個參數用來保存當前找到第幾個 index 的狀態，這就是利用參數保存狀態！\n\n> 這邊用到了遞回，遞回會不斷的呼叫自己，製造多層 stack frame，會導致運算速度較慢，而這通常需要靠編譯器做優化！\n\n> 那 JS 有沒有做遞回優化呢？ 恭喜大家，ES6 提供了 [尾呼優化(tail call optimization)](http://2ality.com/2015/06/tail-call-optimization.html)，讓我們有一些手法可以讓遞回更有效率！\n\n## Functional Programming 優勢\n\n### 可讀性高\n\n當我們透過一系列的函式封裝資料的操作過程，程式碼能變得非常的簡潔且可讀性極高，例如下面的例子\n\n```js\n[9, 4]\n\t.concat([8, 7]) // 合併陣列\n\t.sort() // 排序\n\t.filter(x => x > 5); // 過濾出大於 5 的\n```\n\n### 可維護性高\n\n因為 Pure function 等特性，執行結果不依賴外部狀態，且不會對外部環境有任何操作，使 Functional Programming 能更好的除錯及撰寫單元測試。\n\n### 易於併行/平行處理\n\nFunctional Programming 易於做併行/平行(Concurrency/Parallel)處理，因為我們基本上只做運算不碰 I/O，再加上沒有 Side Effect 的特性，所以較不用擔心 deadlock 等問題。\n\n## 出處\n\n[30 天精通 RxJS (02)： Functional Programming 基本觀念](https://ithelp.ithome.com.tw/articles/10186465)\n"},247:function(module,exports){module.exports="# Functional Programming 通用函式\n\n## ForEach\n\n> forEach 是 JavaScript 在 ES5 後，原生就有支援的方法。\n\n原本我們可能要透過 for loop 取出陣列中的每一個元素\n\n```js\nvar arr = ['Jerry', 'Anna'];\n\nfor (var i = 0; i < arr.length; i++) {\n\tconsole.log(arr[i]);\n}\n```\n\n現在可以直接透過陣列的 forEach 取出每一個元素。\n\n```js\nvar arr = ['Jerry', 'Anna'];\n\narr.forEach(item => console.log(item));\n```\n\nforEach 是 FP 操作陣列的基本方法，我們可以用這個方法來實作下面三個我們今天要講的重點分別為 map, filter, concatAll。\n\n## Map\n\n試著把 newCourseList 每個元素的 { id, title } 塞到新的陣列 idAndTitlePairs\n\n```js\nvar newCourseList = [\n\t\t{\n\t\t\tid: 511021,\n\t\t\ttitle: 'React for Beginners',\n\t\t\tcoverPng:\n\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\trating: 5,\n\t\t},\n\t\t{\n\t\t\tid: 511022,\n\t\t\ttitle: 'Vue2 for Beginners',\n\t\t\tcoverPng:\n\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\trating: 5,\n\t\t},\n\t\t{\n\t\t\tid: 511023,\n\t\t\ttitle: 'Angular2 for Beginners',\n\t\t\tcoverPng:\n\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\trating: 5,\n\t\t},\n\t\t{\n\t\t\tid: 511024,\n\t\t\ttitle: 'Webpack for Beginners',\n\t\t\tcoverPng:\n\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\trating: 4,\n\t\t},\n\t],\n\tidAndTitle = [];\n\nnewCourseList.forEach(course => {\n\tidAndTitle.push({ id: course.id, title: course.title });\n});\n```\n\n雖然我們成功的把 newCourseList 轉成 idAndTitlePairs，但這樣的寫法還是顯得有點太複雜了，我們可以用更抽象化的方式來完成。\n\n上面我們練習到 newCourseList 轉換成一個新的陣列 idAndTitlePairs，這個轉換的過程其實就是兩件事\n\n- 遍歷 newCourseList 所有的元素\n- 把每個元素的預期值給到新的陣列\n\n把這個過程抽象化成一個方法 map，以下是簡化的基本思路：\n\n- 我們會讓每個 陣列 都有一個 map 方法\n- 這個方法會讓使用者自訂傳入一個 callback function\n- 這個 callback function 會回傳使用者預期的元素\n\n> 雖然 ES5 之後原生的 JavaScript 陣列有 map 方法了，但希望讀者自我實做一次，能幫助理解。\n\n```js\n// 我們希望每一個陣列都有 map 這個方法，所以我們在 Array.prototype 擴充 map function\nArray.prototype.map = function(callback) {\n\tvar result = []; // map 最後一定會返回一個新陣列，所以我們先宣告一個新陣列\n\n\tthis.forEach(function(element, index) {\n\t\t// this 就是呼叫 map 的陣列\n\t\tresult.push(callback(element, index));\n\t\t// 執行使用者定義的 callback， callback 會回傳使用者預期的元素，所以我們把它 push 進新陣列\n\t});\n\n\treturn result;\n};\n```\n\n> 這裡用到了 JavaScript 的 prototype chain 以及 this 等觀念，可以看此[影片](https://www.youtube.com/watch?v=BlT6pCG2M1I)了解！\n\n到這裡我們就實作完成 map 的方法了，讓我們來試試這個方法吧！\n\n```js\nvar idAndTitle = newCourseList.map(course => {\n\treturn { id: course.id, title: course.title };\n});\n```\n\n可以看到我們的程式碼更加的簡潔！\n\n## Filter\n\n如果我們希望過濾一個陣列，留下陣列中我們想要的元素，並產生一個新的陣列，要怎麼做呢？\n先讓我們用 forEach 完成！\n\n讓我們過濾出 rating 值是 5 的元素\n\n```js\nvar ratingIsFive = [];\n\nnewCourseList.forEach(course => {\n\tif (course.rating === 5) {\n\t\tratingIsFive.push(course);\n\t}\n});\n```\n\n同樣的我們試著來簡化這個過程，首先在這個轉換的過程中，我們做了兩件事：\n\n- 遍歷 newCourseList 中的所有元素\n- 判斷元素是否符合條件，符合則加到新的陣列中\n\n```js\nArray.prototype.filter = function(callback) {\n\tvar result = [];\n\tthis.forEach((item, index) => {\n\t\tif (callback(item, index)) result.push(item);\n\t});\n\treturn result;\n};\n```\n\n試試這個方法\n\n```js\nvar ratingIsFive = newCourseList.filter(course => course.rating === 5);\n```\n\n會發現我們的程式碼又變簡單了，接著我們試著把 filter, map 串起來。\n\n如果我想要取出所有 rating 是 5 的所有 course title\n\n```js\nvar ratingIsFive = newCourseList\n\t.filter(course => course.rating === 5)\n\t.map(course => course.title);\n```\n\n## ConcatAll\n\n有時候我們會遇到組出一個二維陣列，但我們希望陣列是一維的，問題如下：\n\n假如我們要取出 courseLists 中所有 rating 為 5 的課程，這時可能就會用到兩個 forEach\n\n```js\nvar user = {\n\tid: 888,\n\tname: 'JerryHong',\n\tcourseLists: [\n\t\t{\n\t\t\tname: 'My Courses',\n\t\t\tcourses: [\n\t\t\t\t{\n\t\t\t\t\tid: 511019,\n\t\t\t\t\ttitle: 'React for Beginners',\n\t\t\t\t\tcoverPng:\n\t\t\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\t\t\ttags: [{ id: 1, name: 'JavaScript' }],\n\t\t\t\t\trating: 5,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 511020,\n\t\t\t\t\ttitle: 'Front-End automat workflow',\n\t\t\t\t\tcoverPng:\n\t\t\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\t\t\ttags: [{ id: 2, name: 'gulp' }, { id: 3, name: 'webpack' }],\n\t\t\t\t\trating: 4,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: 'New Release',\n\t\t\tcourses: [\n\t\t\t\t{\n\t\t\t\t\tid: 511022,\n\t\t\t\t\ttitle: 'Vue2 for Beginners',\n\t\t\t\t\tcoverPng:\n\t\t\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\t\t\ttags: [{ id: 1, name: 'JavaScript' }],\n\t\t\t\t\trating: 5,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 511023,\n\t\t\t\t\ttitle: 'Angular2 for Beginners',\n\t\t\t\t\tcoverPng:\n\t\t\t\t\t\t'https://res.cloudinary.com/dohtkyi84/image/upload/v1481226146/react-cover.png',\n\t\t\t\t\ttags: [{ id: 1, name: 'JavaScript' }],\n\t\t\t\t\trating: 4,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nvar allCourseIds = [];\n\nuser.courseLists.forEach(list => {\n\tlist.courses\n\t\t.filter(item => item.rating === 5)\n\t\t.forEach(item => {\n\t\t\tallCourseIds.push(item);\n\t\t});\n});\n```\n\n可以看到上面的程式碼，我們用了較為低階的操作來解決這個問題，我們剛剛已經試著用抽象化的方式實作了 map 跟 filter，那我們同樣也能夠定義一個方法用來 攤平二維陣列。\n\n讓我們來加入一個 concatAll 方法來簡化這段程式碼吧！\nconcatAll 要做的事情很簡單，就是把一個二維陣列轉成一維。\n\n```js\nArray.prototype.concatAll = function() {\n\tvar result = [];\n\n\t// 用 apply 完成\n\tthis.forEach(array => {\n\t\tresult.push.apply(result, array);\n\t});\n\n\t// 用兩個 forEach 完成\n\t// this.forEach((array) => {\n\t//   array.forEach(item => {\n\t//     result.push(item)\n\t//   })\n\t// });\n\n\t// 用 ES6 spread 完成\n\t// this.forEach((array) => {\n\t//   result.push(...array);\n\t// })\n\n\treturn result;\n};\n```\n\n同樣的我們用前面定要好的 courseLists 來試試 concatAll 吧！\n\n```js\nvar allCourseIds = user.courseLists\n\t.map(list => {\n\t\treturn list.courses.filter(course => course.rating === 5);\n\t})\n\t.concatAll();\n```\n\n這邊出一個比較難的題目，大家可以想想看要怎麼解\n\n```js\nvar courseLists = [\n\t{\n\t\tname: 'My Courses',\n\t\tcourses: [\n\t\t\t{\n\t\t\t\tid: 511019,\n\t\t\t\ttitle: 'React for Beginners',\n\t\t\t\tcovers: [\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 150,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/150/200/tech',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 200,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/200/200/tech',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/300/200/tech',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: 'JavaScript',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trating: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 511020,\n\t\t\t\ttitle: 'Front-End automat workflow',\n\t\t\t\tcovers: [\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 150,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/150/200/arch',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 200,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/200/200/arch',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/300/200/arch',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\tname: 'gulp',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\tname: 'webpack',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trating: 5,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'New Release',\n\t\tcourses: [\n\t\t\t{\n\t\t\t\tid: 511022,\n\t\t\t\ttitle: 'Vue2 for Beginners',\n\t\t\t\tcovers: [\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 150,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/150/200/nature',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 200,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/200/200/nature',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/300/200/nature',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: 'JavaScript',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trating: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 511023,\n\t\t\t\ttitle: 'Angular2 for Beginners',\n\t\t\t\tcovers: [\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 150,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/150/200/people',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 200,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/200/200/people',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\turl: 'http://placeimg.com/300/200/people',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: 'JavaScript',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trating: 5,\n\t\t\t},\n\t\t],\n\t},\n];\n\n/* \nvar result = courseList\n不得直接使用索引 covers[0]，請用 concatAll, map, filter, forEach 完成\nresult 結果為 [\n    {\n      id: 511019,\n      title: \"React for Beginners\",\n      cover: \"http://placeimg.com/150/200/tech\"\n    }, {\n      id: 511020,\n      title: \"Front-End automat workflow\",\n      cover: \"http://placeimg.com/150/200/arch\"\n    }, {\n      id: 511022,\n      title: \"Vue2 for Beginners\",\n      cover: \"http://placeimg.com/150/200/nature\"\n    }, {\n      id: 511023,\n      title: \"Angular2 for Beginners\",\n      cover: \"http://placeimg.com/150/200/people\"\n    },\n ]\n*/\n```\n\n練習連結： [JSBin](https://jsbin.com/wifulas/6/edit?js,output) | [JSFiddle](https://jsfiddle.net/s6323859/5wcgnf89/1/)\n\n這題有點難，大家可以想想看，我把答案寫在[這裡](https://jsbin.com/rahezacane/edit?js,console)了！\n\n## 出處\n\n[30 天精通 RxJS (03)： Functional Programming 通用函式](https://ithelp.ithome.com.tw/articles/10186703)\n"},248:function(module,exports){module.exports="# ES6 Class(類別)\n\n## 在 ES6 之前\n\n對於已經熟悉 JS 的開發者而言，在 JS 中原本就有設計一個四不像的物件導向語法，也就是以建構函式來作為類別，然後用 new 運算符來實體化物件的這種語法。以下是個簡單的例子:\n\n```js\nfunction Player(fullName, age) {\n\tthis.fullName = fullName;\n\tthis.age = age;\n}\n\nPlayer.prototype.sayHi = function() {\n\tconsole.log('Hi! ' + this.fullName);\n};\n\nconst inori = new Player('Inori', 16);\ninori.sayHi();\n```\n\n你也可以把物件的方法寫在 Player 函式之中，只是每個物件在實體化時都會複製一份。為了節省資源的花費，所以物件的方法因為通常會在 prototype(原型鏈)上定義，以此達到所有物件共享這些方法的目的，它也有一些特殊的作用，例如物件實體化後，然後再定義原型鏈上的方法，這樣也可以讓已經實體化的物件使用這些方法。例如在上面的程式碼後再加上:\n\n```js\n// 這段程式碼是在inori已經實體化之後加上的\nPlayer.prototype.myAge = function() {\n\tconsole.log('My age is ' + this.age);\n};\n\n// 可以再使用\ninore.myAge();\n```\n\n這方式對初學者來說是相當的怪異，大概是幾個項目:\n\n- 容易與一般函式混用時造成混亂: 作為建構函式(constructor function)的函式通常沒有回傳值，裡面有用 this。\n- 如果忘了加 new 運算符: 像 const gi = Player('Gi', 15)這樣的語句，不會回報錯誤，gi 也是個 undefined，也不是物件。\n- 雖然它像個類別的語法: 這個物件中的成員\"封裝\"，相當於沒有封裝，所有的屬性與方法都是公開的(public)，這個函式也沒繼承這種功能。\n\n## 類別(Class)介紹\n\n類別(Class)是先裡面定義好物件的整體結構藍圖(blue print)，然後再用這個類別定義，以此來產生相同結構的多個的物件實例，類別在定義時並不會直接產生出物件，要經過實體化的過程(new 運算符)，才會產生真正的物件實體。另外，目前因為類別定義方式還是個很新的語法，在實作時除了比較新的函式庫或框架，才會開始用它來撰寫。以下的為一個簡單範例:\n\n```js\nclass Player {\n\tconstructor(fullName, age, gender, hairColor) {\n\t\tthis.fullName = fullName;\n\t\tthis.age = age;\n\t\tthis.gender = gender;\n\t\tthis.hairColor = hairColor;\n\t}\n\n\ttoString() {\n\t\treturn 'Name: ' + this.fullName + ', Age:' + this.age;\n\t}\n}\n\nconst inori = new Player('Inori', 16, 'girl', 'pink');\nconsole.log(inori.toString());\nconsole.log(inori.fullName);\n\nconst tsugumi = new Player('Tsugumi', 14, 'girl', 'purple');\nconsole.log(tsugumi.toString());\n```\n\n> 註: 注意類別名稱命名時要使用大駝峰(ClassName)的寫法\n>\n> 註: 類別目前在 ES6 標準中與函式(Functions)屬同一章節。\n\n下面分別說明一些這個例子中用到的語法與關鍵字的重要概念，以及類別延伸的一些語法。\n\n### this\n\n`this`簡單的說來，是物件實體專屬的指向變數，`this`指向的就是\"這個物件實體\"，以上面的例子來說，也就是當物件真正實體化時，`this`變數會指向這個物件實體。`this`是怎麼知道要指到哪一個物件實體？是因為`new`運算符造成的結果。\n\n`this`變數是 JavaScript 的一個特性，當函式呼叫或物件實體化(用 new 運算符)時，都會以這個`this`變數的指向對象，作為執行期間的依據。我們在函式中，使用作用範圍(Scope)來說明以函式為基礎的檢視角度，在函式區塊中可見的變數與函式的領域的概念。而 JavaScript 中，另外也有一種上下文環境(Context)的概念，就是對於`this`的在執行期間所依據的影響，即是以物件為基礎的的檢視角度。\n\n`this`也就是執行上下文可以簡單用三個情況來區分:\n\n- 函式呼叫: 在一般情況下的函式呼叫，this 通常都指向 window(或全域)物件。這也是預設情況。\n- 建構式(constructor)呼叫: 透過 new 運算符建立物件實體，等於呼叫類型的建構式，this 會指向新建立的物件實例\n- 物件對其中的方法呼叫: this 指向呼叫這個方法的物件實體\n  所以當建構式呼叫時，也就是使用 new 運算符建立物件時，this 會指向新建立的物件，也就是下面這段程式碼:\n\n```js\nconst inori = new Player('Inori', 16, 'girl', 'pink');\n```\n\n因此在建構式中的指定值的語句，裡面的`this`值就會指向是這個新建立的物件，也就是`inori`:\n\n```js\nconstructor(fullName, age, gender, hairColor) {\n  this.fullName = fullName\n  this.age = age\n  this.gender = gender\n  this.hairColor = hairColor\n}\n```\n\n也就是說在建立物件後，經建構式的執行語句，這個`inori`物件中的屬性值就會被指定完成，所以可以用像下面的語法來存取屬性:\n\n```js\ninori.fullName;\ninori.age;\n```\n\n第 3 種情況是呼叫物件中的方法，也就是像下面的程式碼中，this 會指向這個呼叫 toString 方法的物件，也就是`inori`:\n\n```js\ninori.toString();\n```\n\n對於`this`的說明大致上就是這樣而已，這裡都是很直覺的說明。`this`還有一部份的細節與應用情況，`this`的概念在 JavaScript 中十分重要，初學者真的需要多花點時間才能真正搞懂。\n\n### 建構式(constructor)\n\n建構式是特別的物件方法，它必會在物件建立時被呼叫一次，通常用於建構新物件中的屬性，以及呼叫上層父母類別(如果有繼承的話)之用。用類別(class)的定義時，物件的屬性都只能在建構式中定義，這與用物件字面的定義方式不同，這一點是要特別注意的。如果物件在初始化時不需要任何語句，那麼就不要寫出這個建構式，實際上類別自己有預設的建構式，它會自動幫你作建構的工作。\n\n關於建構式或物件方法的多形(polymorphism)或覆蓋(Overriding)，在 JavaScript 中沒有這種特性。建構式是會被限制只能有一個，而在原本在物件中的方法也沒這個特性，在物件中定義同識別名稱的方法只會有一個定義被使用，這與傳入參數有或沒有，或是有幾個無關。\n\n所以如果你需要定義不同的建構式在物件中，因應不同的物件實體的情況，只能用函式的不定傳入參數方式，或是加上傳入參數的預設值來想辦法改寫，請參考函式其它內容中的說明。以下為一個範例:\n\n```js\nclass Option {\n\tconstructor(key, value, autoLoad = false) {\n\t\tif (typeof key != 'undefined') {\n\t\t\tthis[key] = value;\n\t\t}\n\t\tthis.autoLoad = autoLoad;\n\t}\n}\n\nconst op1 = new Option('color', 'red');\nconst op2 = new Option('color', 'blue', true);\n```\n\n### 私有成員\n\nJavaScript 截至 ES6 標準為止，在類別中並沒有像其他程式語言中的私有的(private)、保護的(protected)、公開的(public)這種成員存取控制的修飾關鍵字詞，基本上所有的類別中的成員都是公開的。雖然也有其他\"模擬\"出私有成員的方式，不過它們都是複雜的語法，這裡就不說明了。\n\n目前比較簡單常見的區分方式，就是在私有成員(或方法)的名稱前面，加上下底線符號(_)前綴字，用於區分這是私有的(private)成員，這只是由程式開發者撰寫上的區分差別，與語言本身特性無關，對 JavaScript 來說，成員名稱前有沒有有下底線符號(_)的，都是視為一樣的變數。以下為簡單範例:\n\n```js\nclass Student {\n\tconstructor(id, firstName, lastName) {\n\t\tthis._id = id;\n\t\tthis._firstName = firstName;\n\t\tthis._lastName = lastName;\n\t}\n\n\ttoString() {\n\t\treturn (\n\t\t\t'id is ' +\n\t\t\tthis._id +\n\t\t\t' his/her name is ' +\n\t\t\tthis.firstName +\n\t\t\t' ' +\n\t\t\tthis.lastName\n\t\t);\n\t}\n}\n```\n\n有一種樣式是利用建構式是私有的特性(有自己的作用域)，把私有屬性寫在建構式裡面，getter 與 setter 也寫在裡面，這種樣式的確可以達到私有成員的目的。但是，寫在建構式裡面的 getter 或 setter，在每次物件建立實體時，就會複製一份新的，這會花費更多的資源與效能。而且這也不太像是以類別為基礎的物件導向寫法。如下面的例子:\n\n```js\nclass Student {\n\tconstructor(id, firstName, lastName) {\n\t\tlet age = 20; // 這是私有的\n\t\tthis.name = firstName + ' ' + lastName; // 這是公開的\n\t\tthis.greet = function() {\n\t\t\t// 這裡可以存取得到name與age\n\t\t\tconsole.log(`name: ${this.name}, age: ${age}`);\n\t\t};\n\t}\n\n\ttoString() {\n\t\treturn (\n\t\t\t'id is ' +\n\t\t\tthis._id +\n\t\t\t' his/her name is ' +\n\t\t\tthis.firstName +\n\t\t\t' ' +\n\t\t\tthis.lastName\n\t\t);\n\t}\n}\n\nconst aStudent = new Student(123, 'Eddy', 'Chang');\nconsole.log(aStudent.age);\naStudent.greet();\n```\n\n> 註: 如果是私有成員，就不能直接在外部存取，要用 getter 與 setter 來實作取得與修改值的方法。私有方法也不能在外部呼叫，只能在類別內部使用。\n\n### Getter 與 Setter\n\n在類別定義中可以使用`get`與`set`關鍵字，作為類別方法的修飾字，可以代表 getter(取得方法)與 setter(設定方法)。一般的公開的原始資料類型的屬性值(字串、數字等等)，不需要這兩種方法，原本就可以直接取得或設定。只有私有屬性或特殊值，才需要用這兩種方法來作取得或設定。getter(取得方法)與 setter(設定方法)的呼叫語法，長得像一般的存取物件成員的語法，都是用句號(.)呼叫，而且 setter(設定方法)是用指定值的語法，不是傳入參數的那種語法。以下為範例:\n\n```js\nclass Option {\n\tconstructor(key, value, autoLoad = false) {\n\t\tif (typeof key != 'undefined') {\n\t\t\tthis['_' + key] = value;\n\t\t}\n\t\tthis.autoLoad = autoLoad;\n\t}\n\n\tget color() {\n\t\tif (this._color !== undefined) {\n\t\t\treturn this._color;\n\t\t} else {\n\t\t\treturn 'no color prop';\n\t\t}\n\t}\n\n\tset color(value) {\n\t\tthis._color = value;\n\t}\n}\n\nconst op1 = new Option('color', 'red');\nop1.color = 'yellow';\n\nconst op2 = new Option('action', 'run');\nop2.color = 'yellow';\n```\n\n> 註: 所以 getter 不會有傳入參數，setter 只會有一個傳入參數。\n\n### 靜態成員\n\n靜態(Static)成員指的是屬於類別的屬性或方法，也就是不論是哪一個被實體化的物件，都共享這個方法或屬性。而且，實際上靜態(Static)成員根本不需要實體化的物件來呼叫或存取，直接用類別就可以呼叫或存取。ES6 中的類別目前只有靜態方法，沒有靜態屬性，使用的是`static`作為方法的修飾字詞。以下為一個範例:\n\n```js\nclass Student {\n\tconstructor(id, firstName, lastName) {\n\t\tthis.id = id;\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\n\t\t//這裡呼叫靜態方法，每次建構出一個學生實體就執行一次\n\t\tStudent._countStudent();\n\t}\n\n\t//靜態方法的定義\n\tstatic _countStudent() {\n\t\tif (this._numOfStudents === undefined) {\n\t\t\tthis._numOfStudents = 1;\n\t\t} else {\n\t\t\tthis._numOfStudents++;\n\t\t}\n\t}\n\n\t//用getter與靜態方法取出目前的學生數量\n\tstatic get numOfStudents() {\n\t\treturn this._numOfStudents;\n\t}\n}\n\nconst aStudent = new Student(11, 'Eddy', 'Chang');\nconsole.log(Student.numOfStudents);\n\nconst bStudent = new Student(22, 'Ed', 'Lu');\nconsole.log(Student.numOfStudents);\n```\n\n靜態屬性目前來說有兩種解決方案，一種是使用 ES7+的 Class Properties([Class Fields & Static Properties](https://github.com/tc39/proposal-class-public-fields))，可以使用`static`關鍵字來定義靜態屬性，另一種是定義到類別原本的定義外面，這個語法在 React 中已經有看到在使用了，主要是用在定義`defaultProps`與`propTypes`使用的，下面為一個簡單的例子:\n\n```js\n// ES7語法方式\nclass Video extends React.Component {\n  static defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n  }\n  render() { ... }\n}\n```\n\n```js\n// ES6語法方式\nclass Video extends React.Component {\n  constructor(props) { ... }\n  render() { ... }\n}\n\nVideo.defaultProps = { ... }\n```\n\n> 註: ES7+的靜態(或類別)屬性的轉換，要使用 bebal 的[babel-plugin-transform-class-properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties)外掛。\n\n### 繼承\n\n用 extends 關鍵字可以作類別的繼承，而在建構式中會多呼叫一個`super()`方法，用於執行上層父母類別的建構式之用。`super`也可以用於指向上層父母類別，呼叫其中的方法或存取屬性。\n\n繼承時還有有幾個注意的事項:\n\n- 繼承的子類別中的建構式，`super()`需要放在建構式第一行，這是標準的呼叫方式。如果有需要傳入參數可以傳入。\n- 繼承的子類別中的屬性與方法，都會覆蓋掉原有的在父母類別中的同名稱屬性或方法，要區為不同的屬性或方法要用`super`關鍵字來存取父母類別中的屬性或方法，例如`super.toString()`\n\n```js\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\ttoString() {\n\t\treturn '(' + this.x + ', ' + this.y + ')';\n\t}\n}\n\nclass ColorPoint extends Point {\n\tconstructor(x, y, color) {\n\t\tsuper(x, y);\n\t\tthis.color = color;\n\t}\n\ttoString() {\n\t\treturn super.toString() + ' in ' + this.color;\n\t}\n}\n```\n\n### 類別中的箭頭函式\n\n在類別中使用箭頭函式來取代裡面原有方法的定義，這在 React 的元件撰寫時，也是很常見的一種語法。這個語法是有其目的的，主要是為了要作 this 的綁定。例如以下的例子:\n\n```js\nclass PostInfo extends React.Component {\n\thandleOptionsButtonClick = e => {\n\t\tthis.setState({ showOptionsModal: true });\n\t};\n}\n```\n\n因為在 React 元件使用 ES6 Class 的語法來定義元件時，官方取消了原有的 Autobind(自動綁定)功能，所以在現在新式的元件寫法中，開發者必須自行綁定類別中的方法。有兩種方法可以進行綁定，第二種像上面的例子這樣，第一種是在建構式中使用函式的 bind 方法，有些時候會使用第一種語法。像下面這個例子:\n\n```js\nclass PostInfo extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// 手動綁定的語法，綁定this到元件的實體...\n\t\tthis.handleOptionsButtonClick = this.handleOptionsButtonClick.bind(this);\n\t}\n\thandleOptionsButtonClick(e) {\n\t\t// ...確保'this'可以參照到元件的實體\n\t\tthis.setState({ showOptionsModal: true });\n\t}\n}\n```\n\n這個語法也不是 ES6 標準的語法，它是正在訂定中的新標準語法，是屬於 Class Properties([Class Fields & Static Properties](https://github.com/tc39/proposal-class-public-fields))。不過 babel 編譯工具透過外掛，可以正確編譯就是。\n\n> 註: ES7+的靜態(或類別)屬性的轉換，要使用 bebal 的[babel-plugin-transform-class-properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties)外掛。\n\n> 註: 你可能會好奇，為何 babel 編譯工具都可以正確支持編譯 React 中的 JSX 與一些超出 ES6 標準的語法？因為這 babel 工具專案實際上是 Facebook 贊助(出錢養的)的專案。\n\n## 風格指引\n\n- 在命名類別或建構式時，使用大駝峰(PascalCase)命名方式。(Airbnb 22.3)\n- 撰寫自訂的 toString()方法是很好的，但要確定它是可以運作，而且不會有副作用的。(Airbnb 9.4)\n- 如果 屬性/方法 是布林值，使用像 isVal()或 hasVal()的命名。(Airbnb 23.3)\n- 不要使用 JS 的 getters/setters，因為它們會造成不預期的副作用，而且難以測試與維護，使用像 getVal()與 setVal('hello')的方法。(Airbnb 23.2)\n\n## 出處\n\n[ES6 篇 - Class(類別)](https://ithelp.ithome.com.tw/articles/10185583)\n"},249:function(module,exports){module.exports="# process 對象\n\n`process`對像是 Node 的一個全局對象，提供當前 Node 進程的信息。\n它可以在腳本的任意位置使用，不必通過`require`命令加載。該對象部署了`EventEmitter`接口。\n\n## 属性\n\n`process`對象提供一系列屬性，用於返回系統信息。\n\n- process.argv：返回一個數組，成員是當前進程的所有命令行參數。\n- process.env：返回一個對象，成員為當前 Shell 的環境變量，比如 process.env.HOME。\n- process.installPrefix：返回一個字符串，表示 Node 安裝路徑的前綴，比如/usr/local。相應地，Node 的執行文件目錄為/usr/local/bin/node。\n- process.pid：返回一個數字，表示當前進程的進程號。\n- process.platform：返回一個字符串，表示當前的操作系統，比如 Linux。\n- process.title：返回一個字符串，默認值為 node，可以自定義該值。\n- process.version：返回一個字符串，表示當前使用的 Node 版本，比如 v7.10.0。\n\n`process`對像還有一些屬性，用來指向 Shell 提供的接口。\n\n### process.stdout\n\nprocess.stdout 屬性返回一個對象，表示標準輸出。該對象的 write 方法等同於 console.log，可用在標準輸出向用戶顯示內容。\n\n```js\nconsole.log = function(d) {\n\tprocess.stdout.write(d + '\\n');\n};\n```\n\n下面代碼表示將 ​​ 一個文件導向標準輸出。\n\n```js\nvar fs = require('fs');\n\nfs.createReadStream('wow.txt').pipe(process.stdout);\n```\n\n上面代碼中，由於`process.stdout`和`process.stdin`與其他進程的通信，都是流（stream）形式，所以必須通過`pipe`管道命令中介。\n\n```js\nvar fs = require('fs');\nvar zlib = require('zlib');\n\nfs.createReadStream('wow.txt')\n\t.pipe(zlib.createGzip())\n\t.pipe(process.stdout);\n```\n\n上面代碼通過`pipe`方法，先將文件數據壓縮，然後再導向標準輸出。\n\n### process.stdin\n\nprocess.stdin 返回一個對象，表示標準輸入。\n\n```js\nprocess.stdin.pipe(process.stdout);\n```\n\n上面代碼表示將 ​​ 標準輸入導向標準輸出。\n\n由於 stdin 和 stdout 都部署了 stream 接口，所以可以使用 stream 接口的方法。\n\n```js\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('readable', function() {\n\tvar chunk = process.stdin.read();\n\tif (chunk !== null) {\n\t\tprocess.stdout.write('data: ' + chunk);\n\t}\n});\n\nprocess.stdin.on('end', function() {\n\tprocess.stdout.write('end');\n});\n```\n\n### stderr\n\n`process.stderr`屬性指向標準錯誤。\n\n### process.argv，process.execPath，process.execArgv\n\n`process.argv`屬性返回一個數組，由命令行執行腳本時的各個參數組成。\n\n它的第一個成員總是`node`，第二個成員是腳本文件名，其餘成員是腳本文件的參數。\n\n請看下面的例子，新建一個腳本文件`argv.js`。\n\n```js\n// argv.js\nconsole.log('argv: ', process.argv);\n```\n\n命令行下調用這個腳本，會得到以下結果。\n\n```js\n$ node argv.js a b c\n[ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n```\n\n上面代碼表示，`argv`返回數組的成員依次是命令行的各個部分，真正的參數實際上是從`process.argv[2]`開始。\n要得到真正的參數部分，可以把`argv.js`改寫成下面這樣。\n\n```js\n// argv.js\nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n```\n\n`process.execPath`屬性返回執行當前腳本的 Node 二進製文件的絕對路徑。\n\n```js\n> process.execPath\n'/usr/local/bin/node'\n>\n```\n\n`process.execArgv`屬性返回一個數組，成員是命令行下執行腳本時，在 Node 可執行文件與腳本文件之間的命令行參數。\n\n```js\n// script.js的代碼為\n// console.log(process.execArgv);\n$ node --harmony script.js --version\n```\n\n### process.env\n\n`process.env`屬性返回一個對象，包含了當前 Shell 的所有環境變量。比如，`process.env.HOME`返回用戶的主目錄。\n\n通常的做法是，新建一個環境變量`NODE_ENV`，用它確定當前所處的開發階段，生產階段設為`production`，開發階段設為`develop`或`staging`，然後在腳本中讀取`process.env.NODE_ENV`即可。\n\n運行腳本時，改變環境變量，可以採用下面的寫法。\n\n```js\n$ export NODE_ENV=production && node app.js\n// 或者\n$ NODE_ENV=production node app.js\n```\n\n## 方法\n\nprocess 對象提供以下方法：\n\n- process.chdir()：切換工作目錄到指定目錄。\n- process.cwd()：返回運行當前腳本的工作目錄的路徑。\n- process.exit()：退出當前進程。\n- process.getgid()：返回當前進程的組 ID（數值）。\n- process.getuid()：返回當前進程的用戶 ID（數值）。\n- process.nextTick()：指定回調函數在當前執行棧的尾部、下一次 Event Loop 之前執行。\n- process.on()：監聽事件。\n- process.setgid()：指定當前進程的組，可以使用數字 ID，也可以使用字符串 ID。\n- process.setuid()：指定當前進程的用戶，可以使用數字 ID，也可以使用字符串 ID。\n\n### process.cwd()，process.chdir()\n\n`cwd`方法返回進程的當前目錄（絕對路徑），`chdir`方法用來切換目錄。\n\n```js\n> process.cwd()\n'/home/aaa'\n\n> process.chdir('/home/bbb')\n> process.cwd()\n'/home/bbb'\n```\n\n注意，`process.cwd()`與`__dirname`的區別。前者進程發起時的位置，後者是腳本的位置，兩者可能是不一致的。\n比如，`node` `./code/program.js`，對於`process.cwd()`來說，返回的是當前目錄（.）；對於`__dirname`來說，返回是腳本所在目錄，即`./code/program.js`。\n\n## process.nextTick()\n\n`process.nextTick`將任務放到當前一輪事件循環（Event Loop）的尾部。\n\n```js\nprocess.nextTick(function() {\n\tconsole.log('下一次Event Loop即将开始!');\n});\n```\n\n上面代碼可以用`setTimeout(f,0)`改寫，效果接近，但是原理不同。\n\n```js\nsetTimeout(function() {\n\tconsole.log('已經到了下一輪Event Loop！');\n}, 0);\n```\n\n`setTimeout(f,0)`是將任務放到下一輪事件循環的頭部，因此`nextTick`會比它先執行。\n另外，`nextTick`的效率更高，因為不用檢查是否到了指定時間。\n\n根據 Node 的事件循環的實現，基本上，進入下一輪事件循環後的執行順序如下。\n\n1.setTimeout(f,0) 2.各种到期的回调函数\n3.process.nextTick push(), sort(), reverse(), and splice()\n\n### process.exit()\n\n`process.exit`方法用來退出當前進程。它可以接受一個數值參數，如果參數大於 0，表示執行失敗；如果等於 0 表示執行成功。\n\n```js\nif (err) {\n\tprocess.exit(1);\n} else {\n\tprocess.exit(0);\n}\n```\n\n如果不帶有參數，`exit`方法的參數默認為 0。\n\n注意，`process.exit()`很多時候是不需要的。因為如果沒有錯誤，一旦事件循環之中沒有待完成的任務，Node 本來就會退出進程，不需要調用`process.exit(0)`。\n這時如果調用了，進程會立刻退出，不管有沒有異步任務還在執行，所以不如等 Node 自然退出。\n另一方面，如果發生錯誤，Node 往往也會退出進程，也不一定要調用`process.exit(1)`。\n\n```js\nfunction printUsageStdout() {\n\tprocess.stdout.write('...some long text ...');\n}\n\nif (true) {\n\tprintUsageToStdout();\n\tprocess.exit(1);\n}\n```\n\n上面的代碼可能不會達到預期效果。因為`process.stdout`有時會變成異步，不能保證一定會在當前事件循環之中輸出所有內容，而`process.exit`會使當前進程立刻退出。\n\n更安全的方法是使用`exitcode`屬性，指定退出狀態，然後再拋出一個錯誤。\n\n```js\nif (true) {\n\tprintUsageToStdout();\n\tprocess.exitCode = 1;\n\tthrow new Error('xx condition failed');\n}\n```\n\n`process.exit()`執行時，會觸發`exit`事件。\n\n### process.on()\n\n`process`對象部署了 EventEmitter 接口，可以使用`on`方法監聽各種事件，並指定回調函數。\n\n```js\nprocess.on('uncaughtException', function(err) {\n\tconsole.error('got an error: %s', err.message);\n\tprocess.exit(1);\n});\n\nsetTimeout(function() {\n\tthrow new Error('fail');\n}, 100);\n```\n\n上面代碼是`process`監聽 Node 的一個全局性事件`uncaughtException`，只要有錯誤沒有捕獲，就會觸發這個事件。\n\n`process`支持的事件還有下面這些。\n\n- data 事件：數據輸出輸入時觸發\n- SIGINT 事件：接收到系統信號 SIGINT 時觸發，主要是用戶按 Ctrl + c 時觸發。\n- SIGTERM 事件：系統發出進程終止信號 SIGTERM 時觸發\n- exit 事件：進程退出前觸發\n\n```js\nprocess.on('SIGINT', function() {\n\tconsole.log('Got a SIGINT. Goodbye cruel world');\n\tprocess.exit(0);\n});\n\n// 也可以忽略這個信號\nprocess.on('SIGINT', function() {\n\tconsole.log('Ignored Ctrl-C');\n});\n```\n\n使用時，向該進程發出系統信號，就會導致進程退出。\n\n```\n$ kill -s SIGINT [process_id]\n```\n\n`SIGTERM`信號表示內核要求當前進程停止，進程可以自行停止，也可以忽略這個信號。\n\n```js\nvar http = require('http');\n\nvar server = http.createServer(function(req, res) {\n\t// ...\n});\n\nprocess.on('SIGTERM', function() {\n\tserver.close(function() {\n\t\tprocess.exit(0);\n\t});\n});\n```\n\n上面代碼表示，進程接到`SIGTERM`信號之後，關閉服務器，然後退出進程。\n需要注意的是，這時進程不會馬上退出，而是要回應完最後一個請求，處理完所有回調函數，然後再退出。\n\n`exit`事件在 Node 進程退出前觸發。\n\n```js\nprocess.on('exit', function() {\n\tconsole.log('Goodbye');\n});\n```\n\n### process.kill()\n\n`process.kill`方法用來對指定 ID 的線程發送信號，默認為`SIGINT`信號。\n\n```js\nprocess.kill(process.pid, 'SIGTERM');\n```\n\n上面代碼用於殺死當前進程。\n\n```js\nprocess.on('SIGTERM', function() {\n\tconsole.log('terminating');\n\tprocess.exit(1);\n});\n\nsetTimeout(function() {\n\tconsole.log('sending SIGTERM to process %d', process.pid);\n\tprocess.kill(process.pid, 'SIGTERM');\n}, 500);\n\nsetTimeout(function() {\n\tconsole.log('never called');\n}, 1000);\n```\n\n上面代碼中，500 毫秒後向當前進程發送 SIGTERM 信號（終結進程），因此 1000 毫秒後的指定事件不會被觸發。\n\n## 事件\n\n### exit 事件\n\n當前進程退出時，會觸發 exit 事件，可以對該事件指定回調函數。\n\n```js\nprocess.on('exit', function() {\n\tfs.writeFileSync('/tmp/myfile', '需要保存到硬盤的信息');\n});\n```\n\n下面是一個例子，進程退出時，顯示一段日誌。\n\n```js\nprocess.on('exit', code => console.log('exiting with code: ' + code));\n```\n\n注意，此時回調函數只能執行同步操作，不能包含異步操作，因為執行完回調函數，進程就會退出，無法監聽到回調函數的操作結果。\n\n```js\nprocess.on('exit', function(code) {\n\t// 不會執行\n\tsetTimeout(function() {\n\t\tconsole.log('This will not run');\n\t}, 0);\n});\n```\n\n上面代碼在`exit`事件的回調函數里面，指定了一個下一輪事件循環，所要執行的操作。這是無效的，不會得到執行。\n\n### beforeExit 事件\n\nbeforeExit 事件在 Node 清空了 Event Loop 以後，再沒有任何待處理的任務時觸發。正常情況下，如果沒有任何待處理的任務，Node 進程會自動退出，設置 beforeExit 事件的監聽函數以後，就可以提供一個機會，再部署一些任務，使得 Node 進程不退出。\n\nbeforeExit 事件與 exit 事件的主要區別是，beforeExit 的監聽函數可以部署異步任務，而 exit 不行。\n\n此外，如果是顯式終止程序（比如調用 process.exit()），或者因為發生未捕獲的錯誤，而導致進程退出，這些場合不會觸發 beforeExit 事件。因此，不能使用該事件替代 exit 事件。\n\n### uncaughtException 事件\n\n當前進程拋出一個沒有被捕捉的錯誤時，會觸發`uncaughtException`事件。\n\n```js\nprocess.on('uncaughtException', function(err) {\n\tconsole.error('An uncaught error occurred!');\n\tconsole.error(err.stack);\n\tthrow new Error('未捕獲錯誤');\n});\n```\n\n部署`uncaughtException`事件的監聽函數，是免於 Node 進程終止的最後措施，否則 Node 就要執行`process.exit()`。出於除錯的目的，並不建議發生錯誤後，還保持進程運行。\n\n拋出錯誤之前部署的異步操作，還是會繼續執行。只有完成以後，Node 進程才會退出。\n\n```js\nprocess.on('uncaughtException', function(err) {\n\tconsole.log('Caught exception: ' + err);\n});\n\nsetTimeout(function() {\n\tconsole.log('本行依然执行');\n}, 500);\n\n// 下面的表達式拋出錯誤\nnonexistentFunc();\n```\n\n上面代碼中，拋出錯誤之後，此前 setTimeout 指定的回調函數亦然會執行。\n\n### 信號事件\n\n操作系統內核向 Node 進程發出信號，會觸發信號事件。實際開發中，主要對 SIGTERM 和 SIGINT 信號部署監聽函數，這兩個信號在非 Windows 平台會導致進程退出，但是只要部署了監聽函數，Node 進程收到信號後就不會退出。\n\n```js\n// 讀取標準輸入，這主要是為了不讓當前進程退出\nprocess.stdin.resume();\n\nprocess.on('SIGINT', function() {\n\tconsole.log('SIGINT信號，按Control-D退出');\n});\n```\n\n上面代碼部署了 SIGINT 信號的監聽函數，當用戶按下 Ctrl-C 後，會顯示提示文字。\n\n## 進程的退出碼\n\n進程退出時，會返回一個整數值，表示退出時的狀態。這個整數值就叫做退出碼。下面是常見的 Node 進程退出碼。\n\n- 0，正常退出\n- 1，發生未捕獲錯誤\n- 5，V8 執行錯誤\n- 8，不正確的參數\n- 128 + 信號值，如果 Node 接受到退出信號（比如 SIGKILL 或 SIGHUP），它的退出碼就是 128 加上信號值。由於 128 的二進制形式是 10000000, 所以退出碼的後七位就是信號值。\n\nBash 可以使用環境變量\\$?，獲取上一步操作的退出碼。\n\n```js\n$ node nonexist.js\nError: Cannot find 'nonexist.js'\n\n$ echo $?\n1\n```\n\n上面代碼中，Node 執行一個不存在的腳本文件，結果報錯，退出碼就是 1。\n\n## 參考鏈接\n\nJosé F. Romaniello, [Graceful shutdown in node.js](https://joseoncode.com/2014/07/21/graceful-shutdown-in-node-dot-js/)\n\n## 出處\n\n[process 對象](http://javascript.ruanyifeng.com/nodejs/process.html)\n"},250:function(module,exports){module.exports="# PHP 前端\n\ntodo：待補內容\n"},251:function(module,exports){module.exports="# React Life Cycle (React 16.3 版之後)\n\n大致上可分類為 Mounting 增加、Updating 更新、Unmounting 移除增加。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/reactFile/image/react-life.png?raw=true)\n\nPS：React 官方已經在 2018/03/27 宣告 不推薦使用：\n`componentWillMount`、`componentWillReceiveProps`、`componentWillUpdate` 並且 react 16.3 版本以後這些 method 會加上前綴 UNSAFE\\_，17 版本會丟棄。提醒使用的時候要特別小心。\n\n## Mounting\n\nMounting 會在元件被建立時被執行。\n\n```js\nconstructor();\n```\n\n這是 es6 的 class 語法糖，可以說是建構並初始化物件，這邊會繼承 React.Component，假設你元件要使用到 props，就必須這樣寫 super(props)來繼承父類別。這階段簡單說就是開始建立這個物件。如果你沒有要定義 state、或是在這邊綁定 method (另可以選用 arrow function 綁定 method)，就不需要用到 constructor。\n\n```js\ncomponentWillMount(); // 17版將丟棄\n```\n\n緊接在 constructor 後執行 componentWillMount，提醒只會在初始執行一次，移除後重新建立元件也不會在執行 componentWillMount。另外是唯一會在 server side render 時執行的 life Cycle method，關於 WillMount 最多的討論就是，在這邊擺放 fetch api 是否正確。\n\n官方表示，因為 server side 會執行一次，client side 也會再多執行一次，造成重複要資料動作。另外在這邊做 async api 處理，是無法暫停 render 動作，你一樣要等 render 完成後，你還是必須等待類似 loading 空畫面跑出來，才能在更新畫面，所以會更推薦在 componentDidMount 做 fetch api。\n\n```js\nget­Derived­State­From­Props(nextProps, prevState) // 新增\n```\n\nget­Derived­State­From­Props 主要是對比到 componentWillReceiveProps，get­Derived­State­From­Props 帶有兩個參數 nextProps, prevState，更新後的 props，先前的 state，這個 method 會在初始 render 調用，還有父元件重新 render，也會調用到。\n\n還有當你使用了 get­Derived­State­From­Props，要更新 state 就需要回傳物件，如果不更新就必須回傳 null。\n\nPS：當你使用 get­Derived­State­From­Props，也同時使用 componentWillMount，WillMount 會不執行，並且 console 會傳出警告，另外就算改用 UNSAFE_componentWillMount 也不會執行。\n\n```js\nrender();\n```\n\n執行 setState、更新父元件傳遞的 props，都會執行 render()，假設 shouldComponentUpdate()回傳 false，則是阻止 render 執行。使用 render 必須回傳 react element(JSX、createClass、react 元件)、或 Fragment、Portals(可以綁定 render 到其他 Dom root)、如果不回傳內容則回傳 boolean、或是 null。\n\n然後使用 render 盡量保持 pure，例如盡量少在這邊額外處理 props 以及 state，在外面處理保持 render 內乾淨。\n\n```js\ncomponentDidMount();\n```\n\ncomponentDidMount 會在 render 執行完成後調用。這應該是最多人用到的生命週期，舉凡綁定 DOM 事件，執行 ajax，多半會在這邊使用。提醒在這邊使用 setState 會迫使 render 執行兩次，盡量在 constructor 內設定好初始 state，避免過多 render 執行。\n\n另外提醒在這邊綁定 DOM eventListener，記得在 willUnMount 取消綁定 EventListener，如果重新 render 元件會再次執行 DidMount，造成過多的綁定事件。\n\n## Updating\n\n主要是在父元件更新傳遞的 props，或是元件中使用到 setState，會開始整個 Update 的生命週期。另外 setState({xxxx},callback)，則是會在整個週期執行完成才會執行 callback。\n\n```js\ncomponentWillReceiveProps(nextProps); // 17版將丟棄\n```\n\ncomponentWillReceiveProps(nextProps)，會回傳更新過的 props，並且可以使用 setState 來更新 state，提醒在這邊使用 setstate，並不會驅使重跑 componentWillReceiveProps，因為 ReceiveProps 只會在更新傳遞的 props 時被調用。\n\nreact 官方是創建 get­Derived­State­From­Prop 來替代掉 WillReceiveProps，主要明顯差異在於 get­Derived­State­From­Prop 必須使用 static，且會在 Mounting 階段執行，\b\b\b 但是會自動傳遞更新 state，而 componentWillReceiveProps 則是純粹執行，\b 不依靠 return 更新。\n\n```js\nstatic getDerivedStateFromProps(nextProps, prevState) // 新增\n```\n\nUpdating 階段中，getDerivedStateFromProps 則是在父元件更新傳遞的 props 時調用，提醒一下這時候 this.props state 還會是未更新的。\n\n```js\nshouldComponentUpdate(nextProps, nextState);\n```\n\n執行 receive props 後調用，這時候 this.props state 還會是未更新的。主要是判斷元件是否要往下繼續執行 willUpdate、render、componentDidUpdate，如果回傳 false，則會中斷整個更新循環，回傳 true 則是繼續往下執行，默認值為 true。\n\n一般會使用 shouldComponentUpdate 來優化效能，避免執行沒必要的 render。\n\n```js\ncomponentWillUpdate（nextProps, nextState) // 17版將丟棄\n```\n\nUpdate 到 render 前最後一個，\b 提醒在這邊使用 setState 的話，會導致重跑回 update 的生命週期，然後在跑到 componentWillUpdate，若沒有設定好判斷，就會再 setState，再重跑回一遍，變成反覆 infinite 執行。\n\n```js\nrender;\n```\n\nUpdate 階段中開始處理 react 的畫面架構。提醒在這邊 setState 也同樣會重跑 Update，也同樣不建議在這邊執行 setState，容易產生無限迴圈。\n\n其餘跟 Mounting 階段一樣，回傳 react element，或是 react 相關的物件。\n\n```js\ngetSnapshotBeforeUpdate(prevProps, prevState); // 新增\n```\n\n能夠抓取 render 到執行渲染畫面更新前，所保持的畫面狀態，然後再傳第一個新值給 componentDidUpdate 當參數使用。\n\n```js\ncomponentDidUpdate(prevProps, prevState, snapshot);\n```\n\nUpdating 階段最後一個執行，在畫面渲染更新後調用，新版本的還多加 getSnapshotBeforeUpdate 傳遞的參數。\n\n在這邊可以處理 call api 動作，或是 setState，促使重新更新，但提醒記得要判斷執行時機，否則一樣會進入無限迴圈。\n\n## Unmounting\n\n移除的時候會執行這個生命週期\n\n```js\ncomponentWillUnmount();\n```\n\n元件要被移除的時候會執行，可以做清除綁定 eventlistener，或是清除 cookie、local storage 等等，提醒在這邊 setState 是不會重新執行 render。\n\n以上就是關於 react 新版的生命週期，看過一遍後更能理解，在哪個階段做什麼處理會更適合。\n\n## 元件渲染順序\n\n大型開發滿常遇到這個問題，子元件先執行 render 還是父元件先，還有 lifeCycle 在父子元件的調用順序。稍微試跑了一下流程。\n請查看 console [react life Cycle parents child order](https://codesandbox.io/s/5kpvvkqx7k)\n\n- Mounting\b: 簡單講就是父元件先執行到 render 後，再來開始執行子元件的 Mounting 生命週期，最後執行完子元件的 componentDidMount 後，再回頭執行父元件的 componentDidMount。\n\n- Updating: 父元件執行到 render 後，換子元件執行直到 getSnapshotBeforeUpdate()，會再回父元件執行 getSnapshotBeforeUpdate()，然後再執行子元件的 componentDidUpdate，再回父元件執行 componentDidUpdate。\n\n- UnMounting: 父元件先執行 componentWillUnmount，再來是子元件執行。\n\n以上就是關於 react 的新版生命週期，還有父子元件執行的順序。實際研究才發現各階段德每個 method 有許多細節，例如說 mounting 階段，componentWillMount 執行 fetch api，因為他只會在第一次 Mounting 被調用的特性，如果是抓取後續不會更新的資料，其實也是一種選擇，但今天如果你後面還可能會再次 call api，或許 componentDidMount 會更適合使用。\n\n## 出處\n\n[React Life Cycle 生命週期更新版，父子元件執行順序](https://iandays.com/2018/07/27/reactlife/index.html)\n"},252:function(module,exports){module.exports="# React 的 PropTypes 使用方法\n\npropTypes 使用來規範元件 Props 的型別與必需狀態\n\n```js\nvar Test = React.createClass({\n\tpropTypes: {\n\t\t// required\n\t\trequiredFunc: React.PropTypes.func.isRequired,\n\t\trequiredAny: React.PropTypes.any.isRequired,\n\t\t// primitives, optional by default\n\t\tbool: React.PropTypes.bool,\n\t\tfunc: React.PropTypes.func,\n\t\tnumber: React.PropTypes.number,\n\t\tstring: React.PropTypes.string,\n\t},\n\trender() {\n\t\treturn <div />;\n\t},\n});\n\nvar component = React.render(\n\t<Test requiredFunc=\"bar\" bool=\"true\" requiredAny=\"a\" />,\n\tdocument.body\n);\n```\n\n若沒有按照規範，會顯示警告\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/reactFile/image/warningPropTypes.png?raw=true)\n\n## React.PropTypes 的種類\n\n```js\nReact.PropTypes.array           // 陣列\n\nReact.PropTypes.bool.isRequired // Boolean 且必要。\n\nReact.PropTypes.func            // 函式\n\nReact.PropTypes.number          // 數字\n\nReact.PropTypes.object          // 物件\n\nReact.PropTypes.string          // 字串\n\nReact.PropTypes.node            // 任何類型的: numbers, strings, elements 或者任何這種類型的陣列\n\nReact.PropTypes.element         // React 元素\n\nReact.PropTypes.instanceOf(XXX) // 某種XXX類別的實體\n\nReact.PropTypes.oneOf(['foo', 'bar']) // 其中一個字串\n\nReact.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]) // 其中一種格式類型\n\nReact.PropTypes.arrayOf(React.PropTypes.string)  // 某種類型的陣列(字串類型)\n\nReact.PropTypes.objectOf(React.PropTypes.string) // 具有某種屬性類型的物件(字串類型)\n\nReact.PropTypes.shape({                          // 是否符合指定格式的物件\n  color: React.PropTypes.string,\n  fontSize: React.PropTypes.number\n});\n\nReact.PropTypes.any.isRequired  // 可以是任何格式，且必要。\n\n// 自定義格式(當不符合的時候，會顯示Error)\n\n// 不要用`console.warn` 或者 throw, 因为它在`oneOfType` 的情况下無效。\n\ncustomPropType: function(props, propName, componentName) {\n  if (!/^[0-9]/.test(props[propName])) {\n    return new Error('Validation failed!');\n  }\n}\n```\n\n## getDefaultProps\n\n當父元件沒有提供 props 的屬性時，可以採用 getDefaultProps，預設 props 屬性的方式，讓元件使用預設的設定值，確保有 props 帶入。\n\n```js\nvar ComponentWithDefaultProps = React.createClass({\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tvalue: 'default value',\n\t\t};\n\t},\n\t/* ... */\n});\n```\n\n## 出處\n\n[Reactjs 的 PropTypes 使用方法](http://jamestw.logdown.com/posts/257890-257890-reactjs-prop)\n"},253:function(module,exports){module.exports="# React Higher Order Components (高階組件) 初探觀念\n\n高階組件是一個函數，能夠接受一個組件並返回一個新的組件。\n\n### stateless component\n\nps.以下混雜使用 es6 解構、展開運算子(Spread Operator)寫法，在 react 中處理大量 props 很方便。\n\n```js\n// stateless component  預設props會作為參數\nfunction NameCard(props) {\n\treturn <h2>Hello,{props.name}</h2>;\n}\n\n// 接到一個參數的元件 然後加上props 回傳有加入props的元件\nfunction Warpper(Item) {\n\tconst props = { name: 'Chu' };\n\treturn <Item {...props} />;\n}\n\nconst element = Warpper(NameCard);\n\nReactDOM.render(element, document.getElementById('root'));\n\n// 結果為：Hello,Chu\n```\n\n### HOC component\n\nps.es6 arrow function 產生 return function 邏輯\n\n```js\nconst Wrapper = a => b => {\n\tconsole.log(a, b);\n};\n\n// babel 會編譯為如下\nvar Wrapper = function Wrapper(a) {\n\treturn function(b) {\n\t\tconsole.log(a, b);\n\t};\n};\n```\n\n接下來就改使用 return function 來傳遞額外資料\n\n```js\n// 建立 Person 元件\nfunction Person(props) {\n\tconst { name, age, status } = props;\n\treturn (\n\t\t<h1>\n\t\t\tHello, {name} is {age} years old,ohhh and so {status}\n\t\t</h1>\n\t);\n}\n\n// 建構包裹的function\nconst Warpper = child => props => {\n\t// 加入物件 status 判斷age 大於18 true=>產生old false =>產生young\n\tprops = { ...props, status: props.age > 18 ? 'old' : 'young' };\n\treturn child({ ...props });\n};\n\nconst person1 = { name: 'ian', age: 28 };\nconst element = Warpper(Person)(person1);\n\nReactDOM.render(element, document.getElementById('root'));\n\n// 結果為：Hello, ian is 28 years old,ohhhh so old\n```\n\n核心概念就是將元件包裹上我們想要增加的屬性，舉凡是 props、lifecycle 等等，我們可以將許多元件共用的函式，整理建立一個專門用來處理 HOC 的 function，然後各元件重複使用。redux 的 connect 也是同樣使用 HOC 的觀念，將 mapStateToProps、mapDispatchToProps 在處理成我們要的 props 傳遞給元件。\n\n## 出處\n\n[React Higher Order Components 初探觀念](https://iandays.com/2018/05/08/reacthoc/index.html)\n"},254:function(module,exports){module.exports='# React 對表單元素的 prop 設置值\n\n| 元件                        | 值                     | 改變回調   | 回調中的新值           |\n| --------------------------- | ---------------------- | ---------- | ---------------------- |\n| `<input type="text" />`     | `value="string"`       | `onChange` | `event.target.value`   |\n| `<input type="checkbox" />` | `checked={boolean}`    | `onChange` | `event.target.checked` |\n| `<input type="radio" />`    | `checked={boolean}`    | `onChange` | `event.target.checked` |\n| `<textarea />`              | `value="string"`       | `onChange` | `event.target.value`   |\n| `<select />`                | `value="option value"` | `onChange` | `event.target.value`   |\n\n## 不受控制的\n\n不受控制的輸入就像傳統的 HTML 表單輸入：\n\n```js\nclass Form extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n他們記得你輸入的內容。然後，您可以使用 ref 獲取其值。例如，在 onClick 按鈕的處理程序中：\n\n```js\nclass Form extends Component {\n\thandleSubmitClick = () => {\n\t\tconst name = this._name.value;\n\t\t// do something with `name`\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={input => (this._name = input)} />\n\t\t\t\t<button onClick={this.handleSubmitClick}>Sign up</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n這是實現表單輸入的最簡單方法。但它並不那麼強大\n\n## 受控制的\n\n通常，呈現輸入的組件（也稱為表單組件）將其保存在 state：\n\n```js\nclass Form extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tname: \'\',\n\t\t};\n\t}\n\n\thandleNameChange = event => {\n\t\tthis.setState({ name: event.target.value });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype="text"\n\t\t\t\t\tvalue={this.state.name}\n\t\t\t\t\tonChange={this.handleNameChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n（當然，它可以處於另一個組件的狀態，甚至可以處於單獨的狀態存儲中，如 Redux。）\n\n每次鍵入新字符時都會 handleNameChange 被調用。它接受輸入的新值並將其設置為狀態。\n\n- 它最初是一個空字符串 - \'\'。\n\n- 您鍵入 a 並 handleNameChange 獲取 a 並調用 setState。然後重新呈現輸入以具有值 a。\n\n- 你輸入 b。handleNameChange 獲取值 ab 並將其設置為狀態。現在再次重新渲染輸入 value="ab"。\n\n這意味著您的數據（狀態）和 UI（輸入）始終保持同步。狀態為輸入提供值，輸入要求 Form 更改當前值。\n\n## 受控與不受控優缺點\n\n| 特徵                                                                                   | 不受控制 | 受控制 |\n| -------------------------------------------------------------------------------------- | -------- | ------ |\n| 一次性價值檢索（例如提交時）                                                           | V        | V      |\n| [在提交時驗證](https://goshakkk.name/submit-time-validation-react/)                    | V        | V      |\n| [即時現場驗證](https://goshakkk.name/instant-form-fields-validation-react/)            | X        | V      |\n| [有條件地禁用提交按鈕](https://goshakkk.name/form-recipe-disable-submit-button-react/) | X        | V      |\n| 強制執行輸入格式                                                                       | X        | V      |\n| 一個數據的幾個輸入                                                                     | X        | V      |\n| [動態輸入](https://goshakkk.name/array-form-inputs/)                                   | X        | V      |\n\n## 出處\n\n[React 中的受控和不受控制的表單輸入不必復雜](https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/)\n'},255:function(module,exports){module.exports="# React TodoList Example\n\n自己練習的 React TodoList\n\n範疇：新增、修改、刪除、編輯、顯示已勾選、顯示未勾選、顯示全部\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/reactFile/image/todoList.png?raw=true)\n\n可了解 Action -> Store -> View 原理\n\n## Sources Code\n\n#### containers/todoList/index.js\n\n```js\nimport React, { Component } from 'react';\nimport './index.css';\nimport PropTypes from 'prop-types';\nimport CreateTodo from '../../components/createTodo';\nimport TodoList from '../../components/todoList';\nimport NavButton from '../../components/navButton';\nimport { connect } from 'react-redux';\nimport {\n\taddTodo,\n\tviewFilter,\n\ttoggleTodo,\n\tdeltetTodo,\n\teditTodo,\n} from '../../actions';\n\nclass TodoListMain extends Component {\n\taddTodoFunc = inputValue => {\n\t\tconst { addTodo } = this.props;\n\t\taddTodo(inputValue);\n\t};\n\n\tchanckFilter = type => {\n\t\tconst { viewFilter } = this.props;\n\t\tviewFilter(type);\n\t};\n\n\ttoggleTodoFunc = id => {\n\t\tconst { toggleTodo } = this.props;\n\t\ttoggleTodo(id);\n\t};\n\n\tdeltetTodoFunc = id => {\n\t\tconst { deltetTodo } = this.props;\n\t\tdeltetTodo(id);\n\t};\n\n\teditTodoFunc = (id, value) => {\n\t\tconst { editTodo } = this.props;\n\t\teditTodo(id, value);\n\t};\n\n\trender() {\n\t\tconst { todoList, showFilter } = this.props;\n\t\treturn (\n\t\t\t<div className=\"todoList_main\">\n\t\t\t\t<CreateTodo addTodoFunc={this.addTodoFunc} />\n\t\t\t\t<NavButton chanckFilterFunc={this.chanckFilter} />\n\t\t\t\t<TodoList\n\t\t\t\t\tlistData={todoList}\n\t\t\t\t\tshowFilter={showFilter}\n\t\t\t\t\ttoggleTodoFunc={this.toggleTodoFunc}\n\t\t\t\t\tdeltetTodoFunc={this.deltetTodoFunc}\n\t\t\t\t\teditTodoFunc={this.editTodoFunc}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nTodoListMain.propTypes = {\n\taddTodo: PropTypes.func,\n\tviewFilter: PropTypes.func,\n\ttodoList: PropTypes.array,\n\tshowFilter: PropTypes.string,\n\ttoggleTodo: PropTypes.func,\n\tdeltetTodo: PropTypes.func,\n\teditTodo: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttodoList: state.todoData,\n\t\tshowFilter: state.viewFilter,\n\t};\n};\n\nconst action = {\n\taddTodo,\n\tviewFilter,\n\ttoggleTodo,\n\tdeltetTodo,\n\teditTodo,\n};\n\nexport default connect(\n\tmapStateToProps,\n\taction\n)(TodoListMain);\n```\n\ncomponents/createTodo/index.js\n\n```js\nimport React, { Component } from 'react';\nimport { CreateButton } from './styled';\n\nconst inputStyle = {\n\tborderRadius: '3px',\n\tpadding: '6px 3px',\n\tbackground: 'transparent',\n\tcolor: '#000',\n\tborder: '1px solid #d0d0d0',\n\tcursor: 'pointer',\n};\n\nclass CreateTodo extends Component {\n\taddTodoList = e => {\n\t\tconst { addTodoFunc } = this.props;\n\t\te.preventDefault();\n\t\tlet input = this.refs.todoListInput;\n\t\tlet inputValue = input.value;\n\t\taddTodoFunc(inputValue);\n\t\tinput.value = '';\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.addTodoList}>\n\t\t\t\t<input style={inputStyle} type=\"text\" ref=\"todoListInput\" />\n\t\t\t\t<CreateButton type=\"submit\">新增</CreateButton>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default CreateTodo;\n```\n\ncomponents/createTodo/styled.js\n\n```js\nimport styled, { css } from 'styled-components/';\n\nexport const Li = styled.li`\n\tmargin-bottom: 5px;\n\n\t&:hover {\n\t\tcolor: blue;\n\t}\n`;\n\nexport const Input = styled.input`\n\tmargin-right: 6px;\n`;\n\nexport const Button = styled.button`\n  border-radius: 3px;\n  padding: 5px 10px;\n  margin: 0 1em;\n  background: transparent;\n  color: #000;\n  border: 1px solid #d0d0d0;\n  cursor: pointer;\n\n  ${props =>\n\t\tprops.all &&\n\t\tcss`\n\t\t\tmargin-left: 0;\n\t\t`}\n\n  ${props =>\n\t\tprops.completed &&\n\t\tcss`\n\t\t\tbackground: #34abca;\n\t\t\tcolor: #fff;\n\t\t\tborder: 1px solid #34abca;\n\t\t`}\n\n  ${props =>\n\t\tprops.unCompleted &&\n\t\tcss`\n\t\t\tbackground: red;\n\t\t\tcolor: #fff;\n\t\t\tborder: 1px solid red;\n\t\t`}\n`;\n\nexport const CreateButton = styled.button`\n\tborder-radius: 3px;\n\tpadding: 5px 10px;\n\tmargin-left: 10px;\n\tbackground: transparent;\n\tcolor: #000;\n\tborder: 1px solid #d0d0d0;\n\tcursor: pointer;\n`;\n\nexport const DelButton = styled.button`\n\tborder-radius: 3px;\n\tpadding: 5px 10px;\n\tmargin-left: 6px;\n\tbackground: red;\n\tcolor: #fff;\n\tborder: 1px solid red;\n\tcursor: pointer;\n`;\n\nexport const EditInput = styled.input`\n\tborder-radius: 3px;\n\tpadding: 6px 3px;\n\tbackground: transparent;\n\tcolor: #000;\n\tborder: 1px solid #d0d0d0;\n\tcursor: pointer;\n`;\n\nexport const NavDiv = styled.div`\n\tmargin: 15px 0;\n`;\n\nexport const Hr = styled.hr`\n\tmargin: 14px 0;\n`;\n\nexport const Ul = styled.ul`\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style-type: none;\n`;\n```\n\ncomponents/todoList/index.js\n\n```js\nimport React, { Component } from 'react';\nimport TodoListItem from './todoListItem';\nimport { Ul } from './styled';\n\nclass TodoList extends Component {\n\trenderList = () => {\n\t\tconst {\n\t\t\tlistData,\n\t\t\tshowFilter,\n\t\t\ttoggleTodoFunc,\n\t\t\tdeltetTodoFunc,\n\t\t\teditTodoFunc,\n\t\t} = this.props;\n\n\t\tif (listData.length === 0) return null;\n\n\t\tconst renderListData = listData.filter((items, index) =>\n\t\t\tshowFilter === 'all' ? true : items.completed === showFilter\n\t\t);\n\n\t\treturn renderListData.map(items => (\n\t\t\t<TodoListItem\n\t\t\t\tkey={items.id}\n\t\t\t\tdata={items}\n\t\t\t\ttoggleTodoFunc={toggleTodoFunc}\n\t\t\t\tdeltetTodoFunc={deltetTodoFunc}\n\t\t\t\teditTodoFunc={editTodoFunc}\n\t\t\t/>\n\t\t));\n\t};\n\n\trender() {\n\t\treturn <Ul>{this.renderList()}</Ul>;\n\t}\n}\n\nexport default TodoList;\n```\n\ncomponents/todoListItem/index.js\n\n```js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Li, Input, Button, DelButton, EditInput } from './styled';\n\nclass TodoListItem extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: props.data.text,\n\t\t\tedit: false,\n\t\t};\n\t}\n\tlineThrough = id => {\n\t\tconst { toggleTodoFunc } = this.props;\n\t\ttoggleTodoFunc(id);\n\t};\n\tdeltetItem = id => {\n\t\tconst { deltetTodoFunc } = this.props;\n\t\tdeltetTodoFunc(id);\n\t};\n\teditItem = event => {\n\t\tthis.setState({\n\t\t\tvalue: event.target.value,\n\t\t});\n\t};\n\teditItemEnd = id => {\n\t\tconst { value } = this.state;\n\t\tconst { editTodoFunc } = this.props;\n\t\teditTodoFunc(id, value);\n\t\tthis.setState({ edit: false });\n\t};\n\teditItemView = () => {\n\t\tthis.setState({ edit: true });\n\t};\n\trenderEdit = (edit, id, text) => {\n\t\tif (edit) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<EditInput type=\"text\" value={text} onChange={this.editItem} />\n\t\t\t\t\t<Button onClick={() => this.editItemEnd(id)}>完成編輯</Button>\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn <span onClick={this.editItemView}>{text}</span>;\n\t};\n\n\trender() {\n\t\tconst { edit, value } = this.state;\n\t\tconst { id, completed } = this.props.data;\n\t\treturn (\n\t\t\t<Li\n\t\t\t\tstyle={{\n\t\t\t\t\ttextDecoration: completed === 'completed' ? 'line-through' : 'none',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={completed === 'completed'}\n\t\t\t\t\tonChange={() => this.lineThrough(id)}\n\t\t\t\t\treadOnly\n\t\t\t\t/>\n\t\t\t\t{this.renderEdit(edit, id, value)}\n\t\t\t\t<DelButton onClick={() => this.deltetItem(id)}>刪除</DelButton>\n\t\t\t</Li>\n\t\t);\n\t}\n}\n\nTodoListItem.propTypes = {\n\tid: PropTypes.number,\n\tcompleted: PropTypes.bool,\n};\n\nexport default TodoListItem;\n```\n\ncomponents/navButton/index.js\n\n```js\nimport React, { Component } from 'react';\nimport { NavDiv, Button, Hr } from './styled';\n\nclass NavButton extends Component {\n\trender() {\n\t\tconst { chanckFilterFunc } = this.props;\n\t\treturn (\n\t\t\t<NavDiv>\n\t\t\t\t<Button all onClick={() => chanckFilterFunc('all')}>\n\t\t\t\t\t全顯示\n\t\t\t\t</Button>\n\t\t\t\t<Button completed onClick={() => chanckFilterFunc('completed')}>\n\t\t\t\t\t顯示勾選\n\t\t\t\t</Button>\n\t\t\t\t<Button unCompleted onClick={() => chanckFilterFunc('unCompleted')}>\n\t\t\t\t\t顯示未勾選\n\t\t\t\t</Button>\n\t\t\t\t<Hr />\n\t\t\t</NavDiv>\n\t\t);\n\t}\n}\n\nexport default NavButton;\n```\n\nactions/index.js\n\n```js\nlet nextId = 0;\n\n// 新增\nexport const ADD_TODO = 'ADD_TODO';\nexport function addTodo(text) {\n\treturn {\n\t\ttype: ADD_TODO,\n\t\tid: nextId++,\n\t\ttext,\n\t};\n}\n\n// 過濾\nexport const VIEW_FILTER = 'VIEW_FILTER';\nexport function viewFilter(filter) {\n\treturn {\n\t\ttype: VIEW_FILTER,\n\t\tfilter,\n\t};\n}\n\n// 畫線\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport function toggleTodo(id) {\n\treturn {\n\t\ttype: TOGGLE_TODO,\n\t\tid,\n\t};\n}\n\n// 刪除\nexport const DELETE_TODO = 'DELETE_TODO';\nexport function deltetTodo(id) {\n\treturn {\n\t\ttype: DELETE_TODO,\n\t\tid,\n\t};\n}\n\n// 編修\nexport const EDIT_TODO = 'EDIT_TODO';\nexport function editTodo(id, text) {\n\treturn {\n\t\ttype: EDIT_TODO,\n\t\tid,\n\t\ttext,\n\t};\n}\n```\n\nreducers/index.js\n\n```js\nimport { combineReducers } from 'redux';\nimport todoData from './todoReducer';\nimport viewFilter from './filterReducer';\n\nconst todoApp = combineReducers({\n\ttodoData,\n\tviewFilter,\n});\n\nexport default todoApp;\n```\n\nreducers/filterReducer.js\n\n```js\nconst viewFilter = (state = 'all', action) => {\n\tswitch (action.type) {\n\t\tcase 'VIEW_FILTER':\n\t\t\treturn action.filter;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default viewFilter;\n```\n\nreducers/todoReducer.js\n\n```js\nconst todoData = (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_TODO':\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\tid: action.id,\n\t\t\t\t\ttext: action.text,\n\t\t\t\t\tcompleted: 'unCompleted',\n\t\t\t\t},\n\t\t\t];\n\t\tcase 'TOGGLE_TODO':\n\t\t\treturn state.map(todoItem =>\n\t\t\t\ttodoItem.id === action.id\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...todoItem,\n\t\t\t\t\t\t\tcompleted:\n\t\t\t\t\t\t\t\ttodoItem.completed === 'unCompleted'\n\t\t\t\t\t\t\t\t\t? 'completed'\n\t\t\t\t\t\t\t\t\t: 'unCompleted',\n\t\t\t\t\t  }\n\t\t\t\t\t: todoItem\n\t\t\t);\n\t\tcase 'DELETE_TODO':\n\t\t\treturn state.filter(todoItem => !(todoItem.id === action.id));\n\t\tcase 'EDIT_TODO':\n\t\t\treturn state.map(todoItem =>\n\t\t\t\ttodoItem.id === action.id\n\t\t\t\t\t? { ...todoItem, text: action.text }\n\t\t\t\t\t: todoItem\n\t\t\t);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default todoData;\n```\n"},256:function(module,exports){module.exports="# React Higher Order Components (高階組件) 練習\n\n- 需安裝 antd 套件\n\n此範例為實際專案練習的 Sources Code，各檔案 Sources Code 位置可用關鍵字搜尋查詢。\n\n### Method.js\n\n```js\nimport React, { Component } from 'react';\nimport MoneyAmount from './MoneyAmount';\n\nclass ServiceItems extends Component {\n\trender() {\n\t\tconst moneyData = 400;\n\t\treturn <MoneyAmount title=\"金額\" data={moneyData} />;\n\t}\n}\n\nexport default ServiceItems;\n```\n\n### popoverData.js\n\n```js\nconst treeData = [\n\t{\n\t\ttitle: 'Node1',\n\t\tvalue: '0-0',\n\t\tkey: '0-0',\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttitle: 'Child Node1',\n\t\t\t\tvalue: '0-0-0',\n\t\t\t\tkey: '0-0-0',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\ttitle: 'Node2',\n\t\tvalue: '0-1',\n\t\tkey: '0-1',\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttitle: 'Child Node2',\n\t\t\t\tvalue: '0-1-0',\n\t\t\t\tkey: '0-1-0',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node3',\n\t\t\t\tvalue: '0-1-1',\n\t\t\t\tkey: '0-1-1',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\ttitle: 'Node3',\n\t\tvalue: '0-2',\n\t\tkey: '0-2',\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttitle: 'Child Node4',\n\t\t\t\tvalue: '0-2-0',\n\t\t\t\tkey: '0-2-0',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node5',\n\t\t\t\tvalue: '0-2-1',\n\t\t\t\tkey: '0-2-1',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node6',\n\t\t\t\tvalue: '0-2-2',\n\t\t\t\tkey: '0-2-2',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\ttitle: 'Node4',\n\t\tvalue: '0-3',\n\t\tkey: '0-3',\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttitle: 'Child Node7',\n\t\t\t\tvalue: '0-3-0',\n\t\t\t\tkey: '0-3-0',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node8',\n\t\t\t\tvalue: '0-3-1',\n\t\t\t\tkey: '0-3-1',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node9',\n\t\t\t\tvalue: '0-3-2',\n\t\t\t\tkey: '0-3-2',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Child Node10',\n\t\t\t\tvalue: '0-3-3',\n\t\t\t\tkey: '0-3-3',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst selectData = ['論件計酬', '時薪'];\n\nexport { treeData, selectData };\n```\n\n### var.scss\n\n```css\n/**\n * 顏色\n */\n$white: #ffffff !default;\n$black: #4a4a4a;\n\n$gray-100: #f6f6f6 !default;\n$gray-200: #dddddd !default;\n$gray-300: #979797 !default;\n\n$main-1: #f5b524 !default;\n$main-1-hover: #dea118 !default;\n$main-10: rgba(245, 181, 36, 0.1) !default;\n$main-2: #00bada !default;\n$main-2-hover: #009db7 !default;\n\n$errorTip: #e66c6c !default;\n\n/**\n * 文字大小\n * 計算器 https://www.w3schools.com/tags/ref_pxtoemconversion.asp\n */\n$font_html: 16px !default; //rem root value for html element.\n$font-base: 1rem !default;\n$font-size-5: ($font-base * 0.3125) !default;\n$font-size-6: ($font-base * 0.375) !default;\n$font-size-7: ($font-base * 0.4375) !default;\n$font-size-8: ($font-base * 0.5) !default;\n$font-size-9: ($font-base * 0.5625) !default;\n$font-size-10: ($font-base * 0.625) !default;\n$font-size-12: ($font-base * 0.75) !default;\n$font-size-13: ($font-base * 0.8125) !default;\n$font-size-14: ($font-base * 0.875) !default;\n$font-size-15: ($font-base * 0.9375) !default;\n$font-size-16: ($font-base * 1) !default;\n$font-size-17: ($font-base * 1.0625) !default;\n$font-size-18: ($font-base * 1.125) !default;\n$font-size-19: ($font-base * 1.1875) !default;\n$font-size-20: ($font-base * 1.25) !default;\n$font-size-23: ($font-base * 1.4375) !default;\n$font-size-24: ($font-base * 1.5) !default;\n$font-size-26: ($font-base * 1.6) !default;\n$font-size-30: ($font-base * 2.45) !default;\n$font-size-32: ($font-base * 2) !default;\n$font-size-34: ($font-base * 2.125) !default;\n$font-size-36: ($font-base * 2.25) !default;\n$font-size-38: ($font-base * 2.375) !default;\n$font-size-62: ($font-base * 3.875) !default;\n\n$sidebar: 580px;\n$message: 626px;\n\n$breakpoint-s: 720px;\n$breakpoint-m: 1120px;\n\n$font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto,\n\tUbuntu, 'Microsoft JhengHei', '微軟正黑體', Arial, sans-serif;\n```\n\n### ServiceItems.scss\n\n```css\n@import './var';\n\n.main {\n\tposition: relative;\n\ttext-align: left;\n\tpadding: 15px 15px 20px;\n\tborder: 3px solid $gray-100;\n\twidth: 33%;\n\t&:hover {\n\t\tborder-radius: 6px;\n\t\tborder: 3px solid $gray-200;\n\t\tpadding: 15px 15px 20px;\n\t}\n\t.row {\n\t\tmargin-top: 10px;\n\t\tfont-size: $font-size-13;\n\t}\n\t:global {\n\t\t.ant-input {\n\t\t\tborder: none;\n\t\t\tbackground: transparent;\n\t\t\tfont-size: $font-size-20;\n\t\t\tcolor: $black;\n\t\t\tpadding-left: 0;\n\t\t\tmargin-bottom: 10px;\n\t\t}\n\t\ttextarea.ant-input {\n\t\t\tfont-size: $font-size-13;\n\t\t}\n\t\t.ant-select-enabled {\n\t\t\tposition: relative;\n\t\t\t&::after {\n\t\t\t\tcontent: '∨';\n\t\t\t\tfont-size: $font-size-10;\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 10px;\n\t\t\t\ttop: 8px;\n\t\t\t\tcolor: $black;\n\t\t\t}\n\t\t\t&.ant-select-focused {\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '∧';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tright: 10px;\n\t\t\t\t\ttop: 8px;\n\t\t\t\t\tcolor: $black;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.img {\n\t\theight: 200px;\n\t\tmargin-bottom: 15px;\n\t\tborder-radius: 8px;\n\t\toverflow: hidden;\n\t\tposition: relative;\n\t\t:global {\n\t\t\t.edit-wrapper {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.children-main {\n\t\t\t\timg {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n.data {\n\tcursor: pointer;\n\tcolor: $black;\n}\n.btnWrap {\n\tmargin-top: 10px;\n\ttext-align: right;\n}\n```\n\n### ui/button.js\n\n```js\nimport React from 'react';\nimport { Button } from 'antd';\nimport styles from './Button.scss';\nimport 'antd/dist/antd.css';\n\nconst Btn = ({ href, type, children, htmlType, onClick, loading }) => {\n\tconst isDisagled = type === 'disabled' ? 'disabled' : '';\n\treturn (\n\t\t<div className={`${styles.btn}`}>\n\t\t\t<Button\n\t\t\t\ttype={type}\n\t\t\t\thref={href}\n\t\t\t\tdisabled={isDisagled}\n\t\t\t\thtmlType={htmlType}\n\t\t\t\tonClick={onClick}\n\t\t\t\tloading={loading}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport default Btn;\n```\n\n### ui/Button.scss\n\n```css\n@import '../scss/var';\n\n.btn {\n\tdisplay: inline-block;\n\t:global {\n\t\t.ant-btn {\n\t\t\tborder-radius: 16px !important;\n\t\t\tbox-shadow: none !important;\n\t\t\ttext-shadow: none !important;\n\t\t\tfont-weight: normal !important;\n\t\t\tbackground-color: $white !important;\n\t\t\tborder: 1px solid $gray-200 !important;\n\t\t\tcolor: $black;\n\t\t\ti {\n\t\t\t\tcolor: $gray-300;\n\t\t\t}\n\t\t\t&:hover {\n\t\t\t\tborder: 1px solid $main-1 !important;\n\t\t\t\tcolor: $main-1 !important;\n\t\t\t\ti {\n\t\t\t\t\tcolor: $main-1 !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.ant-btn-disabled,\n\t\t.ant-btn.disabled,\n\t\t.ant-btn[disabled],\n\t\t.ant-btn-disabled:hover,\n\t\t.ant-btn.disabled:hover,\n\t\t.ant-btn[disabled]:hover,\n\t\t.ant-btn-disabled:focus,\n\t\t.ant-btn.disabled:focus,\n\t\t.ant-btn[disabled]:focus,\n\t\t.ant-btn-disabled:active,\n\t\t.ant-btn.disabled:active,\n\t\t.ant-btn[disabled]:active,\n\t\t.ant-btn-disabled.active,\n\t\t.ant-btn.disabled.active,\n\t\t.ant-btn[disabled].active {\n\t\t\tbackground-color: $gray-200 !important;\n\t\t\tborder: 1px solid $gray-200 !important;\n\t\t\tcolor: $gray-300 !important;\n\t\t}\n\t\t.ant-btn-primary {\n\t\t\tbackground-color: $main-1 !important;\n\t\t\tborder: 1px solid $main-1 !important;\n\t\t\tcolor: $white !important;\n\t\t\t&:hover {\n\t\t\t\tbackground-color: $main-1-hover !important;\n\t\t\t\tborder: 1px solid $main-1-hover !important;\n\t\t\t\tcolor: $white !important;\n\t\t\t}\n\t\t}\n\t\t.ant-btn-danger {\n\t\t\tbackground-color: $main-2 !important;\n\t\t\tborder: 1px solid $main-2 !important;\n\t\t\tcolor: $white !important;\n\t\t\ti {\n\t\t\t\tcolor: $white !important;\n\t\t\t}\n\t\t\t&:hover {\n\t\t\t\tbackground-color: $main-2-hover !important;\n\t\t\t\tborder: 1px solid $main-2-hover !important;\n\t\t\t\tcolor: $white !important;\n\t\t\t\ti {\n\t\t\t\t\tcolor: $white !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Row.js\n\n```js\nimport React, { Component, Fragment } from 'react';\nimport { Col, Popover } from 'antd';\nimport RowHOC from './RowHOC';\n\nclass Row extends Component {\n\trender() {\n\t\tconst { title, content, children, rowButton, isOpen } = this.props;\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Popover\n\t\t\t\t\tcontent={content}\n\t\t\t\t\ttitle={`服務${title}`}\n\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\tplacement=\"bottomLeft\"\n\t\t\t\t\tvisible={isOpen}\n\t\t\t\t\tonVisibleChange={rowButton}\n\t\t\t\t>\n\t\t\t\t\t<Col span={18} push={6}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Col>\n\t\t\t\t</Popover>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport const RowLayout = RowHOC(Row);\n```\n\n### ServiceItems.scss\n\n```css\n@import '../scss/var';\n\n.main {\n\tposition: relative;\n\ttext-align: left;\n\tpadding: 15px 15px 20px;\n\tborder: 3px solid $gray-100;\n\twidth: 33%;\n\t&:hover {\n\t\tborder-radius: 6px;\n\t\tborder: 3px solid $gray-200;\n\t\tpadding: 15px 15px 20px;\n\t}\n\t.row {\n\t\tmargin-top: 10px;\n\t\tfont-size: $font-size-13;\n\t}\n\t:global {\n\t\t.ant-input {\n\t\t\tborder: none;\n\t\t\tbackground: transparent;\n\t\t\tfont-size: $font-size-20;\n\t\t\tcolor: $black;\n\t\t\tpadding-left: 0;\n\t\t\tmargin-bottom: 10px;\n\t\t}\n\t\ttextarea.ant-input {\n\t\t\tfont-size: $font-size-13;\n\t\t}\n\t\t.ant-select-enabled {\n\t\t\tposition: relative;\n\t\t\t&::after {\n\t\t\t\tcontent: '∨';\n\t\t\t\tfont-size: $font-size-10;\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 10px;\n\t\t\t\ttop: 8px;\n\t\t\t\tcolor: $black;\n\t\t\t}\n\t\t\t&.ant-select-focused {\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '∧';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tright: 10px;\n\t\t\t\t\ttop: 8px;\n\t\t\t\t\tcolor: $black;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.img {\n\t\theight: 200px;\n\t\tmargin-bottom: 15px;\n\t\tborder-radius: 8px;\n\t\toverflow: hidden;\n\t\tposition: relative;\n\t\t:global {\n\t\t\t.edit-wrapper {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.children-main {\n\t\t\t\timg {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n.data {\n\tcursor: pointer;\n\tcolor: $black;\n}\n.btnWrap {\n\tmargin-top: 10px;\n\ttext-align: right;\n}\n```\n\n### RowHOC.js\n\n```js\nimport React from 'react';\nimport { Row, Col } from 'antd';\nimport styles from './ServiceItems.scss';\n\nconst RowHOC = WrappedComponent => ({ children, ...props }) => (\n\t<Row className={styles.row}>\n\t\t<WrappedComponent {...props}>{children}</WrappedComponent>\n\t\t<Col span={6} pull={18}>\n\t\t\t服務{props.title}：\n\t\t</Col>\n\t</Row>\n);\n\nexport default RowHOC;\n```\n\n### MoneyAmount.js\n\n```js\nimport React, { Component, Fragment } from 'react';\nimport { selectData } from './popoverData.js';\nimport styles from './ServiceItems.scss';\nimport Button from '../ui/button';\nimport { RowLayout } from './Row';\n\nconst selectChange = (value, bool) => {\n\tconsole.log(`selected ${value} ${bool}`);\n};\n\nconst options = selectData.map((item, index) => (\n\t<Option key={index} value={item}>\n\t\t{item}\n\t</Option>\n));\n\nconst inputNumberChange = value => {\n\tconsole.log('changed', value);\n};\n\nconst GetData = ({ data }) => (data ? `時薪 ${data} 元起` : '不拘');\n\nclass MoneyAmount extends Component {\n\tstate = {\n\t\tvalue: this.props.data,\n\t\tisOpen: false,\n\t};\n\n\thandleCheck = () => {\n\t\tconst { isOpen } = this.state;\n\t\tthis.setState({ isOpen: !isOpen });\n\t};\n\n\trenderContent = (\n\t\t<Fragment>\n\t\t\t<Select defaultValue={selectData[0]} onChange={selectChange}>\n\t\t\t\t{options}\n\t\t\t</Select>{' '}\n\t\t\t台幣 <InputNumber defaultValue={0} onChange={inputNumberChange} /> 元起\n\t\t\t<div className={styles.btnWrap}>\n\t\t\t\t<Button onClick={this.handleCheck} type=\"primary\">\n\t\t\t\t\t確認\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n\n\trender() {\n\t\tconst { title } = this.props;\n\t\tconst { isOpen, value } = this.state;\n\t\treturn (\n\t\t\t<RowLayout\n\t\t\t\ttitle={title}\n\t\t\t\tcontent={this.renderContent}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\trowButton={this.handleCheck}\n\t\t\t>\n\t\t\t\t<span className={styles.data}>\n\t\t\t\t\t<GetData data={value} />\n\t\t\t\t</span>\n\t\t\t</RowLayout>\n\t\t);\n\t}\n}\n\nexport default MoneyAmount;\n```\n"},257:function(module,exports){module.exports="# React Higher Order Components (高階組件) API\n\n在這份 API 文件中，一個 higher-order component (HOC) 指的是一個 function 接受一個單一的 React component 並回傳一個新的 React component。\n\n```js\nconst EnhancedComponent = hoc(BaseComponent);\n```\n\n這種形式讓 HOC（有時候稱為 enhancers）可以被組合：\n\n```js\nconst composedHoc = compose(\n\thoc1,\n\thoc2,\n\thoc3\n);\n\n// 相同於\nconst composedHoc = BaseComponent => hoc1(hoc2(hoc3(BaseComponent)));\n```\n\n大部分的 Recompose helper 都是 function，並回傳 higher-order component：\n\n```js\nconst hoc = mapProps(ownerProps => childProps);\nconst EnhancedComponent = hoc(BaseComponent);\n\n// 相同於\nconst EnhancedComponent = mapProps(ownerProps => childProps)(BaseComponent);\n```\n\n有一些像是 pure 本身就是 higher-order component：\n\n```js\nconst PureComponent = pure(BaseComponent);\n```\n\n## Higher-order components\n\n### mapProps()\n\n```js\nmapProps(\n  propsMapper: (ownerProps: Object) => Object,\n)\n// HigherOrderComponent\n```\n\n接受一個 function 將所有 `props map` 到 base component 成為一個新的 props 集合。\n\nmapProps() 和 functional 函式庫像是 [lodash/fp](https://github.com/lodash/lodash/tree/npm/fp) 可以做很好的搭配。例如，Recompose 沒有一個 `omitProps() function`，但你可以使用 loadsh-fp 的 `omit()` 輕鬆地建立一個：\n\n```js\nconst omitProps = keys => mapProps(props => omit(keys, props));\n\n// 因為 loadsh-fp 的 curry 化，這相同於\nconst omitProps = compose(\n\tmapProps,\n\tomit\n);\n```\n\n### withProps()\n\n```js\nwithProps(\n  createProps: (ownerProps: Object) => Object | Object\n)\n// HigherOrderComponent\n```\n\n除了建立新的 props 被 merge 到 owner props，相似於 `mapProps()`。\n\n你也可以直接傳送一個 props object 而不是 function。在這個形式下，除了被提供的 props 優先於 owner 的 props，它類似於 `defaultProps()`。\n\n### withPropsOnChange()\n\n```js\nwithPropsOnChange(\n  shouldMapOrKeys: Array<string> | (props: Object, nextProps: Object) => boolean,\n  createProps: (ownerProps: Object) => Object\n)\n// HigherOrderComponent\n```\n\n類似 `withProps()`，當其中一個 owner prop 透過 `shouldMapOrKeys` 被指定時，僅建立新的 prop。這可以確保不必要的昂貴計算，當必要時才會在內部執行 `createProps()`。\n\n除了一個 prop keys 的陣列，第一個參數也可以是一個回傳布林值的 function，給定目前的 props 和 next props。當 `createProps()` 應該被呼叫時，允許你自訂 props。\n\n### withHandlers()\n\n```js\nwithHandlers(\n  handlerCreators: {\n    [handlerName: string]: (props: Object) => Function\n  } |\n  handlerCreatorsFactory: (initialProps) => {\n    [handlerName: string]: (props: Object) => Function\n  }\n)\n// HigherOrderComponent\n```\n\n接受 handler creator 或是 factory function 的 object map。這些都是 higher-order function，接受一組 props 並回傳一個 function handler：\n\n允許 handler 經由 closure 去存取目前的 props，而不需要去改變它的 signature。\n\nHandler 作為 immutable props 被傳入到 base component，它們的身份通過 render 被保留。這避免在一個 functional component 在內部建立 handler 的陷阱，導致每次 render 都會有新的 handler，打破了依賴於 prop 相等的 `shouldComponentUpdate()` 優化。這是使用 `withHandlers` 主要的理由來建立 handler，而不是使用 `mapProps` 或 `withProps` 在每次 update 時建立新的 handler。\n\n使用範例：\n\n```js\nconst enhance = compose(\n\twithState('value', 'updateValue', ''),\n\twithHandlers({\n\t\tonChange: props => event => {\n\t\t\tprops.updateValue(event.target.value);\n\t\t},\n\t\tonSubmit: props => event => {\n\t\t\tevent.preventDefault();\n\t\t\tsubmitForm(props.value);\n\t\t},\n\t})\n);\n\nconst Form = enhance(({ value, onChange, onSubmit }) => (\n\t<form onSubmit={onSubmit}>\n\t\t<label>\n\t\t\tValue\n\t\t\t<input type=\"text\" value={value} onChange={onChange} />\n\t\t</label>\n\t</form>\n));\n```\n\n### defaultProps()\n\n```js\ndefaultProps(\n  props: Object\n)\n// HigherOrderComponent\n```\n\n指定預設情況下傳送給 base component 的 props。類似於 `withProps()`，除了 owner props 優先於被提供的 props。\n\n雖然它有類似的效果，使用 `defaultProps()` HoC 不 等同於在 component 上直接設定 static `defaultProps` 屬性。\n\n### renameProp()\n\n```js\nrenameProp(\n  oldName: string,\n  newName: string\n)\n// HigherOrderComponent\n```\n\n重新命名一個 prop。\n\n### renameProps()\n\n```js\nrenameProps(\n  nameMap: { [key: string]: string }\n)\n// HigherOrderComponent\n```\n\n重新命名多個 prop，使用一個 map 將舊的 prop 名稱更新為新的 prop 名稱。\n\n### flattenProp()\n\n```js\nflattenProp(\n  propName: string\n)\n// HigherOrderComponent\n```\n\n扁平化一個 prop，所以它的欄位會被展開（spread）到 props object。\n\n```js\nconst enhance = compose(\n\twithProps({\n\t\tobject: { a: 'a', b: 'b' },\n\t\tc: 'c',\n\t}),\n\tflattenProp('object')\n);\nconst Abc = enhance(BaseComponent);\n\n// Base component 接收到的 props： { a: 'a', b: 'b', c: 'c', object: { a: 'a', b: 'b' } }\n```\n\n另一個使用範例是當 `flattenProp()` 從 Relay 接收 fragment data。Relay fragment 被作為一個 props object 傳遞，你經常需要扁平化成它的組成欄位：\n\n```js\n// The `post` prop 是一個 object，有 title、author 和 content 欄位\nconst enhance = flattenProp('post');\nconst Post = enhance(({ title, content, author }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<h2>By {author.name}</h2>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n### withState()\n\n```js\nwithState(\n  stateName: string,\n  stateUpdaterName: string,\n  initialState: any | (props: Object) => any\n)\n// HigherOrderComponent\n```\n\n傳送兩個額外的 props 到 base component：一個 state 和一個 function 來更新 state 的值。state updateer 具有以下的 signature：\n\n```js\nstateUpdater<T>((prevValue: T) => T, ?callback: Function): void\nstateUpdater(newValue: any, ?callback: Function): void\n```\n\n第一個形式接受一個 function，它 map 先前的 state 成為一個新的 state。你可能想要隨著 `withHandlers()` 使用這個 state updater 來建立具體的 updater function。例如，要建立一個基礎計數功能的 Higher-Order Component：\n\n```js\nconst addCounting = compose(\n\twithState('counter', 'setCounter', 0),\n\twithHandlers({\n\t\tincrement: ({ setCounter }) => () => setCounter(n => n + 1),\n\t\tdecrement: ({ setCounter }) => () => setCounter(n => n - 1),\n\t\treset: ({ setCounter }) => () => setCounter(0),\n\t})\n);\n```\n\n第二個形式接受一個單一的值，作為新的 state。\n\n兩種形式都接受可選的第二個參數，一旦 `setState()` 完成且 component 重新 render 將會執行一個 callback function。\n\n初始的 state 是必須的。它可以是 state 值本身，或是回傳一個 function 給定初始 props 的 state。\n\n### withStateHandlers()\n\n```js\nwithStateHandlers(\n  initialState: Object | (props: Object) => any,\n  stateUpdaters: {\n    [key: string]: (state:Object, props:Object) => (...payload: any[]) => Object\n  }\n)\n```\n\n傳送 state object 屬性和 `(...payload: any[]) => Object` 形式的 immutable updater function 到 base component。\n\n每個 state updater function 接受 state、props 和 payload 並必須回傳一個新的 state 或是 undefined。新的 state 只是與先前的 state 被 shallow merge。 回傳 undefined component 不會 render 出來。\n\n範例：\n\n```js\nconst Counter = withStateHandlers(\n\t({ initialCounter = 0 }) => ({\n\t\tcounter: initialCounter,\n\t}),\n\t{\n\t\tincrementOn: ({ counter }) => value => ({\n\t\t\tcounter: counter + value,\n\t\t}),\n\t\tdecrementOn: ({ counter }) => value => ({\n\t\t\tcounter: counter - value,\n\t\t}),\n\t\tresetCounter: (_, { initialCounter = 0 }) => () => ({\n\t\t\tcounter: initialCounter,\n\t\t}),\n\t}\n)(({ counter, incrementOn, decrementOn, resetCounter }) => (\n\t<div>\n\t\t<Button onClick={() => incrementOn(2)}>Inc</Button>\n\t\t<Button onClick={() => decrementOn(3)}>Dec</Button>\n\t\t<Button onClick={resetCounter}>Reset</Button>\n\t</div>\n));\n```\n\n### withReducer()\n\n```js\nwithReducer<S, A>(\n  stateName: string,\n  dispatchName: string,\n  reducer: (state: S, action: A) => S,\n  initialState: S | (ownerProps: Object) => S\n)\n// HigherOrderComponent\n```\n\n類似於 `withState()`，但是使用 reducer function 來更新 state。一個 reducer 是一個 function，接受一個 state 和一個 action，並回傳一個新的 state。\n\n傳送兩個額外的 prop 到 base component：一個 state 的值和一個 dispatch 方法。以下有 dispatch 方法的說明：\n\n```js\ndispatch(action: Object, ?callback: Function): void\n```\n\n在新的 state 被應用後，它傳送一個 action 到 reducer。它也接受一個第二個可選的參數，一個 callback function 與一個新的 state 作為它唯一的參數。\n\n### branch()\n\n```js\nbranch(\n  test: (props: Object) => boolean,\n  left: HigherOrderComponent,\n  right: HigherOrderComponent\n)\n// HigherOrderComponent\n```\n\n接受一個 test function 和兩個 higher-order component。test function 從 owner 傳送 props。 如果回傳 true，`left` higher-order component 會被 apply 到 `BaseComponent`；反之是 `right` higher-order component。如果沒有提供 `right`，它將預設為被 wrap 的 component。\n\n### renderComponent()\n\n```js\nrenderComponent(\n  Component: ReactClass | ReactFunctionalComponent | string\n)\n// HigherOrderComponent\n```\n\n得到一個 component 並回傳一個該 component 的 higher-order 版本 component。\n\n這和另一個需要 higher-order component 的 helper 結合非常的有用，像是 branch()：\n\n```js\n// `isLoading()` 是一個 function，回傳 component 的 state 是否為 loading\nconst spinnerWhileLoading = isLoading =>\n\tbranch(\n\t\tisLoading,\n\t\trenderComponent(Spinner) // `Spinner` 是一個 React component\n\t);\n\n// 現在使用 `spinnerWhileLoading()` helper 來新增一個 loading spinner 到任何的 base component\nconst enhance = spinnerWhileLoading(\n\tprops => !(props.title && props.author && props.content)\n);\nconst Post = enhance(({ title, author, content }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<h2>By {author.name}</h2>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n### renderNothing()\n\n```js\nrenderNothing;\n// HigherOrderComponent\n```\n\n一個 higher-order component 總是回傳 null。\n\n這對於結合其他的 higher-order component 非常有用，例如 branch()：\n\n```js\n// `hasNoData()` 是一個 function，如果 component 沒有資料回傳 true\nconst hideIfNoData = hasNoData => branch(hasNoData, renderNothing);\n\n// 現在使用 `hideIfNoData()` helper 來隱藏任何的 base component\nconst enhance = hideIfNoData(\n\tprops => !(props.title && props.author && props.content)\n);\nconst Post = enhance(({ title, author, content }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<h2>By {author.name}</h2>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n### shouldUpdate()\n\n```js\nshouldUpdate(\n  test: (props: Object, nextProps: Object) => boolean\n)\n// HigherOrderComponent\n```\n\nHigher-order component 版本的 [shouldComponentUpdate()](https://reactjs.org/docs/react-component.html#shouldcomponentupdate)。test function 接受 current props 和 next props 兩者。\n\n### pure()\n\n```js\npure;\n// HigherOrderComponent\n```\n\n防止 component 更新，除非 prop 被改變。利用 shallowEqual() 來測試 prop 的改變。\n\n### onlyUpdateForKeys()\n\n```js\nonlyUpdateForKeys(\n  propKeys: Array<string>\n)\n// HigherOrderComponent\n```\n\n防止 component 更新，除非指定的 key 所對應的 prop 被更新。使用 shallowEqual() 來測試改變。\n\n這對於常見使用的 PureRenderMixin、`shouldPureComponentUpdate()` 或者是 Recompose 本身的 `pure()` helper 方法有更好的優化，因為這些 tool 比較每個 prop，而 `onlyUpdateForKeys()` 只關心所指定的 prop。\n\n範例：\n\n```js\n/**\n * 如果 owner 傳送不必要的 props（例如：一個 comment 的陣列），\n * 它不會導致 render 生命週期的浪費。\n *\n * 這是很好的解構，因為很清楚該 component 實際所關心的 props。\n */\nconst enhance = onlyUpdateForKeys(['title', 'content', 'author']);\nconst Post = enhance(({ title, content, author }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<h2>By {author.name}</h2>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n### onlyUpdateForPropTypes()\n\n```js\nonlyUpdateForPropTypes;\n// HigherOrderComponent\n```\n\n與 `onlyUpdateForKeys()` 工作方式一樣，但是從 base component 的 `propTypes` 來推斷 prop key。與 `setPropTypes()` 結合非常有用。\n\n如果 base component 沒有任何的 propTypes，component 將不會接收到任何的更新。這可能會有不是預期的行為，所以會在 console 出現警告。\n\n```js\nimport PropTypes from 'prop-types'; // You need to import prop-types. See https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n\nconst enhance = compose(\n\tonlyUpdateForPropTypes,\n\tsetPropTypes({\n\t\ttitle: PropTypes.string.isRequired,\n\t\tcontent: PropTypes.string.isRequired,\n\t\tauthor: PropTypes.object.isRequired,\n\t})\n);\n\nconst Post = enhance(({ title, content, author }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<h2>By {author.name}</h2>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n### withContext()\n\n```js\nwithContext(\n  childContextTypes: Object,\n  getChildContext: (props: Object) => Object\n)\n// HigherOrderComponent\n```\n\n提供 context 到 component 的 children。`childContextTypes` 是一個 React prop 類型的 object。 `getChildContext()` 是一個 function，回傳 child 的 context。與 `getContext()` 一起使用。\n\n### getContext()\n\n```js\ngetContext(\n  contextTypes: Object\n)\n// HigherOrderComponent\n```\n\n從 context 取得值並作為 props 傳送。與 `withContext()` 一起使用。\n\n### lifecycle()\n\n```js\nlifecycle(\n  spec: Object,\n)\n// HigherOrderComponent\n```\n\n一個 [React.Component()](https://reactjs.org/docs/react-api.html#react.component) 版本的 higher-order component。它支援完整的 `Component` API，除了 `render()` 方法，透過 default 來被實作（如果被指定 override 的話，錯誤將會被 log 在 console）。在你需要存取 lifecycle 方法的情況下，你應該使用這個 helper 作為一個方案。\n\n透過 `setState` 任何 state 可以在 lifecycle 方法做改變，將 state 作為 props 被 wrap 到 component 被傳遞。\n\n範例：\n\n```js\nconst PostsList = ({ posts }) => (\n\t<ul>\n\t\t{posts.map(p => (\n\t\t\t<li>{p.title}</li>\n\t\t))}\n\t</ul>\n);\n\nconst PostsListWithData = lifecycle({\n\tcomponentDidMount() {\n\t\tfetchPosts().then(posts => {\n\t\t\tthis.setState({ posts });\n\t\t});\n\t},\n})(PostsList);\n```\n\n範例：\n\n```js\nconst PostsList = ({ posts }) => (\n\t<ul>\n\t\t{posts.map(p => (\n\t\t\t<li>{p.title}</li>\n\t\t))}\n\t</ul>\n);\n\nconst PostsListWithData = lifecycle({\n\tcomponentDidMount() {\n\t\tfetchPosts().then(posts => {\n\t\t\tthis.setState({ posts });\n\t\t});\n\t},\n})(PostsList);\n```\n\nExample:\n\n```js\nconst PostsList = ({ posts }) => (\n\t<ul>\n\t\t{posts.map(p => (\n\t\t\t<li>{p.title}</li>\n\t\t))}\n\t</ul>\n);\n\nconst PostsListWithData = lifecycle({\n\tcomponentDidMount() {\n\t\tfetchPosts().then(posts => {\n\t\t\tthis.setState({ posts });\n\t\t});\n\t},\n})(PostsList);\n```\n\n### toClass()\n\n```js\ntoClass;\n// HigherOrderComponent\n```\n\n將一個 function component wrap 到 class。這可以被 library 作為一個 fallback 需要 ref 一個 component，像是 Relay。\n\n如果 base component 已經是 class，它回傳給定的 component。\n\n## Static property helpers\n\n這些 function 看起來像 higher-order component helpers — 這些 component 最後被 curry。然而，不是回傳一個新 component，這些 helper 透過設定或是 override 一個 static 屬性來 mutate base component。\n\n### setStatic()\n\n```js\nsetStatic(\n  key: string,\n  value: any\n)\n// HigherOrderComponent\n```\n\n在 base component 分配一個靜態屬性的值。\n\n### setPropTypes()\n\n```js\nsetPropTypes(\n  propTypes: Object\n)\n// HigherOrderComponent\n```\n\n在 base component 分配 propTypes 屬性。\n\n### setDisplayName()\n\n```js\nsetDisplayName(\n  displayName: string\n)\n// HigherOrderComponent\n```\n\n在 base component 分配 `displayName` 屬性。\n\n## Utilities\n\nRecompose 也包含一些額外的 helpers，它們不是 higher-order component，但是依然非常有用。\n\n### compose()\n\n```js\ncompose(...functions: Array<Function>)\n// Function\n```\n\ncompose 將多個 higher-order component 組合為單一的 higher-order component。這與 Redux 中的 compose 功能完全一樣，或是 lodash 的 `flowRight()`。\n\n### getDisplayName()\n\n```js\ngetDisplayName(\n  component: ReactClass | ReactFunctionalComponent\n)\n// string\n```\n\n回傳 React component 的名稱。\n\n### wrapDisplayName()\n\n```js\nwrapDisplayName(\n  component: ReactClass | ReactFunctionalComponent,\n  wrapperName: string\n)\n// string\n```\n\n回傳一個包裝版本名稱的 React component。例如，如果 `component` 的名稱是 `'Post'`，且 `wrapperName` 是 `'mapProps'`，回傳的值是 `'mapProps(Post)'`。大部分的 Recompose higher-order-component 都使用 `wrapDisplayName()`。\n\n### shallowEqual()\n\n```js\nshallowEqual(a: Object, b: Object)\n// boolean\n```\n\n回傳 object 的 shallow equal 的布林值。\n\n### isClassComponent()\n\n```js\nisClassComponent(value: any)\n// boolean\n```\n\n給定的值是否為 React component class，回傳布林值。\n\n### createSink()\n\n```js\ncreateSink(callback: (props: Object) => void)\n// ReactClass\n```\n\n建立一個不 render 任何東西的 component，但是當接收到新的 props 呼叫一個 callback。\n\n### componentFromProp()\n\n```js\ncomponentFromProp(propName: string)\n// ReactFunctionalComponent\n```\n\n建立一個接受 component 作為一個 prop 的 component，並 render component 和剩下的 props。\n\n範例：\n\n```js\nconst enhance = defaultProps({ component: 'button' })\nconst Button = enhance(componentFromProp('component'))\n\n<Button foo=\"bar\" /> // renders <button foo=\"bar\" />\n<Button component=\"a\" foo=\"bar\" />  // renders <a foo=\"bar\" />\n<Button component={Link} foo=\"bar\" />  // renders <Link foo=\"bar\" />\n```\n\n### nest()\n\n```js\nnest(\n  ...Components: Array<ReactClass | ReactFunctionalComponent | string>\n)\n// ReactClass\n```\n\n通過巢狀化的內容來組合 component。例如：\n\n```js\n// 給定 component A、B 和 C\nconst ABC = nest(A, B, C)\n<ABC pass=\"through\">Child</ABC>\n\n// 效果相同於\n<A pass=\"through\">\n  <B pass=\"through\">\n    <C pass=\"through\">\n      Child\n    </C>\n  </B>\n</A>\n```\n\n### hoistStatics()\n\n```js\nhoistStatics(\n  hoc: HigherOrderComponent,\n  blacklist: Object\n)\n// HigherOrderComponent\n```\n\n增強一個 higher-order component，以便在使用時它複製非 react static 屬性從 base component 到新的 component。這對於當使用 Recompose 和像是 Relay 之類的 library 的時候非常有用。\n\n注意這只 hoist 非 react 的 static 屬性。以下的 static 屬性將不會被 hoist：`childContextTypes`、`contextTypes`、`defaultProps`、`displayName`、`getDefaultProps`、`mixins`、`propTypes` 和 `type`。以下原生的 static 方法也會被忽略：`name`、`length`、`prototype`、`caller`、`arguments` 和 `arity`。\n\nYou can exclude more static properties by passing them as blacklist object:\n\n```js\nhoistStatics(EnhancedComponent, { foo: true })(BaseComponent); // Exclude `foo`\n```\n\n## Observable utilities\n\n事實證明大部分的 React Component API 可以用 observable 的方式來表示：\n\n- 合併多個 stream 在一起來代替 setState()。\n- 使用 startWith() 或 concat() 來代替 getInitialState()。\n- 使用 distinctUntilChanged()、debounce() 等等來代替 shouldComponentUpdate()。\n\n其他的好處包含：\n\n- 不需要區別 state 和 props - 所有的東西都是 stream。\n- 不需要擔心從事件 listener 取消訂閱。Subscription 會幫你處理。\n- Sideways 載入資料是不需要的 - 只需要合併 props stream 與一個外部的 stream。\n- Access to an ecosystem of observable libraries, such as RxJS.\n\nRecompose's observable utilities 可以被設定與其他的 observable 或是 stream-like 的 library 一起使用。\n\n### componentFromStream()\n\n```js\ncomponentFromStream(\n  propsToReactNode: (props$: Observable<object>) => Observable<ReactNode>\n)\n// ReactComponent\n```\n\n透過 map 一個 props 的 observable stream 成一個 React nodes（vdom）stream 來建立一個 React component。\n\n你可以將 `propsToReactNode` 看作為一個 `f` function：\n\n```js\nconst vdom$ = f(props$);\n```\n\n`props$` 是 props 的 stream 且 `vdom$` 是 React nodes 的 stream。這個表達方式類似於 React views 作為一個 function 的流行概念，經常被溝通作為：\n\n```js\nv = f(d);\n```\n\n範例：\n\n```js\nconst Counter = componentFromStream(props$ => {\n\tconst { handler: increment, stream: increment$ } = createEventHandler();\n\tconst { handler: decrement, stream: decrement$ } = createEventHandler();\n\tconst count$ = Observable.merge(increment$.mapTo(1), decrement$.mapTo(-1))\n\t\t.startWith(0)\n\t\t.scan((count, n) => count + n, 0);\n\n\treturn props$.combineLatest(count$, (props, count) => (\n\t\t<div {...props}>\n\t\t\tCount: {count}\n\t\t\t<button onClick={increment}>+</button>\n\t\t\t<button onClick={decrement}>-</button>\n\t\t</div>\n\t));\n});\n```\n\n### componentFromStreamWithConfig()\n\n```js\ncomponentFromStreamWithConfig<Stream>(\n  config: {\n    fromESObservable<T>: ?(observable: Observable<T>) => Stream<T>,\n    toESObservable<T>: ?(stream: Stream<T>) => Observable<T>,\n  }\n) => (\n  propsToReactNode: (props$: Stream<object>) => Stream<ReactNode>\n)\n// ReactComponent\n```\n\n替代 `componentFromStream()` 的 helper，它接受一個 observable config，並回傳一個自訂的 `componentFromStream()`，使用指定的 observable library。\n\n注意：以下的設定模組不包含在主要的 export。你必須獨立 import 它們，如範例所示。\n\n#### RxJS\n\n```js\nimport rxjsConfig from 'recompose/rxjsObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(rxjsConfig);\n```\n\n#### RxJS 4 (legacy)\n\n```js\nimport rxjs4Config from 'recompose/rxjs4ObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(rxjs4Config);\n```\n\n#### most\n\n```js\nimport mostConfig from 'recompose/mostObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(mostConfig);\n```\n\n#### xstream\n\n```js\nimport xstreamConfig from 'recompose/xstreamObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(xstreamConfig);\n```\n\n#### Bacon\n\n```js\nimport baconConfig from 'recompose/baconObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(baconConfig);\n```\n\n#### Kefir\n\n```js\nimport kefirConfig from 'recompose/kefirObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(kefirConfig);\n```\n\n#### Flyd\n\n```js\nimport flydConfig from 'recompose/flydObservableConfig';\nconst componentFromStream = componentFromStreamWithConfig(flydConfig);\n```\n\n### mapPropsStream()\n\n```js\nmapPropsStream(\n  ownerPropsToChildProps: (props$: Observable<object>) => Observable<object>,\n  BaseComponent: ReactElementType\n)\n// ReactComponent\n```\n\n`componentFromStream()` 版本的 higher-order component - 接受一個 function，map 一個 owner props 的 observable stream 到一個子 props 的 stream，而不是直接到一個 React nodes 的 stream。然後將子 props 傳送到 base component。\n\n你可能想要使用此版本與其他 Recompose higher-order component helper 進行互相操作。\n\n### mapPropsStreamWithConfig()\n\n```js\nmapPropsStreamWithConfig<Stream>(\n  config: {\n    fromESObservable<T>: ?(observable: Observable<T>) => Stream<T>,\n    toESObservable<T>: ?(stream: Stream<T>) => Observable<T>,\n  },\n) => (\n  ownerPropsToChildProps: (props$: Stream<object>) => Stream<object>,\n  BaseComponent: ReactElementType\n)\n// ReactComponent\n```\n\n`mapPropsStream()` 的替代方案，接受一個 observable 設定並回傳一個使用指定 observable library 自訂的 `mapPropsStream()`。參考上方的 `componentFromStreamWithConfig()`。\n\n```js\nconst enhance = mapPropsStream(props$ => {\n\tconst timeElapsed$ = Observable.interval(1000);\n\treturn props$.combineLatest(timeElapsed$, (props, timeElapsed) => ({\n\t\t...props,\n\t\ttimeElapsed,\n\t}));\n});\n\nconst Timer = enhance(({ timeElapsed }) => (\n\t<div>Time elapsed: {timeElapsed}</div>\n));\n```\n\n### createEventHandler()\n\n```js\ncreateEventHandler<T>(): {\n  handler: (value: T) => void,\n  stream: Observable<T>\n}\n```\n\n回傳一個有 `handler` 和 `stream` 屬性的 object。`stream` 是一個 observable 的序列，而且 `handler` 是一個 function，push 新的值到序列上。對於建立 event handler 像是 `onClick` 非常的有用。\n\n### createEventHandlerWithConfig()\n\n```js\ncreateEventHandlerWithConfig<T>(\n  config: {\n    fromESObservable<T>: ?(observable: Observable<T>) => Stream<T>,\n    toESObservable<T>: ?(stream: Stream<T>) => Observable<T>,\n  }\n) => (): {\n  handler: (value: T) => void,\n  stream: Observable<T>\n}\n```\n\n另一個 `createEventHandler()` 接受一個 observable 的設定，並回傳使用指定 observable library 客製化的 `createEventHandler()`。參考上方 `componentFromStreamWithConfig()`。\n\n### setObservableConfig()\n\n```js\nsetObservableConfig<Stream>({\n  fromESObservable<T>: ?(observable: Observable<T>) => Stream<T>,\n  toESObservable<T>: ?(stream: Stream<T>) => Observable<T>\n})\n```\n\n注意：`setObservableConfig()` 使用 global state，如果打算共享使用內部的 package，可能會造成 app break。參考 `componentFromStreamWithConfig()` 和 mapPropsStreamWithConfig() 作為 package author 的替代。\n\n在 Recompose 的 Observable 是純 object，符合 ES Observable proposal。通常，你可能會想要與 observable library 像是 RxJS 的一起使用它們。預設上，要求你在 apply 任何轉換前，convert 由 Recompose 提供的 observable。\n\n```js\nmapPropsStream(props$ => {\n\tconst rxjsProps$ = Rx.Observable.from(props$);\n\t// ...現在你可以 map、 filter、scan 等等\n\treturn transformedProps$;\n});\n```\n\n這很快就會變得很乏味。`setObservableConfig()` 設定一個 global observable 轉換讓你可以自動的 apply，而不個別對每個 stream 執行轉換。\n\n```js\nimport Rx from 'rxjs';\nimport { setObservableConfig } from 'recompose';\n\nsetObservableConfig({\n\t// 轉換一個純 ES observable 成一個 RxJS 5 observable\n\tfromESObservable: Rx.Observable.from,\n});\n```\n\n除了 `fromESObservable`，config object 也接受 `toESObservable`，轉換一個 stream 為一個 ES observable。因為 RxJS 5 observable 已經符合 ES observable spec，在上面的範例 `toESObservable` 不是必要的。然而，對於像是 RxJS 4 或 xstream 的 library 是需要的，這些 stream 不符合 ES observable spec。\n\n幸運的是，你不需要擔心對於你喜愛的 stream library 要去如何設定 Recompose，因為 Recompose 為你提供了設定。\n\n注意：以下的設定 modules 不包含主要的 export。你必須個別的 import 它們，如範例所示。\n\n### RxJS\n\n```js\nimport rxjsconfig from 'recompose/rxjsObservableConfig';\nsetObservableConfig(rxjsconfig);\n```\n\n### RxJS 4 (legacy)\n\n```js\nimport rxjs4config from 'recompose/rxjs4ObservableConfig';\nsetObservableConfig(rxjs4config);\n```\n\n### most\n\n```js\nimport mostConfig from 'recompose/mostObservableConfig';\nsetObservableConfig(mostConfig);\n```\n\n### xstream\n\n```js\nimport xstreamConfig from 'recompose/xstreamObservableConfig';\nsetObservableConfig(xstreamConfig);\n```\n\n### Bacon\n\n```js\nimport baconConfig from 'recompose/baconObservableConfig';\nsetObservableConfig(baconConfig);\n```\n\n### Kefir\n\n```js\nimport kefirConfig from 'recompose/kefirObservableConfig';\nsetObservableConfig(kefirConfig);\n```\n\n### Flyd\n\n```js\nimport flydConfig from 'recompose/flydObservableConfig';\nsetObservableConfig(flydConfig);\n```\n"},258:function(module,exports){module.exports="# Ant Design\n\n服務於企業級產品的設計體系，基於確定和自然的設計價值觀上的模塊化解決方案，讓設計者和開發者專注於更好的用戶體驗。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/thirdPartyFile/image/ant.png?raw=true)\n\n官方網址：[https://ant.design/index-cn](https://ant.design/index-cn)\n\n## 使用方法\n\n參考官方範例\n"},259:function(module,exports){module.exports="# React prop-types 型別檢查\n\njavascript 是弱型別，所以在型別錯誤時不會顯示錯誤，所以近幾年才會開發出 TypeScript 這種強型別的 js，可以在開發時期顯示警告，編輯時期出現錯誤訊息來減少 js 出錯的機會。在 react 也有類似的型別檢查套件，型別檢查套件 prop-types 可以在開發時期進行檢查，它一樣會在 console 顯示警告訊息。prop-types 包含:基本型別、陣列、物件...等，都能進行型別檢查。基本上大部份的型別都有支援語法撰寫也很簡潔，不需附加太多程式碼就能檢查型別。\n\nnpm 網址：[https://www.npmjs.com/package/prop-types](https://www.npmjs.com/package/prop-types)\n\n## 寫法用法參考\n\n```js\nimport PropTypes from 'prop-types';\n\nclass propTypesComponent extends Component {\n\tstatic propTypes = {\n\t\tstartYear: PropTypes.number,\n\t\tstartMonth: PropTypes.number,\n\t\tendYear: PropTypes.number,\n\t\tendMonth: PropTypes.number,\n\t\tonUpdateData: PropTypes.func,\n\t\tshowStillWorking: PropTypes.bool,\n\t\tshowSeniority: PropTypes.bool,\n\t\tstillWorking: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n\t\tstillWorkingText: PropTypes.string,\n\t\teditable: PropTypes.bool,\n\t\ttitle: PropTypes.string,\n\t\tpopoverClassName: PropTypes.string,\n\t\tdashClassName: PropTypes.string,\n\t\tseniorityClassName: PropTypes.string,\n\t};\n\n\t// 內容 ...\n}\n```\n"},260:function(module,exports){module.exports="# Moment.js 日期處理類庫\n\n一個輕量級 JavaScript 日期庫，用於解析，驗證，操作和格式化日期。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/thirdPartyFile/image/moment.png?raw=true)\n\nnpm 網址：[https://www.npmjs.com/package/moment](https://www.npmjs.com/package/moment)\n\n英文官方網指參考：[https://momentjs.com/](https://momentjs.com/)\n\n中文官方網址參考：[http://momentjs.cn/](http://momentjs.cn/)\n\n## 寫法用法參考\n\n參考官方文件\n"},261:function(module,exports){module.exports="# styled-components\n\nstyled components 是 React 在編寫 inline-css 的 library，應該還算新，感覺出來幾個月而已，它很特別的地方是它可以把你要用的元素透過 ES6 的字符串模板做出來，你不用再對每個類別或是 HTML 元素進行 Styling，它能讓你編寫 CSS 也像是在做 Component 一樣，把每個 CSS 都進行組件化。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/thirdPartyFile/image/styledComponents.png?raw=true)\n\n官方網址：[https://www.styled-components.com/](https://www.styled-components.com/)\n\n## 寫法用法參考\n\n```js\nconst SectionOne = styled.section`\n\theight: 1750px;\n\ttext-align: center;\n\twidth: 100%;\n\n\t@media only screen and (min-width: 901px) {\n\t\t${({ sectionValue }) =>\n\t\t\tsectionValue > 350 &&\n\t\t\tsectionValue < 1201 &&\n\t\t\tcss`\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: -300px;\n\t\t\t`}\n\n\t\t${({ sectionValue }) =>\n\t\t\tsectionValue > 1201 &&\n\t\t\tcss`\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: ${({ sectionValue }) => `${890 - sectionValue}px`};\n\t\t\t`}\n\t}\n`;\n```\n\n```js\nconst BehanceBlockDescription = styled.div`\n\tfont-size: 12px;\n\tmargin: 0 10px 10px;\n\tfont-weight: 500;\n\toverflow: hidden;\n\tdisplay: -webkit-box;\n\tline-height: 1.5;\n\t-webkit-line-clamp: 2;\n\tmax-height: 34px;\n\t-webkit-box-orient: vertical;\n`;\n```\n\n```js\nconst LightboxLoading = styled.div`\n\tposition: relative;\n\ttext-align: center;\n\tpadding: 5em 2em;\n`;\n\nconst LoadingWrapper = styled(LightboxLoading)`\n\theight: 200px;\n`;\n```\n\n```js\nconst TriggerButton = styled.span`\n\tposition: absolute;\n\tborder-radius: 8px;\n\tbackground: #fff;\n\tcursor: pointer;\n\tbox-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.5);\n\tz-index: 300;\n\t${props => {\n\t\tif (props.buttonPosition) {\n\t\t\treturn `top: calc(50% - 19px); left: calc(50% - 19px);`;\n\t\t} else if (props.isMask && isMobile) {\n\t\t\treturn `right: 20px; top: 16%;`;\n\t\t} else {\n\t\t\treturn `right: 20px; bottom: 20px;`;\n\t\t}\n\t}}\n`;\n```\n\n```js\nconst WebAppBody = styled.div`\n\twidth: 100%;\n\tmin-height: 100vh;\n\tbackground: ${props => (props.background ? props.background : '#fff')};\n`;\n```\n\n```js\nimport { Spin, Icon } from 'antd';\n\nconst StyledSpin = styled(Spin)`\n\twidth: 100%;\n\ttext-align: center;\n\t&::after {\n\t\tcontent: ' ';\n\t\theight: 100%;\n\t\tdisplay: inline-block;\n\t\tvertical-align: middle;\n\t}\n`;\n\nconst Loading = () => (\n\t<StyledSpin\n\t\tindicator={\n\t\t\t<Icon\n\t\t\t\ttype=\"loading\"\n\t\t\t\tstyle={{ fontSize: 30, color: '#f5b523', height: 30, width: 30 }}\n\t\t\t\tspin\n\t\t\t/>\n\t\t}\n\t/>\n);\n```\n\n```js\nconst CropImgMask = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tz-index: 11;\n\theight: 100%;\n\twidth: 100%;\n\t${props => {\n\t\tswitch (props.maskName) {\n\t\t\tcase 'blackMask':\n\t\t\t\treturn `\n\t\t\t\t\tbackground: rgba(0,0,0,${props.maskAlpha});\n\t\t\t\t`;\n\t\t\tcase 'whiteMask':\n\t\t\t\treturn `\n\t\t\t\t\tbackground: rgba(255,255,255,${props.maskAlpha});\n\t\t\t\t`;\n\t\t\tcase 'blackGradientMask':\n\t\t\t\treturn `\n\t\t\t\t\tbackground: linear-gradient(to bottom, rgba(255,255,255,0) 0%,rgba(0,0,0,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n\t\t\t\t\tbackground: -moz-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(0,0,0,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* FF3.6-15 */\n\t\t\t\t\tbackground: -webkit-linear-gradient(top, rgba(255,255,255,0) 0%,rgba(0,0,0,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* Chrome10-25,Safari5.1-6 */\n\t\t\t\t`;\n\t\t\tcase 'WhiteGradientMask':\n\t\t\t\treturn `\n\t\t\t\t\tbackground: linear-gradient(to bottom, rgba(0,0,0,0) 0%,rgba(255,255,255,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n\t\t\t\t\tbackground: -moz-linear-gradient(top, rgba(0,0,0,0) 0%, rgba(255,255,255,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* FF3.6-15 */\n\t\t\t\t\tbackground: -webkit-linear-gradient(top, rgba(0,0,0,0) 0%,rgba(255,255,255,${\n\t\t\t\t\t\tprops.maskAlpha\n\t\t\t\t\t}) 100%); /* Chrome10-25,Safari5.1-6 */\n\t\t\t\t`;\n\t\t\tdefault:\n\t\t\t\treturn `\n\t\t\t\t\tbackground: rgba(0,0,0,${props.maskAlpha});\n\t\t\t\t`;\n\t\t}\n\t}}\n`;\n```\n\n註：如果拉出去寫成一隻共用擋，記得要 export 出去\n\n```js\nexport {\n\tSectionOne,\n\tBehanceBlockDescription,\n\tLightboxLoading,\n\tLoadingWrapper,\n\tTriggerButton,\n\tWebAppBody,\n\tStyledSpin,\n\tLoading,\n\tCropImgMask,\n};\n```\n"},262:function(module,exports){module.exports="# Material-UI\n\n它是 Material Design 的 react 實作套件，它用來提供畫面的組件 (component)，像是 Button, Input, Dialog…等，充分地體現出 React component 讓我們以組件的概念組裝畫面。\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/thirdPartyFile/image/materialUi.png?raw=true)\n\n官方網址：[https://material-ui.com/](https://material-ui.com/)\n\n## 寫法用法參考\n\n參考官方文件\n"},263:function(module,exports){module.exports="# react-device-detect\n\n檢測設備，並根據檢測到的設備類型呈現視覺。\n\nnpm 網址：[https://www.npmjs.com/package/react-device-detect](https://www.npmjs.com/package/react-device-detect)\n\n## 寫法用法參考\n\n可參考官方文件\n\n```js\nimport { isMobile } from 'react-device-detect';\n\nconst trigger = isMobile ? 'click' : 'hover';\n```\n\n```js\nimport { BrowserView, MobileView } from 'react-device-detect';\n\n// render 內容\n<WebAppContainer style={commonMode ? { paddingTop: '0' } : null}>\n\t{/* PC版呈現 */}\n\t<BrowserView>\n\t\t<EditorMain commonMode={commonMode} />\n\t</BrowserView>\n\t{/* Moble版呈現 */}\n\t<MobileView>\n\t\t<MobilePrompt commonMode={commonMode} />\n\t\t<EditorMain commonMode={commonMode} />\n\t</MobileView>\n</WebAppContainer>;\n```\n"},264:function(module,exports){module.exports="# Recompose\n\nRecompose 是一個 React utility 用於 function component 和 higher-order component。可以把它想為像是給 React 使用的 lodash。\n\nReact 中 Functional Component 雖然效能佳，但比起 Class Component 能做的事太少，於是就有神人開發了一個工具叫 Recompose，利用 Higher Order Component 的方式來加強 Functional Component 的功能。\n\nnpm 網址：[https://www.npmjs.com/package/recompose](https://www.npmjs.com/package/recompose)\n\n## 你可以使用 Recompose 在 ... 提升 state 到 functional wrapper\n\n`withState()` 和 `withReducer()` helper 提供一個很好的方式來表達 state 的更新：\n\n```js\nconst enhance = withState('counter', 'setCounter', 0);\nconst Counter = enhance(({ counter, setCounter }) => (\n\t<div>\n\t\tCount: {counter}\n\t\t<button onClick={() => setCounter(n => n + 1)}>Increment</button>\n\t\t<button onClick={() => setCounter(n => n - 1)}>Decrement</button>\n\t</div>\n));\n```\n\n或者是一個 Redux 風格的 reducer：\n\n```js\nconst counterReducer = (count, action) => {\n\tswitch (action.type) {\n\t\tcase INCREMENT:\n\t\t\treturn count + 1;\n\t\tcase DECREMENT:\n\t\t\treturn count - 1;\n\t\tdefault:\n\t\t\treturn count;\n\t}\n};\n\nconst enhance = withReducer('counter', 'dispatch', counterReducer, 0);\nconst Counter = enhance(({ counter, dispatch }) => (\n\t<div>\n\t\tCount: {counter}\n\t\t<button onClick={() => dispatch({ type: INCREMENT })}>Increment</button>\n\t\t<button onClick={() => dispatch({ type: DECREMENT })}>Decrement</button>\n\t</div>\n));\n```\n\n## 執行大部分 React 常見的 pattern\n\n像是 componentFromProp() 和 withContext() helper 封裝常見的 React pattern 到一個簡單的 functional interface：\n\n```js\nconst enhance = defaultProps({ component: 'button' })\nconst Button = enhance(componentFromProp('component'))\n\n<Button /> // renders <button>\n<Button component={Link} /> // renders <Link />\n```\n\n```js\nconst provide = store =>\n\twithContext({ store: PropTypes.object }, () => ({ store }));\n\n// Apply 到 base component\n// App 的子節點可以存取到 context.store\nconst AppWithContext = provide(store)(App);\n```\n\n## 優化 render 效能\n\n不需要轉移寫一個新的 class 來實作 shouldComponentUpdate()。像是 pure() 和 onlyUpdateForKeys() 的 Recompose helper 會幫你完成：\n\n```js\n// 一個 render 成本很高的 component\nconst ExpensiveComponent = ({ propA, propB }) => {...}\n\n// 相同的 component 的優化版本，使用 props 的 shallow comparison\n// 效果相同於 extend React.PureComponent\nconst OptimizedComponent = pure(ExpensiveComponent)\n\n// 更多的優化：如果指定的 props key 改變了才做更新\nconst HyperOptimizedComponent = onlyUpdateForKeys(['propA', 'propB'])(ExpensiveComponent)\n```\n\n## 與其他的 library 相互操作\n\nRecompose helper 整合了非常棒的外部 library。像是 Relay、Redux 和 RxJS\n\n```js\nconst enhance = compose(\n\t// 由 recompose-relay 所提供，這是 Recompose 版本的 Relay.createContainer()\n\tcreateContainer({\n\t\tfragments: {\n\t\t\tpost: () => Relay.QL`\n        fragment on Post {\n          title,\n          content\n        }\n      `,\n\t\t},\n\t}),\n\tflattenProp('post')\n);\n\nconst Post = enhance(({ title, content }) => (\n\t<article>\n\t\t<h1>{title}</h1>\n\t\t<div>{content}</div>\n\t</article>\n));\n```\n\n## 建立你自己的 library\n\n許多 React library 重複實作了相同 utility，像是 shallowEqual() 和 getDisplayName()。Recompose 也提供了這些 utility 給你使用。\n\n```js\n// 任何 Recompose module 可以被獨立的被 import\nimport getDisplayName from 'recompose/getDisplayName';\nConnectedComponent.displayName = `connect(${getDisplayName(BaseComponent)})`;\n\n// 或是甚至更好的：\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nConnectedComponent.displayName = wrapDisplayName(BaseComponent, 'connect');\n\nimport toClass from 'recompose/toClass';\n// 轉換一個 function component 成為一個 class component，例如，它可以給定一個 ref，\n// 回傳 class component。\nconst ClassComponent = toClass(FunctionComponent);\n```\n\n## 出處\n\n[https://neighborhood999.github.io/recompose/](https://neighborhood999.github.io/recompose/)\n"},265:function(module,exports){module.exports="# lorem-ipsum\n\n常用於排版設計領域的拉丁文文章，主要目的是測試文章、或是文字在不同排版下看起來的效果\n\nnpm 官方網址：[https://www.npmjs.com/package/lorem-ipsum](https://www.npmjs.com/package/lorem-ipsum)\n\n## 寫法用法參考\n\n```js\nimport loremIpsum from 'lorem-ipsum';\n\nclass GalleryAch extends Component {\n\tconstructor(props) {\n\t\tthis.sampleText = loremIpsum({ units: 'paragraphs' });\n\t}\n\n\trender = () => {\n\t\treturn <DraftEditor sampleText={this.sampleText} />;\n\t};\n}\n```\n"},266:function(module,exports){module.exports="# react-autocomplete\n\nReact.js 的可訪問、可擴展的自動完成。\n\ngithub 官方網址：[https://github.com/reactjs/react-autocomplete](https://github.com/reactjs/react-autocomplete)\n\n## 寫法用法參考\n\n參考 github 文件\n\n查看[更多示例](https://reactcommunity.org/react-autocomplete/)，並立即使用[在線編輯器](http://jsbin.com/mipesawapi/edit?js,output)。\n\n```js\n<Autocomplete\n\tgetItemValue={item => item.label}\n\titems={[{ label: 'apple' }, { label: 'banana' }, { label: 'pear' }]}\n\trenderItem={(item, isHighlighted) => (\n\t\t<div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n\t\t\t{item.label}\n\t\t</div>\n\t)}\n\tvalue={value}\n\tonChange={e => (value = e.target.value)}\n\tonSelect={val => (value = val)}\n/>\n```\n"},267:function(module,exports){module.exports="# autosize\n\nAutosize 是一個小型的獨立腳本，可自動調整 textarea 高度以適合文本。\n\nnpm 官方網址：[https://www.npmjs.com/package/autosize](https://www.npmjs.com/package/autosize)\n\n## 寫法用法參考\n\n```js\ncomponentDidMount = () => {\n  if (this.inputRef && this.inputRef.refs.input) {\n    autosize(this.inputRef.refs.input);\n  }\n};\n\ncomponentWillUnmount = () => {\n  if (this.input && this.inputRef.refs.input) {\n    autosize.destroy(this.inputRef.refs.input);\n  }\n};\n\ncomponentDidUpdate() {\n  this.inputRef &&\n    this.inputRef.refs.input &&\n    autosize.update(this.inputRef.refs.input);\n}\n\nrender() => {\n  return(\n    <input ref={el => (this.inputRef = el)}></input>\n  )\n}\n```\n\n```js\n// from a NodeList\nautosize(document.querySelectorAll('textarea'));\n\n// from a single Node\nautosize(document.querySelector('textarea'));\n\n// from a jQuery collection\nautosize($('textarea'));\n```\n"},268:function(module,exports){module.exports="# react-image-crop\n\nReact 的圖像裁剪工具，沒有依賴關係。\n\nnpm 官方網址：[https://www.npmjs.com/package/react-image-crop](https://www.npmjs.com/package/react-image-crop)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nimport ReactCrop, { makeAspectCrop } from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\n<ReactCrop\n\tsrc={oriFile || ''}\n\tcrop={this.state.crop}\n\tonImageLoaded={this.onImageLoaded}\n\tonComplete={this.onComplete}\n\tonChange={this.onChange}\n\timageStyle={{ maxHeight: '60vh' }}\n\tstyle={loading ? { display: 'none' } : {}}\n\tkeepSelection={true}\n\tcrossorigin=\"anonymous\"\n/>;\n```\n"},269:function(module,exports){module.exports="# localStorage\n\n效率低，但只使用純 JavaScript localStorage 實現符合 W3C 標準。\n這是為了能夠對節點中的瀏覽器模塊運行單元測試等。\n\nnpm 官方網址：[https://www.npmjs.com/package/localStorage](https://www.npmjs.com/package/localStorage)\n\n## 寫法用法參考\n\n```js\nvar localStorage = require('localStorage'),\n\tmyValue = { foo: 'bar', baz: 'quux' };\nlocalStorage.setItem('myKey', JSON.stringify(myValue));\nmyValue = localStorage.getItem('myKey');\n```\n\n```js\nimport persistState from 'localStorage';\n\nif (fileId) {\n\tconst previousCrop = persistState.loadState(['crop', fileId]);\n\tif (previousCrop && !uploading) {\n\t\tcrop = previousCrop;\n\t}\n}\n\nonFinishProcessing = ({ fileId, fileUrlMap, coordinate }) => {\n\t// 更新 or 新增 crop 物件到 localStorage\n\tpersistState.saveState(['crop', fileId], this.state.crop);\n\tthis.setState(\n\t\t{\n\t\t\tuploading: false,\n\t\t\tfileId,\n\t\t\toriFile: fileUrlMap.origin[0],\n\t\t},\n\t\t() => {\n\t\t\t// hook: 完成所有上傳程序並提供 fileId & file URI\n\t\t\tif (typeof this.props.onFinishProcessing === 'function') {\n\t\t\t\tthis.props.onFinishProcessing({ fileId, fileUrlMap, coordinate });\n\t\t\t}\n\t\t}\n\t);\n};\n\npersistState.saveState(['crop', fileId], this.state.crop);\n\n// 調整圖片的話，更新 crop 物件到 localStorage\nif (this.state.fileId) {\n\tpersistState.saveState(['crop', this.state.fileId], crop);\n}\n```\n"},270:function(module,exports){module.exports="# React DnD\n\nReact DnD 是一組 React 實用程序，可幫助您構建複雜的拖放接口，同時保持組件分離。它非常適合 Trello 和 Storify 之類的應用程序，其中拖動在應用程序的不同部分之間傳輸數據，並且組件會根據拖放事件更改其外觀和應用程序狀態。\n\n簡單說就是拖曳功能\n\n官方網址：[https://react-dnd.github.io/react-dnd/about](https://react-dnd.github.io/react-dnd/about)\n\n## 寫法用法參考\n\n參考官方文件\n"},271:function(module,exports){module.exports=""},272:function(module,exports){module.exports="# draft-js-inline-toolbar-plugin\n\n這是 draft-js-plugins-editor 的一個插件。\n\nnpm 網址：[https://www.npmjs.com/package/draft-js-inline-toolbar-plugin](https://www.npmjs.com/package/draft-js-inline-toolbar-plugin)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport 'draft-js-inline-toolbar-plugin/lib/plugin.css';\n\nconst toolbarPlugin = createInlineToolbarPlugin();\n```\n"},273:function(module,exports){module.exports="# dompurify\n\nDOMPurify 是一種僅限 DOM，超快速，超級容忍的 XSS 消毒劑，適用於 HTML，MathML 和 SVG。\n\nDOMPurify 清理 HTML 並防止 XSS 攻擊。您可以使用充滿臟 HTML 的字符串提供 DOMPurify，它將返回一個包含乾淨 HTML 的字符串。DOMPurify 將刪除包含危險 HTML 的所有內容，從而防止 XSS 攻擊和其他惡意。它也快死了。我們使用瀏覽器提供的技術並將其轉換為 XSS 過濾器。瀏覽器越快，DOMPurify 就越快。\n\nnpm 網址：[https://www.npmjs.com/package/dompurify](https://www.npmjs.com/package/dompurify)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nconst link = encodeURIComponent(\n\tDOMPurify.sanitize(value, { ALLOWED_TAGS: [], KEEP_CONTENT: true })\n)\n\t.replace(/%2F/g, '/')\n\t.replace(/%3A/g, ':')\n\t.replace(/%20/g, '+');\n```\n"},274:function(module,exports){module.exports="# draft-js\n\nDraft.js 是一個 JavaScript 富文本編輯器框架，為 React 構建，並由不可變模型支持。\n\n- 可擴展和可定制：我們提供構建塊，以便創建從簡單文本樣式到嵌入式媒體的各種豐富的文本撰寫體驗。\n- 聲明性富文本： Draft.js 無縫地適用於 React 應用程序，使用熟悉的聲明性 API 抽像出渲染，選擇和輸入行為的細節。\n- 不可變編輯器狀態： Draft.js 模型使用 immutable-js 構建，提供具有功能狀態更新的 API，並積極利用數據持久性以實現可擴展內存使用。\n\nnpm 網址：[https://www.npmjs.com/package/draft-js](https://www.npmjs.com/package/draft-js)\n\n## 寫法用法參考\n\n參考 npm 官方文件\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Editor, EditorState } from 'draft-js';\n\nclass MyEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { editorState: EditorState.createEmpty() };\n\t\tthis.onChange = editorState => this.setState({ editorState });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<Editor editorState={this.state.editorState} onChange={this.onChange} />\n\t\t);\n\t}\n}\n\nReactDOM.render(<MyEditor />, document.getElementById('container'));\n```\n"},275:function(module,exports){module.exports="# draft-convert\n\n使用 HTML 擴展序列化和反序列化 Draft.js 內容\n\n有關如何使用帶插件的 draft-convert 的更多信息，請參閱 draft-extend\n\nnpm 網址：[https://www.npmjs.com/package/draft-convert](https://www.npmjs.com/package/draft-convert)\n\n## 寫法用法參考\n\n參考 npm 官方文件\n\n```js\n// convert to HTML with blue text, paragraphs, and links\nconst html = convertToHTML({\n\tstyleToHTML: style => {\n\t\tif (style === 'BOLD') {\n\t\t\treturn <span style={{ color: 'blue' }} />;\n\t\t}\n\t},\n\tblockToHTML: block => {\n\t\tif (block.type === 'PARAGRAPH') {\n\t\t\treturn <p />;\n\t\t}\n\t},\n\tentityToHTML: (entity, originalText) => {\n\t\tif (entity.type === 'LINK') {\n\t\t\treturn <a href={entity.data.url}>{originalText}</a>;\n\t\t}\n\t\treturn originalText;\n\t},\n})(editorState.getCurrentContent());\n\n// convert content state to HTML with functionality defined in the plugins applied\nconst html = compose(\n\tFirstPlugin,\n\tSecondPlugin,\n\tThirdPlugin\n)(convertToHTML)(editorState.getCurrentContent());\n```\n"},276:function(module,exports){module.exports="# ajv (另一個 JSON 模式驗證器)\n\nNode.js 和瀏覽器的最快 JSON Schema 驗證器\n\nnpm 網址：\b[https://www.npmjs.com/package/ajv](https://www.npmjs.com/package/ajv)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\n/**\n * 檢查 data 是否符合 schema\n * @param {object} dataModel\n * @param {object} dataModelSchema\n * @returns {boolean}\n */\nconst validateDataModel = (dataModel = {}, dataModelSchema) => {\n\tconst ajv = new Ajv();\n\n\tif (!dataModelSchema || !ajv.validateSchema(dataModelSchema)) {\n\t\tconsole.error(\n\t\t\t'[validateDataModel] invalid dataModelSchema: ',\n\t\t\tdataModelSchema\n\t\t);\n\t\treturn false;\n\t}\n\n\t// 檢查 schema 格式 & 驗證 data model\n\tconst result = ajv.validate(dataModelSchema, dataModel);\n\tif (!result) {\n\t\tconsole.warn(\n\t\t\t`[validateDataModel] invalid dataModel | error: ${ajv.errorsText()} | dataModel:`,\n\t\t\tdataModel\n\t\t);\n\t}\n\treturn result;\n};\n```\n\n```js\nvar ajv = new Ajv({ removeAdditional: true });\nvar schema = {\n\tadditionalProperties: false,\n\tproperties: {\n\t\tfoo: { type: 'number' },\n\t\tbar: {\n\t\t\tadditionalProperties: { type: 'number' },\n\t\t\tproperties: {\n\t\t\t\tbaz: { type: 'string' },\n\t\t\t},\n\t\t},\n\t},\n};\n\nvar data = {\n\tfoo: 0,\n\tadditional1: 1, // will be removed; `additionalProperties` == false\n\tbar: {\n\t\tbaz: 'abc',\n\t\tadditional2: 2, // will NOT be removed; `additionalProperties` != false\n\t},\n};\n\nvar validate = ajv.compile(schema);\n\nconsole.log(validate(data)); // true\nconsole.log(data); // { \"foo\": 0, \"bar\": { \"baz\": \"abc\", \"additional2\": 2 }\n```\n"},277:function(module,exports){module.exports="# draft-js-buttons\n\nFor the toolbar to work correctly, you must include the <Toolbar> component after the editor component:\n\nnpm 網址：[https://www.npmjs.com/package/draft-js-buttons](https://www.npmjs.com/package/draft-js-buttons)\n\n## 寫法用法參考\n\n參考 npm 官方文件\n\n```js\nimport {\n\tItalicButton,\n\tBoldButton,\n\tUnderlineButton,\n\tUnorderedListButton,\n\tOrderedListButton,\n} from 'draft-js-buttons';\n\nthis.inlineToolbarPlugin = createInlineToolbarPlugin({\n\tstructure: [\n\t\tBoldButton,\n\t\tItalicButton,\n\t\tUnderlineButton,\n\t\tUnorderedListButton,\n\t\tOrderedListButton,\n\t\tprops => (\n\t\t\t<LinkButton\n\t\t\t\t{...props}\n\t\t\t\tlink={getLinkFromEditorState(this.state.editorState)}\n\t\t\t\tonSaveLink={this.handleSaveLink}\n\t\t\t\tonRemoveLink={this.handleRemoveLink}\n\t\t\t\tonLinkPanelOpen={this.handleLinkOpen}\n\t\t\t\tonLinkPanelClose={this.handleLinkClose}\n\t\t\t/>\n\t\t),\n\t],\n});\n\nthis.plugins = [this.inlineToolbarPlugin, creatLinkPlugin()];\n```\n"},278:function(module,exports){module.exports="# decorate-component-with-props\n\n使用其他道具裝飾組件的簡單功能\n\nnpm 網址：[https://www.npmjs.com/package/decorate-component-with-props](https://www.npmjs.com/package/decorate-component-with-props)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport decorateComponentWithProps from 'decorate-component-with-props';\n\nconst props = {\n\twine: 'red',\n\tbeer: 'ipa',\n\tfood: 'spaghetti',\n};\n\nMyDecoratedComponent = decorateComponentWithProps(MyComponent, props);\n\n// MyDecoratedComponent will now be decorated with these props\n```\n\n```js\n// 插入連結\nopenLinkPanel = () => {\n\tthis.props.onOverrideContent(\n\t\tdecorateComponentWithProps(LinkPanel, this.props)\n\t);\n\tthis.props.onLinkPanelOpen();\n};\n```\n"},279:function(module,exports){module.exports="# react-router-dom\n\nReact Router 的 DOM 綁定\n\nnpm 網址：[https://www.npmjs.com/package/react-router-dom](https://www.npmjs.com/package/react-router-dom)\n\n## 寫法用法參考\n\n```js\nimport { Link } from 'react-router-dom';\n\nconst StyledLink = styled(Link)`\n\tcolor: #f5a623;\n\t:hover {\n\t\tcolor: #f5a623;\n\t\ttext-decoration: underline;\n\t}\n`;\n```\n\n```js\n// using ES6 modules\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\n// using CommonJS modules\nconst BrowserRouter = require('react-router-dom').BrowserRouter;\nconst Route = require('react-router-dom').Route;\nconst Link = require('react-router-dom').Link;\n```\n"},280:function(module,exports){module.exports="# react-css-modules\n\nReact CSS Modules 實現 CSS 模塊的自動映射。為每個 CSS 類分配一個具有全局唯一名稱的本地範圍標識符。CSS 模塊支持模塊化和可重用的 CSS！\n\nnpm 網址：[https://www.npmjs.com/package/react-css-modules](https://www.npmjs.com/package/react-css-modules)\n\n## 寫法用法參考\n\n```js\nimport CSSModules from 'react-css-modules';\n\nexport default CSSModules(CustomComponent, style, { allowMultiple: true });\n```\n\n```js\nimport React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './table.css';\n\nclass Table extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div styleName=\"table\">\n\t\t\t\t<div styleName=\"row\">\n\t\t\t\t\t<div styleName=\"cell\">A0</div>\n\t\t\t\t\t<div styleName=\"cell\">B0</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CSSModules(Table, styles);\n```\n"},281:function(module,exports){module.exports="# htmlparser2\n\nHTML / XML / RSS 解析器。解析器可以處理流並提供回調接口。\n\nnpm 網址：[https://www.npmjs.com/package/htmlparser2](https://www.npmjs.com/package/htmlparser2)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nvar htmlparser = require('htmlparser2');\nvar parser = new htmlparser.Parser(\n\t{\n\t\tonopentag: function(name, attribs) {\n\t\t\tif (name === 'script' && attribs.type === 'text/javascript') {\n\t\t\t\tconsole.log('JS! Hooray!');\n\t\t\t}\n\t\t},\n\t\tontext: function(text) {\n\t\t\tconsole.log('--\x3e', text);\n\t\t},\n\t\tonclosetag: function(tagname) {\n\t\t\tif (tagname === 'script') {\n\t\t\t\tconsole.log(\"That's it?!\");\n\t\t\t}\n\t\t},\n\t},\n\t{ decodeEntities: true }\n);\nparser.write(\n\t\"Xyz <script type='text/javascript'>var foo = '<<bar>>';</ script>\"\n);\nparser.end();\n\n// Output (simplified):\n// --\x3e Xyz\n// JS! Hooray!\n// --\x3e var foo = '<<bar>>';\n// That's it?!\n```\n"},282:function(module,exports){module.exports="# react-router\n\nReact 的聲明性路由\n\nnpm 網址：[https://www.npmjs.com/package/react-router](https://www.npmjs.com/package/react-router)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport { Prompt } from 'react-router';\n\n/**\n * NOTE:\n * 因為 react-router Prompt 並沒有處理瀏覽器 beforeunload 事件，也就是重新整理、上下一頁等功能\n * 看起來吵了很久都沒有 PR 被 merge，故需要自己手動補上\n * https://github.com/ReactTraining/react-router/pull/4372\n *\n * 另一個作法：自幹一個 Prompt\n * https://github.com/ReactTraining/react-router/issues/5405#issuecomment-430911738\n */\n\nconst handleBeforeUnload = ComposedComponent =>\n  class BrowserPrompt extends Component {\n    ...\n  };\n\nexport default handleBeforeUnload(Prompt);\n```\n"},283:function(module,exports){module.exports="# lodash\n\n該 Lodash 庫導出為 Node.js 的模塊。\n\nnpm 網址：[https://www.npmjs.com/package/lodash](https://www.npmjs.com/package/lodash)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport throttle from 'lodash/throttle';\n\nif (body) {\n\tconst targetNode =\n\t\tdocument.scrollingElement || document.documentElement || document.body;\n\tdocument.onscroll = throttle(this.act.bind(this, targetNode), 200);\n} else {\n\tconst targetNode =\n\t\tthis.topNode.childNodes[0] ||\n\t\tdocument.scrollingElement ||\n\t\tdocument.documentElement ||\n\t\tdocument.body;\n\ttargetNode.onscroll = throttle(this.act.bind(this, targetNode), 200);\n}\n```\n"},284:function(module,exports){module.exports='# graphql-tag\n\n用於解析 GraphQL 查詢的有用實用程序。包括：\n\ngql 一個 JavaScript 模板文字標記，用於將 GraphQL 查詢字符串解析為標準 GraphQL AST。\n/loader 用於預處理查詢的 webpack 加載程序\ngraphql-tag 使用引擎蓋下的引用 graphql 庫作為對等依賴項，因此除了安裝此模塊之外，您還必須安裝 graphql-js。\n\nnpm 網址：[https://www.npmjs.com/package/graphql-tag](https://www.npmjs.com/package/graphql-tag)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n這是一個模板文字標記，可用於簡明地編寫一個被解析為標準 GraphQL AST 的 GraphQL 查詢：\n\n```js\nimport gql from \'graphql-tag\';\n\nconst query = gql`\n\t{\n\t\tuser(id: 5) {\n\t\t\tfirstName\n\t\t\tlastName\n\t\t}\n\t}\n`;\n\n// query is now a GraphQL syntax tree object\nconsole.log(query);\n\n// {\n//   "kind": "Document",\n//   "definitions": [\n//     {\n//       "kind": "OperationDefinition",\n//       "operation": "query",\n//       "name": null,\n//       "variableDefinitions": null,\n//       "directives": [],\n//       "selectionSet": {\n//         "kind": "SelectionSet",\n//         "selections": [\n//           {\n//             "kind": "Field",\n//             "alias": null,\n//             "name": {\n//               "kind": "Name",\n//               "value": "user",\n//               ...\n```\n\n```js\n/**\n * Fragment\n */\nexport const Fragments = {\n\tblocks: gql`\n\t\tfragment BlockModel on Block {\n\t\t\tuniKey: blockId\n\t\t\tblockType: type\n\t\t\ttemplateType: template\n\t\t\tvisibility\n\t\t\tmask\n\t\t}\n\t`,\n\tbasic: gql`\n\t\tfragment UserInfoModel on UserInfo {\n\t\t\tuserName\n\t\t\tintroduction\n\t\t\tavatarFileId\n\t\t\tcoverFileId\n\t\t\tavatarFileUrls\n\t\t\tcoverFileUrls\n\t\t\ttitle\n\t\t\torganization\n\t\t\tlocation\n\t\t}\n\t`,\n};\n\n/**\n * Query\n */\n\n// 取得指定 pid 基本資料\nexport const FETCH_USERINFO = gql`\n\tquery fetchUserInfo($pid: Long!) {\n\t\tNamecard(pid: $pid) {\n\t\t\tpid\n\t\t\tbasic {\n\t\t\t\t...UserInfoModel\n\t\t\t}\n\t\t}\n\t}\n\t${Fragments.basic}\n`;\n```\n'},285:function(module,exports){module.exports="# apollo-client\n\nApollo Client 是一個功能齊全的緩存 GraphQL 客戶端，集成了 React，Angular 等功能。它允許您輕鬆構建通過 GraphQL 獲取數據的 UI 組件。為了獲得最大價值 apollo-client，您應該將其與其中一個視圖層集成一起使用。\n\n要開始使用 React 集成，請訪問我們的[React Apollo 文檔網站](https://www.apollographql.com/docs/react/)。\n\nApollo Client 還為[所有流行的前端框架](https://www.npmjs.com/package/apollo-client#learn-how-to-use-apollo-client-with-your-favorite-framework)提供了視圖層集成。為獲得最佳體驗，請確保為您選擇的前端框架使用視圖集成層。\n\nApollo Client 可用於任何想要使用 GraphQL 服務器數據的 JavaScript 前端。它的：\n\n1. 可逐步採用，以便您可以將其放入現有的 JavaScript 應用程序中，並開始使用 GraphQL 作為 UI 的一部分。\n2. 通用兼容，因此 Apollo 適用於任何構建設置，任何 GraphQL 服務器和任何 GraphQL 架構。\n3. 開始使用非常簡單，因此您可以立即開始加載數據並稍後了解高級功能。\n4. 可檢查且易於理解，以便您可以使用出色的開發人員工具來準確了解應用中發生的情況。\n5. 專為交互式應用而構建，因此您的用戶可以立即進行更改並在 UI 中反映出來。\n6. 小而靈活，所以你不會得到你不需要的東西。核心壓縮不到 25kb。\n7. 社區驅動，因為 Apollo 是由社區驅動並服務於各種用例。一切都在公開計劃和發展。\n8. 開始使用主頁，其中包含各種框架的很好示例。\n\nnpm 網址：[https://www.npmjs.com/package/apollo-client](https://www.npmjs.com/package/apollo-client)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\n/**\n * Client: graphQL 初始設定\n *\n * middleware & afterware => https://www.apollographql.com/docs/react/advanced/network-layer.html#linkMiddleware\n */\nexport const client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\t// error log middleware\n\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\tif (graphQLErrors)\n\t\t\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: `,\n\t\t\t\t\t\tlocations,\n\t\t\t\t\t\t`Path: `,\n\t\t\t\t\t\tpath\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (networkError) console.error(`[Network error]: ${networkError}`);\n\t\t}),\n\t\tnew createHttpLink({\n\t\t\turi: `${generalConfig.api}/graphql`,\n\t\t\tcredentials: 'include',\n\t\t}),\n\t]),\n\tcache: new InMemoryCache(),\n});\n```\n"},286:function(module,exports){module.exports="# apollo-cache-inmemory (阿波羅緩存 inmemory)\n\napollo-cache-inmemory 是 Apollo Client 2.0 的推薦緩存實現。InMemoryCache 是一個規範化的數據存儲，它支持所有 Apollo Client 1.0 的功能，而不依賴於 Redux。\n\n在某些情況下，您可能需要直接操作緩存，例如在突變後更新存儲。我們將[在這裡](https://www.npmjs.com/package/apollo-cache-inmemory#recipes)介紹一些常見用例。\n\nnpm 網址：[https://www.npmjs.com/package/apollo-cache-inmemory](https://www.npmjs.com/package/apollo-cache-inmemory)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport ApolloClient from 'apollo-client';\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n\tlink: new HttpLink(),\n\tcache,\n});\n```\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\n/**\n * Client: graphQL 初始設定\n *\n * middleware & afterware => https://www.apollographql.com/docs/react/advanced/network-layer.html#linkMiddleware\n */\nexport const client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\t// error log middleware\n\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\tif (graphQLErrors)\n\t\t\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: `,\n\t\t\t\t\t\tlocations,\n\t\t\t\t\t\t`Path: `,\n\t\t\t\t\t\tpath\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (networkError) console.error(`[Network error]: ${networkError}`);\n\t\t}),\n\t\tnew createHttpLink({\n\t\t\turi: `${generalConfig.api}/graphql`,\n\t\t\tcredentials: 'include',\n\t\t}),\n\t]),\n\tcache: new InMemoryCache(),\n});\n```\n"},287:function(module,exports){module.exports="# apollo-link-http (阿波羅鏈接，HTTP)\n\nhttp 鏈接是最常見的 Apollo Link，一個用於 GraphQL 網絡的模塊化組件系統。如果您還沒有這樣做，請[閱讀 Apollo Link 文檔](https://www.apollographql.com/docs/link/#usage)以了解 Apollo Link 生態系統以及如何將此鏈接用於 Apollo Client 和 graphql-tools 等庫，或作為獨立客戶端。\n\nhttp 鏈接是一個終止鏈接，它通過 http 連接從 GraphQL 端點獲取 GraphQL 結果。http 鏈接支持 POST 和 GET 請求，並且能夠基於每個查詢更改 http 選項。這可用於身份驗證，持久查詢，動態 uris 和其他粒度更新。\n\nnpm 網址：[https://www.npmjs.com/package/apollo-link-http](https://www.npmjs.com/package/apollo-link-http)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport { createHttpLink } from 'apollo-link-http';\n\nconst link = createHttpLink({ uri: '/graphql' });\n```\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\n/**\n * Client: graphQL 初始設定\n *\n * middleware & afterware => https://www.apollographql.com/docs/react/advanced/network-layer.html#linkMiddleware\n */\nexport const client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\t// error log middleware\n\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\tif (graphQLErrors)\n\t\t\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: `,\n\t\t\t\t\t\tlocations,\n\t\t\t\t\t\t`Path: `,\n\t\t\t\t\t\tpath\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (networkError) console.error(`[Network error]: ${networkError}`);\n\t\t}),\n\t\tnew createHttpLink({\n\t\t\turi: `${generalConfig.api}/graphql`,\n\t\t\tcredentials: 'include',\n\t\t}),\n\t]),\n\tcache: new InMemoryCache(),\n});\n```\n"},288:function(module,exports){module.exports="# apollo-link-error\n\n發生 GraphQL 或網絡錯誤時，使用此鏈接執行一些自定義邏輯\n\nnpm 網址：[https://www.npmjs.com/package/apollo-link-error](https://www.npmjs.com/package/apollo-link-error)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nimport { onError } from 'apollo-link-error';\n\nconst link = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors)\n\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\tconsole.log(\n\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n\t\t\t)\n\t\t);\n\tif (networkError) console.log(`[Network error]: ${networkError}`);\n});\n```\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\n/**\n * Client: graphQL 初始設定\n *\n * middleware & afterware => https://www.apollographql.com/docs/react/advanced/network-layer.html#linkMiddleware\n */\nexport const client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\t// error log middleware\n\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\tif (graphQLErrors)\n\t\t\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: `,\n\t\t\t\t\t\tlocations,\n\t\t\t\t\t\t`Path: `,\n\t\t\t\t\t\tpath\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (networkError) console.error(`[Network error]: ${networkError}`);\n\t\t}),\n\t\tnew createHttpLink({\n\t\t\turi: `${generalConfig.api}/graphql`,\n\t\t\tcredentials: 'include',\n\t\t}),\n\t]),\n\tcache: new InMemoryCache(),\n});\n```\n"},289:function(module,exports){module.exports="# apollo-link\n\napollo-link 是一個標準接口，用於修改 GraphQL 請求的控制流和獲取 GraphQL 結果，旨在提供一個能夠擴展的簡單 GraphQL 客戶端。目標用例如下 apollo-link 所示：\n\n直接獲取查詢而不使用標準化緩存\nApollo Client 的網絡接口\nRelay Modern 的網絡接口\n抓取\nApollo Link 是在應用程序中創建新鏈接的界面。\n\n客戶端將請求作為方法調用發送到鏈接，並且可以從服務器接收一個或多個（在訂閱的情況下）響應。使用 Observer 模式返迴響應\n\n可以通過調用 next(result)觀察者來提供服務器的結果。在網絡/傳輸錯誤（不是 GraphQL 錯誤）的情況下，該 error(err)方法可用於指示不會收到響應。如果鏈接不支持多個響應，complete()則應調用以通知客戶端不再提供其他數據。\n\n在中間鏈接的情況下，第二個參數 request(operation, forward)是指向的鏈接 forward(operation)。forward 返回一個 observable，它可以直接返回或訂閱。\n\nnpm 網址：[https://www.npmjs.com/package/apollo-link](https://www.npmjs.com/package/apollo-link)\n\n## 寫法用法參考\n\n參考 npm 文件\n\n```js\nforward(operation).subscribe({\n\tnext: result => {\n\t\thandleTheResult(result);\n\t},\n\terror: error => {\n\t\thandleTheNetworkError(error);\n\t},\n});\n```\n\n```js\nimport { ApolloLink, Observable } from 'apollo-link';\n\nexport class CustomApolloLink extends ApolloLink {\n\trequest(operation /*, forward*/) {\n\t\t//Whether no one is listening anymore\n\t\tlet unsubscribed = false;\n\n\t\treturn new Observable(observer => {\n\t\t\tsomehowGetOperationToServer(operation, (error, result) => {\n\t\t\t\tif (unsubscribed) return;\n\t\t\t\tif (error) {\n\t\t\t\t\t//Network error\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t} else {\n\t\t\t\t\tobserver.next(result);\n\t\t\t\t\tobserver.complete(); //If subscriptions not supported\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction unsubscribe() {\n\t\t\t\tunsubscribed = true;\n\t\t\t}\n\n\t\t\treturn unsubscribe;\n\t\t});\n\t}\n}\n```\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\n/**\n * Client: graphQL 初始設定\n *\n * middleware & afterware => https://www.apollographql.com/docs/react/advanced/network-layer.html#linkMiddleware\n */\nexport const client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\t// error log middleware\n\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\tif (graphQLErrors)\n\t\t\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: `,\n\t\t\t\t\t\tlocations,\n\t\t\t\t\t\t`Path: `,\n\t\t\t\t\t\tpath\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (networkError) console.error(`[Network error]: ${networkError}`);\n\t\t}),\n\t\tnew createHttpLink({\n\t\t\turi: `${generalConfig.api}/graphql`,\n\t\t\tcredentials: 'include',\n\t\t}),\n\t]),\n\tcache: new InMemoryCache(),\n});\n```\n"},290:function(module,exports){module.exports="# qrcode.react\n\n用於生成 QR 碼的 React 組件。\n\nnpm 網址：[https://www.npmjs.com/package/qrcode.react](https://www.npmjs.com/package/qrcode.react)\n\n## 寫法用法參考\n\n```js\nvar React = require('react');\nvar QRCode = require('qrcode.react');\n\nReact.render(<QRCode value=\"http://facebook.github.io/react/\" />, mountNode);\n```\n\n```js\nimport QRCode from 'qrcode.react';\n\n<QRCode value={`https:${generalConfig.siteUrl}/profile/${pid}`} />;\n```\n"},291:function(module,exports){module.exports="# uuid\n\n簡單，快速生成 RFC4122 UUIDS。\n\n特徵：\n\n支持版本 1,3,4 和 5 UUID\n跨平台\n使用加密強大的隨機數 API（如果可用）\n零依賴，佔地面積小（......但不是很小）\n\n[ 棄用警告：require('uuid')不推薦使用，在此模塊的 3.x 版之後將不再支持。相反，請使用 require('uuid/[v1|v3|v4|v5]')如下面的範例所示。]\n\nnpm 網址：[https://www.npmjs.com/package/uuid](https://www.npmjs.com/package/uuid)\n\n## 寫法用法參考\n\n```js\nconst uuidv1 = require('uuid/v1');\nuuidv1(); // ⇨ '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e'\n```\n\n```js\nconst uuidv3 = require('uuid/v3');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv3('hello.example.com', uuidv3.DNS); // ⇨ '9125a8dc-52ee-365b-a5aa-81b0b3681cf6'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv3('http://example.com/hello', uuidv3.URL); // ⇨ 'c6235813-3ba4-3801-ae84-e0a6ebb7d138'\n\n// ... using a custom namespace\n//\n// Note: Custom namespaces should be a UUID string specific to your application!\n// E.g. the one here was generated using this modules `uuid` CLI.\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\nuuidv3('Hello, World!', MY_NAMESPACE); // ⇨ 'e8b5a51d-11c8-3310-a6ab-367563f20686'\n```\n\n```js\nconst uuidv4 = require('uuid/v4');\nuuidv4(); // ⇨ '10ba038e-48da-487b-96e8-8d3b99b6d18a'\n```\n\n```js\nconst uuidv5 = require('uuid/v5');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv5('hello.example.com', uuidv5.DNS); // ⇨ 'fdda765f-fc57-5604-a269-52a7df8164ec'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv5('http://example.com/hello', uuidv5.URL); // ⇨ '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'\n\n// ... using a custom namespace\n//\n// Note: Custom namespaces should be a UUID string specific to your application!\n// E.g. the one here was generated using this modules `uuid` CLI.\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\nuuidv5('Hello, World!', MY_NAMESPACE); // ⇨ '630eb68f-e0fa-5ecc-887a-7c7a62614681'\n```\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst targetUniKey =\n\tblockType !== 'custom'\n\t\t? targetConfig\n\t\t\t? targetConfig.get('uniKey')\n\t\t\t: uuidv4()\n\t\t: uuidv4();\n```\n"},292:function(module,exports){module.exports="# xstate\n\nJavaScript 和 TypeScript [有限狀態機](https://en.wikipedia.org/wiki/Finite-state_machine)和現代 Web 的[狀態圖](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf)。\n\n文件網址：[https://xstate.js.org/docs/](https://xstate.js.org/docs/)\n\nnpm 網址：[https://www.npmjs.com/package/xstate](https://www.npmjs.com/package/xstate)\n\n## 寫法用法參考\n\n參考文件\n\n```js\nimport { Machine, interpret } from 'xstate';\n\n// Stateless machine definition\n// machine.transition(...) is a pure function used by the interpreter.\nconst toggleMachine = Machine({\n\tid: 'toggle',\n\tinitial: 'inactive',\n\tstates: {\n\t\tinactive: { on: { TOGGLE: 'active' } },\n\t\tactive: { on: { TOGGLE: 'inactive' } },\n\t},\n});\n\n// Machine instance with internal state\nconst toggleService = interpret(toggleMachine)\n\t.onTransition(state => console.log(state.value))\n\t.start();\n// => 'inactive'\n\ntoggleService.send('TOGGLE');\n// => 'active'\n\ntoggleService.send('TOGGLE');\n// => 'inactive'\n```\n\n```js\nimport { Machine } from 'xstate';\nimport { setPrivacyProcess, switchPrivacyProcess } from 'actions/profile';\n\nconst statechart = {\n\tkey: 'privacy',\n\tinitial: 'switchLoading',\n\tstates: {\n\t\t// 顯示當前分享設定 loading\n\t\tswitchLoading: {\n\t\t\tonEntry: [switchPrivacyProcess()],\n\t\t\ton: {\n\t\t\t\tSWITCH_PRIVACY: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'link',\n\t\t\t\t\t\tcond: (extendedState, event) => extendedState.privacy === 'LINK',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'public',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tPRIVACY_ERROR: 'error',\n\t\t\t},\n\t\t},\n\t\tpublic: {\n\t\t\ton: {\n\t\t\t\tSET_PRIVACY: 'setPrivacy',\n\t\t\t},\n\t\t},\n\t\tlink: {\n\t\t\ton: {\n\t\t\t\tSET_PRIVACY: 'setPrivacy',\n\t\t\t},\n\t\t},\n\t\t// 更新資訊開放設定 loading\n\t\tsetPrivacy: {\n\t\t\tonEntry: [setPrivacyProcess()],\n\t\t\ton: {\n\t\t\t\tSET_PRIVACY_SUCCESS: 'switchLoading',\n\t\t\t\tPRIVACY_ERROR: 'error',\n\t\t\t},\n\t\t},\n\t\terror: {},\n\t},\n};\n\nexport default Machine(statechart);\n```\n"},293:function(module,exports){module.exports="# react-apollo\n\nReact Apollo 允許您從 GraphQL 服務器獲取數據，並使用它在使用 React 框架構建複雜和反應式 UI 時使用它。React Apollo 可以在任何可以使用 React 的上下文中使用。在瀏覽器中，在 React Native 中，或在 Node.js 中，當您想要進行服務器端呈現時。\n\n與 React 生態系統中的許多其他工具不同，React Apollo 不需要復雜的構建設置來啟動和運行。只要您擁有 GraphQL 服務器，就可以立即開始使用 React 構建應用程序。阿波羅反應出來的作品與兩個箱子[create-react-app](https://github.com/facebook/create-react-app)和[反應原住民](http://facebook.github.io/react-native/)與單個安裝並沒有額外的麻煩配置通天塔或其他 JavaScript 工具。\n\nReact Apollo 是：\n\n1. 可逐步採用，以便您可以將其放入現有的 JavaScript 應用程序中，並開始使用 GraphQL 作為 UI 的一部分。\n2. 通用兼容，因此 Apollo 適用於任何構建設置，任何 GraphQL 服務器和任何 GraphQL 架構。\n3. 簡單易用，您可以立即開始加載數據並稍後了解高級功能。\n4. 可檢查且易於理解，以便您可以使用出色的開發人員工具來準確了解應用中發生的情況。\n5. 專為交互式應用而構建，因此您的用戶可以立即進行更改並在 UI 中反映出來。\n6. 小而靈活，所以你不會得到你不需要的東西。核心壓縮不到 25kb。\n7. 社區驅動，Apollo 由社區驅動，並提供各種用例。一切都在公開計劃和發展。\n\n文件網址：[https://s3.amazonaws.com/apollo-docs-1.x/index.html](https://s3.amazonaws.com/apollo-docs-1.x/index.html)\n\nnpm 網址：[https://www.npmjs.com/package/react-apollo](https://www.npmjs.com/package/react-apollo)\n\n## 寫法用法參考\n\n參考文件\n\n```js\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n\t// By default, this client will send queries to the\n\t//  `/graphql` endpoint on the same host\n\t// Pass the configuration option { uri: YOUR_GRAPHQL_API_URL } to the `HttpLink` to connect\n\t// to a different host\n\tlink: new HttpLink(),\n\tcache: new InMemoryCache(),\n});\n```\n\n```js\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient();\n```\n\n```js\nimport { ApolloProvider } from 'react-apollo';\n\nReactDOM.render(\n\t<ApolloProvider client={client}>\n\t\t<MyRootComponent />\n\t</ApolloProvider>,\n\tdocument.getElementById('root')\n);\n```\n\n```js\nimport { graphql } from 'react-apollo';\n\nexport default compose(\n\twithRouter,\n\tconnect(\n\t\tmapStateToPorps,\n\t\t{\n\t\t\tprintStart,\n\t\t\tmobileDrawerOpen,\n\t\t\tmobileDrawerClose,\n\t\t\tclearPreviousSimilar,\n\t\t\tfetchAllDataProcessStart,\n\t\t\trequestAddProfileVisitCount,\n\t\t\tprofileDrawerOpen,\n\t\t\tprofileDrawerClose,\n\t\t}\n\t),\n\tgraphql(FETCH_NAMECARD, {\n\t\tname: 'fetchNamecard',\n\t\tskip: ({ source }) => source !== 'publish',\n\t\toptions: ({ match }) => ({\n\t\t\tvariables: {\n\t\t\t\tpid: match.params.pid,\n\t\t\t},\n\t\t\tfetchPolicy: 'network-only',\n\t\t}),\n\t}),\n\tgraphql(FETCH_PUBLISH, {\n\t\tname: 'fetchPublish',\n\t\tskip: ({ source }) => source !== 'publish',\n\t\toptions: ({ match }) => ({\n\t\t\tvariables: {\n\t\t\t\tpid: match.params.pid,\n\t\t\t\tuuid: getURLQuery().t || '',\n\t\t\t},\n\t\t\tfetchPolicy: 'network-only',\n\t\t}),\n\t})\n)(Profile);\n```\n"},294:function(module,exports){module.exports='# react-helmet\n\n這個可重用的 React 組件將管理對文檔頭的所有更改。\n\nHelmet 採用純 HTML 標記並輸出純 HTML 標記。這很簡單，React 初學友好。\n\nnpm 網址：[https://www.npmjs.com/package/react-helmet](https://www.npmjs.com/package/react-helmet)\n\n## 寫法用法參考\n\n參考文件\n\n```js\nimport React from \'react\';\nimport { Helmet } from \'react-helmet\';\n\nclass Application extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className="application">\n\t\t\t\t<Helmet>\n\t\t\t\t\t<meta charSet="utf-8" />\n\t\t\t\t\t<title>My Title</title>\n\t\t\t\t\t<link rel="canonical" href="http://mysite.com/example" />\n\t\t\t\t</Helmet>\n\t\t\t\t...\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n```js\nrenderSEOMeta = profile => {\n\treturn (\n\t\t<Helmet>\n\t\t\t<title>{metaText.title}</title>\n\t\t\t<meta name="description" content={metaText.description} />\n\t\t\t<meta property="og:title" content={metaText.title} />\n\t\t\t<meta property="og:url" content={metaText.url} />\n\t\t\t<meta property="og:description" content={metaText.description} />\n\t\t\t<meta property="og:image" content={metaText.avatar} />\n\t\t\t<meta property="og:image:width" content={metaText.avatarSize} />\n\t\t\t<meta property="og:image:height" content={metaText.avatarSize} />\n\t\t</Helmet>\n\t);\n};\n```\n'},295:function(module,exports){module.exports="# react-sticky-el\n\nSticky library for React. (React 的粘性庫。)\n\nnpm 網址：[https://www.npmjs.com/package/react-sticky-el](https://www.npmjs.com/package/react-sticky-el)\n\nDemos：[Basic](https://rawgit.com/gm0t/react-sticky-el/master/dist/examples/index.html)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nimport React, {Component} from 'react';\nimport Sticky from 'react-sticky-el';\n...\n\nclass App extends Component ({\n  render() {\n    return (\n      ...\n        <Sticky>\n          <header>\n            ...\n          </header>\n        </Sticky>\n      ...\n    );\n  },\n});\n```\n\n```js\nimport React, {Component} from 'react';\nimport Sticky from 'react-sticky-el';\n...\n\nclass App extends Component ({\n  render() {\n    return (\n      <div>\n        <p>....</p>\n        <div className=\"scrollarea\" style={{height: '200px', overflow: 'scroll'}}>\n          <Sticky scrollElement=\".scrollarea\">\n            <h1>Scroll pane</h1>\n          </Sticky>\n        </div>\n        <p>....</p>\n      </div>\n    );\n  },\n});\n```\n\n```js\n<Sticky\n\tboundaryElement={`.toolbar-all`}\n\tstyle={{ position: 'relative', zIndex: '10' }}\n\ttopOffset={-45}\n\tbottomOffset={280}\n\thideOnBoundaryHit={true}\n>\n\t<ToolBarContainer toolbarPrompt={toolbarPrompt}>\n\t\t<ToolButton position=\"last\" vertical={true} last={true}>\n\t\t\t<Tooltip placement=\"right\" title=\"隱藏此區塊\">\n\t\t\t\t<FontIcon\n\t\t\t\t\tclassName={`icon-icon_hibe`}\n\t\t\t\t\tonClick={this.onTriggerRemoveBlock}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t</ToolButton>\n\t</ToolBarContainer>\n</Sticky>\n```\n"},296:function(module,exports){module.exports="# react-addons-shallow-compare\n\n在[React.PureComponent](https://reactjs.org/docs/react-api.html#react.purecomponent)介紹之前，shallowCompare 通常用於實現與[PureRenderMixin](https://www.npmjs.com/package/react-addons-pure-render-mixin)使用 React 的 ES6 類時相同的功能。\n\n如果你的 React 組件的渲染函數是“純粹的”（換句話說，它在給定相同的道具和狀態的情況下呈現相同的結果），你可以使用這個輔助函數在某些情況下提高性能。\n\n> 注意： 這是一個遺留的 React 插件，不再維護。\n>\n> 我們不鼓勵在新代碼中使用它，但它存在向後兼容性。\n>\n> 建議使用遷移路徑[React.PureComponent](https://reactjs.org/docs/react-api.html#react.purecomponent)。\n\nnpm 網址：[https://www.npmjs.com/package/react-addons-shallow-compare](https://www.npmjs.com/package/react-addons-shallow-compare)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nexport class SampleComponent extends React.Component {\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn shallowCompare(this, nextProps, nextState);\n\t}\n\n\trender() {\n\t\treturn <div className={this.props.className}>foo</div>;\n\t}\n}\n```\n\n```js\nimport React, { Component } from 'react';\n// import { isChrome, isChromium } from 'react-device-detect';\nimport shallowCompare from 'react-addons-shallow-compare'; // DEPERECATED: 這是 legacy module，日後\b chrome 修正了 bug 再移除他\n\n/**\n * HACK: Workaround HOC for chrome dragend issue\n * https://github.com/react-dnd/react-dnd/issues/1085\n *\n * TODO: 此 module 間接使得拖曳的效能變好了，日後移除時需重新調校拖曳效能\n */\nexport const withDelayRender = WrappedComponent =>\n\tclass DelayRender extends Component {\n\t\tshouldComponentUpdate = (nextProps, nextState) => {\n\t\t\t// 非 chrome 瀏覽器不會有這層判斷\n\t\t\t// if (!isChrome && !isChromium) return true;\n\n\t\t\tif (shallowCompare(this, nextProps, nextState)) {\n\t\t\t\t// 若判斷需要重 render，延遲指定時間後呼叫 render\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\t// 一律回傳 false 避免立即呼叫 render\n\t\t\treturn false;\n\t\t};\n\n\t\trender() {\n\t\t\treturn <WrappedComponent {...this.props} />;\n\t\t}\n\t};\n```\n"},297:function(module,exports){module.exports="# html2canvas\n\nJavaScript HTML 渲染器\n\n該腳本允許您直接在用戶瀏覽器上截取網頁或部分網頁的“屏幕截圖”。屏幕截圖基於 DOM，因此它可能不是真實表示的 100％準確，因為它沒有製作實際的屏幕截圖，而是根據頁面上可用的信息構建屏幕截圖。\n\nnpm 官方網址：[https://www.npmjs.com/package/html2canvas](https://www.npmjs.com/package/html2canvas)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nhtml2canvas(document.body).then(function(canvas) {\n\tdocument.body.appendChild(canvas);\n});\n```\n\n```js\nimport html2canvas from 'html2canvas';\n\n// util，製作客製化區塊縮圖\nupdateCustomSnapshot = (blockType, uniKey) => {\n\thtml2canvas(document.getElementById(uniKey))\n\t\t.then(canvas => {\n\t\t\tconst url = canvas.toDataURL('image/jpeg');\n\t\t\tconst f = fetch(url)\n\t\t\t\t.then(res => res.blob())\n\t\t\t\t.then(\n\t\t\t\t\tblob =>\n\t\t\t\t\t\tnew File([blob], `custom-snapshot-${uniKey}.png`, {\n\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.then(file => file);\n\t\t\treturn Promise.all([url, f]);\n\t\t})\n\t\t.then(([url, f]) => {\n\t\t\tthis.props.uploadCroppedImage(f, {\n\t\t\t\tcontentType: f.type,\n\t\t\t\tfileName: f.name,\n\t\t\t\tuniKey: uniKey,\n\t\t\t\tidModelName: 'snapshotFileId',\n\t\t\t\turlModelName: 'snapshotFileUrlMap',\n\t\t\t\tcoordinateModelName: 'snapshotCoordinate',\n\t\t\t\tonUpdateData: (index, keyPath, value) => {\n\t\t\t\t\t// 這個 function 不能帶 blockDataUpdateProcessStart 會導致無窮迴圈\n\t\t\t\t\tthis.props.updateCard(uniKey, value, ['snapshotFileId']);\n\t\t\t\t\tconst dataModel = this.props.dataEntity.get(uniKey).toJS();\n\t\t\t\t\tthis.props.requestUpdateCustom({\n\t\t\t\t\t\t...dataModel,\n\t\t\t\t\t\tpid: this.props.user.get('pid'),\n\t\t\t\t\t\tcustomId: uniKey,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t});\n};\n```\n"},298:function(module,exports){module.exports="# bezier-easing\n\nBezierEasing 提供了 Cubic Bezier 曲線緩動，它簡化了緩和功能（緩入，緩出，輕鬆進出，......任何其他自定義曲線），與 CSS Transitions 完全相同。\n\n實現高效查找並不容易，因為它意味著將 X 坐標投影到貝塞爾曲線。這個微型庫使用快速啟發式（涉及二分法搜索，newton-raphson，採樣）來關注性能和精度。\n\n> 它主要基於 Firefox 和 Chrome 中可用的實現（用於 CSS transition-timing-function 屬性）。\n\nnpm 官方網址：[https://www.npmjs.com/package/bezier-easing](https://www.npmjs.com/package/bezier-easing)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nvar easing = BezierEasing(0, 0, 1, 0.5);\n// easing allows to project x in [0.0,1.0] range onto the bezier-curve defined by the 4 points (see schema below).\nconsole.log(easing(0.0)); // 0.0\nconsole.log(easing(0.5)); // 0.3125\nconsole.log(easing(1.0)); // 1.0\n```\n\n```js\nimport BezierEasing from 'bezier-easing';\n\n// 由貝茲曲線計算捲動速率\ngetScrollRate = () => {\n\tconst validDirection = ['toTop', 'toBottom'];\n\tif (validDirection.indexOf(this.state.scrollDirection) === -1) return 0;\n\n\t// http://greweb.me/bezier-easing-editor/example/\n\tconst curve = BezierEasing(1, 0, 1, 1);\n\n\tconst delta =\n\t\tthis.state.scrollDirection === 'toTop'\n\t\t\t? this.state.clientOffset.y / this.state.scrollTriggerThread // toTop\n\t\t\t: (window.innerHeight - this.state.clientOffset.y) /\n\t\t\t  this.state.scrollTriggerThread; // toBottom\n\n\t// 超過 thread 視為無效\n\tif (delta > 1 || delta < 0) return 0;\n\n\treturn (1 - curve(delta)) * this.state.maxDelta;\n};\n```\n"},299:function(module,exports){module.exports='# react-scrollchor\n\n一個 React 組件，用於滾動到#hash 具有平滑動畫的鏈接。Scrollchor 是一個有用組件的混合 Scroll 和 Anchor 笑話名稱。\n\nDemo：[video](https://github.com/some-react-components/react-scrollchor/blob/example/demo/scrollchor.webm?raw=true)\n\nexample [page](https://some-react-components.github.io/react-scrollchor/) and [source code](https://github.com/some-react-components/react-scrollchor/tree/example)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nimport Scrollchor from \'react-scrollchor\';\n\nexport default (props) => (\n  <Page>\n\n    <Navbar brand={brand} className="navbar-fixed-top">\n      <NavItem><Scrollchor to="" className="nav-link">Home</Scrollchor></NavItem>\n      <NavItem><Scrollchor to="#sample-code" className="nav-link">Sample</Scrollchor></NavItem>\n      <NavItem><Scrollchor to="#features" className="nav-link">Features</Scrollchor></NavItem>\n      <NavItem><Scrollchor to="footer" className="nav-link">SignUp</Scrollchor></NavItem>\n    </Navbar>\n\n\n  <Section id="sample-code">\n\n  </Section>\n\n  <div id="features">\n\n  </div>\n\n  <footer id="footer">\n\n  </footer>\n\n</Page>\n```\n\n```js\nimport Scrollchor from \'react-scrollchor\';\n\nrender() {\n  return (\n    <Fragment>\n      <Scrollchor\n        ref="scrollToAnchor"\n        animate={{ offset: -125 }}\n        to={this.state.targetId}\n        disableHistory={true}\n      />\n      <WrappedComponent\n        scrollToAnchor={this.scrollToAnchor}\n        {...this.props}\n      />\n    </Fragment>\n  );\n}\n```\n'},300:function(module,exports){module.exports="# moment-timezone\n\nIANA 時區數據庫+ Moment.js。\n\nnpm 網址：[https://www.npmjs.com/package/moment-timezone](https://www.npmjs.com/package/moment-timezone)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nvar june = moment('2014-06-01T12:00:00Z');\njune.tz('America/Los_Angeles').format('ha z'); // 5am PDT\njune.tz('America/New_York').format('ha z'); // 8am EDT\njune.tz('Asia/Tokyo').format('ha z'); // 9pm JST\njune.tz('Australia/Sydney').format('ha z'); // 10pm EST\n\nvar dec = moment('2014-12-01T12:00:00Z');\ndec.tz('America/Los_Angeles').format('ha z'); // 4am PST\ndec.tz('America/New_York').format('ha z'); // 7am EST\ndec.tz('Asia/Tokyo').format('ha z'); // 9pm JST\ndec.tz('Australia/Sydney').format('ha z'); // 11pm EST\n```\n"},301:function(module,exports){module.exports="# react-html-parser\n\n用於將 HTML 字符串轉換為 React 組件的實用程序。避免使用 dangerouslySetInnerHTML 並將標準 HTML 元素，屬性和內聯樣式轉換為其 React 等效項。\n\nnpm 網址：[https://www.npmjs.com/package/react-html-parser](https://www.npmjs.com/package/react-html-parser)\n\n## 寫法用法參考\n\n```js\nimport React from 'react';\nimport ReactHtmlParser, {\n\tprocessNodes,\n\tconvertNodeToElement,\n\thtmlparser2,\n} from 'react-html-parser';\n\nclass HtmlComponent extends React.Component {\n\trender() {\n\t\tconst html = '<div>Example HTML string</div>';\n\t\treturn <div>{ReactHtmlParser(html)}</div>;\n\t}\n}\n```\n"},302:function(module,exports){module.exports="# path-to-regexp\n\n將路徑字符串/user/:name 轉換為正則表達式。\n\nnpm 網址：[https://www.npmjs.com/package/path-to-regexp](https://www.npmjs.com/package/path-to-regexp)\n\n## 寫法用法參考\n\n```js\nconst regexpNumbers = pathToRegexp('/icon-:foo(\\\\d+).png');\n// keys = [{ name: 'foo', ... }]\n\nregexpNumbers.exec('/icon-123.png');\n//=> ['/icon-123.png', '123']\n\nregexpNumbers.exec('/icon-abc.png');\n//=> null\n\nconst regexpWord = pathToRegexp('/(user|u)');\n// keys = [{ name: 0, ... }]\n\nregexpWord.exec('/u');\n//=> ['/u', 'u']\n\nregexpWord.exec('/users');\n//=> null\n```\n\n```js\nconst tokens = pathToRegexp.parse('/route/:foo/(.*)');\n\nconsole.log(tokens[0]);\n//=> \"/route\"\n\nconsole.log(tokens[1]);\n//=> { name: 'foo', prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '[^\\\\/]+?' }\n\nconsole.log(tokens[2]);\n//=> { name: 0, prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '.*' }\n```\n\n```js\nconst toPath = pathToRegexp.compile('/user/:id');\n\ntoPath({ id: 123 }); //=> \"/user/123\"\ntoPath({ id: 'café' }); //=> \"/user/caf%C3%A9\"\ntoPath({ id: '/' }); //=> \"/user/%2F\"\n\ntoPath({ id: ':/' }); //=> \"/user/%3A%2F\"\ntoPath({ id: ':/' }, { encode: (value, token) => value }); //=> \"/user/:/\"\n\nconst toPathRepeated = pathToRegexp.compile('/:segment+');\n\ntoPathRepeated({ segment: 'foo' }); //=> \"/foo\"\ntoPathRepeated({ segment: ['a', 'b', 'c'] }); //=> \"/a/b/c\"\n\nconst toPathRegexp = pathToRegexp.compile('/user/:id(\\\\d+)');\n\ntoPathRegexp({ id: 123 }); //=> \"/user/123\"\ntoPathRegexp({ id: '123' }); //=> \"/user/123\"\ntoPathRegexp({ id: 'abc' }); //=> Throws `TypeError`.\n```\n\n```js\nimport pathToRegexp from 'path-to-regexp';\n\n/**\n * 檢查是否為指定的 path\n * path 格式參照 pathToRegexp\n * @param {*} routes\n * @param {*} path\n */\nconst isValidRoute = (\n\troutes = [],\n\tpath = window.location.href.replace(window.location.origin, '')\n) => {\n\tfor (let i = 0; i < routes.length; i++) {\n\t\t// null or array\n\t\tif (pathToRegexp(routes[i]).exec(path)) return true;\n\t}\n\treturn false;\n};\n```\n"},303:function(module,exports){module.exports="# flag\n\n功能標記使 React 和 Redux 變得簡單\n\n功能標記對於大型客戶端應用程序是必需的。它們可以提高開發速度，並允許團隊在穩定之前測試新功能。為了 WANT 在應用程序中使用的功能標誌，他們應該是非常容易的添加和刪除。這意味著最小的鍋爐板，無需通過組件層次結構傳遞布爾支柱。這樣的事情可以用全局變量完成; 但是，它們生活在 React / Redux 生命週期之外，使它們更難控制。相反，這個庫會直接從 React 上下文中註入然後訪問功能標誌，而不會妨礙您。\n\nnpm 網址：[https://www.npmjs.com/package/flag](https://www.npmjs.com/package/flag)\n\n## 寫法用法參考\n\n參考官方文件\n\n```js\nconst flags = {\n\t// properties can be nested objects\n\tfeatures: {\n\t\t// they can be boolean\n\t\tuseMyCoolNewThing: true,\n\t},\n\tconfig: {\n\t\t// they can be strings\n\t\tapiUrl: 'www.example.com/api',\n\t},\n\t// they can be numbers\n\tcool: 1,\n\tdude: 5,\n\t// they can be computed\n\tcoolAndDude: flags => flags.cool + flags.dude,\n\t// they can be computed from other computed properties.\n\t// other computed properties are resolved for you, so that you do not\n\t// need to call it as a function.\n\tlargeCoolAndDude: flags => flags.coolAndDude > 10,\n};\n\nimport { Flag } from 'flag';\n\n<Flag\n\tname=\"features.useMyCoolNewThing\"\n\trender={() => <div>Rendered on truthy</div>}\n\tfallbackRender={() => <div>Rendered on falsy</div>}\n/>;\n```\n"},304:function(module,exports){module.exports='# Vue 基礎介紹\n\n重點：\n\n- 數據綁定到 template\n- 使用者輸入的值立即顯示在畫面上\n- 使用 checkbox 做雙向綁定\n\n## data\n\nvue instance 可傳入選項物件，其中可設定 data（資料）。\n\ndata 是用來\n\n- 儲存元件內部狀態或資料\n- 和 v-model 合作實現雙向綁定\n\n## 資料型別\n\ndata 可以是 object 或 function，但元件（component）的 data 只能是 function，這是因為元件內各自擁有自己的 data，而非共用的關係。\n\n## 原理\n\n在 observer 中，data 透過`Object.defineProperty()`為元件內屬性重新定義`getter`和`setter` method。當 data 被修改時，會透過`setter`通知變化，觸發 watcher 重新計算、更新與渲染 DOM element。\n\n元件的 data 只能是 function。\n\n## 數據綁定到 template\n\n```js\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n    <h2>{{ hello }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'hello\',\n  data () {\n    return {\n      // data 這裡就是 model 存放一些資料\n      // 這邊的資料與 tmplate 可以做雙向綁定\n      msg: \'Welcome to Your Vue.js App\',\n      // 嘗試新增一個數據\n      hello: \'Hello Vue 2.0 !\'\n    }\n  }\n}\n<\/script>\n```\n\n由於 vue instance 重新設定了`getter`和`setter`方法，因此 `vm.$data.message` 完全等於 `vm.message`。\n\n```js\nvm.$data.message === vm.message; // true\n```\n\n### 注意\n\n- 自訂屬性名稱不要使用`$`或`_`開頭，以免和 vue 所定義的屬性或 API 衝突。因此，對於使用`$`或`_`開頭命名的屬性，vue 都不會處理。\n- 動態加入的屬性無法擁有 reactivity 的特性（例如：雙向綁定等），因此在建立實體前要先宣告所有會用到的屬性。\n- 如果要對 data 做深拷貝（deep copy），可將 `vm.$data`傳入`JSON.parse(JSON.stringify())`。\n\n## 使用者輸入的值立即顯示在畫面上\n\n```js\n<template>\n  <div class="hello">\n    // 也可以撰寫一些 javascript code\n    <h3>{{ hello + \' and Ironman 2019\' }}</h3>\n    //  加一個 input 來嘗試今天的任務，雙向綁定\n    //  修改 input 裡面的值，綁定的地方也會馬上更新!!\n    <input type="text" v-model="hello" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'hello\',\n  data () {\n    return {\n      hello: \'Hello Vue 2.0 !\'\n    }\n  }\n}\n<\/script>\n```\n\n## v-model\n\nv-model 是綁定在表單元件或自訂元件上，為實現雙向綁定用的。表單元件像是`<input>`、`<select>`和`<textarea>`。\n\n## 使用 checkbox 做雙向綁定\n\n```js\n<template>\n  <div class="hello">\n    // 使用 checkbox 來完成雙向綁定\n    <input type="checkbox" v-model="toggle" />{{ toggle }}\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'hello\',\n  data () {\n    return {\n      toggle: false,\n    }\n  }\n}\n<\/script>\n```\n\n## Checkbox 複選框\n\n使用`v-model` 綁定 toggle 的值：當 toggle 為 true，勾選此項目；當 toggle 為 false，不勾選此項目。\n\n或依據給訂的值決定是否勾選，若 toggle 為 1 則勾選，若 toggle 為 2 則不勾選。\n\n```js\n<template>\n  <div class="hello">\n    // 使用 checkbox 來完成雙向綁定\n    <input\n      type="checkbox"\n      v-model="toggle"\n      :true-value="1"\n      :false-value="2"\n    />{{ toggle }}\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'hello\',\n  data () {\n    return {\n      toggle: 0,\n    }\n  }\n}\n<\/script>\n```\n\n將多個 checkbox 綁定到同一個群組。在這裡設定 group 為一個陣列，裡面存放勾選選項的 value 字串。例如，若 group 為 `["1", "2"]`，則勾選第一個和第二個複選框。\n\n```js\n<div id="app">\n  <input type="checkbox" v-model="group" value="1" /><label>我是複選框 1</label>\n  <input type="checkbox" v-model="group" value="2" /><label>我是複選框 2</label>\n  <input type="checkbox" v-model="group" value="3" /><label>我是複選框 3</label>\n  <div>group = {{ group }}</div>\n</div>\n\n<script>\nexport default {\n  name: \'hello\',\n  data () {\n    return {\n      group: [],\n    }\n  }\n}\n<\/script>\n```\n'},305:function(module,exports){module.exports="# Vue Router\n\n官方網址：[https://router.vuejs.org/zh/installation.html](https://router.vuejs.org/zh/installation.html)\n\n用 Vue.js + Vue Router 創建單頁應用，是非常簡單的。使用 Vue.js，我們已經可以通過組合組件來組成應用程序，當你要把 Vue Router 添加進來，我們需要做的是，將組件 （組件）映射到路由（routes），然後告訴 Vue Router 在哪裡渲染它們。下面是個基本例子\n\n## Router 設定\n\n### main.js\n\n```js\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n\n// init\nVue.use(VueRouter);\n\n// page\nimport Hello from './pages/Hello.vue';\nimport CtoF from './pages/C2F.vue';\nimport App from './App.vue';\n\nconst router = new VueRouter({\n\t// 使用 HTML 5 模式\n\tmode: 'history',\n\tbase: __dirname,\n\t// routre 表\n\troutes: [\n\t\t{\n\t\t\tpath: '/hello',\n\t\t\tname: 'hello',\n\t\t\tcomponent: Hello,\n\t\t},\n\t\t{\n\t\t\tpath: '/c2f',\n\t\t\tname: 'c2f',\n\t\t\tcomponent: CtoF,\n\t\t},\n\t\t// router 轉址\n\t\t{ path: '/*', redirect: '/hello' },\n\t],\n});\n\nnew Vue({\n\tel: '#app',\n\t// router 掛載設定\n\trouter,\n\t// app.vue 掛載並 replace index.html 原始掛載點： <div id=\"app\"></div>\n\trender: h => h(App),\n});\n```\n\n### app.vue 設定\n\n```js\n<template>\n  <div>\n    //\n    //  router-link 就像\n    //  <a href=\"/c2f\">CtoF</a>\n    //  :to 裡面是物件形式，描述要轉跳的目的與需要帶的參數\n    //  目的：考可以用 path 或 name\n    //  在 main.js router 我們是這樣設定的：\n    //  {\n    //    path: '/hello',\n    //    name: 'hello',\n    //    component: Hello\n    //  },\n    //\n    <router-link :to=\"{path: '/hello'}\">Hello</router-link>\n    <router-link :to=\"{name: 'c2f'}\">CtoF</router-link>\n\n    // 轉跳後所載入的 component 最後會顯示在此\n    <router-view></router-view>\n  <div>\n</template>\n```\n"},306:function(module,exports){module.exports='# Vue Computed\n\n`computed` 這個 API 主要負責把原本需撰寫在 template 上面一連串的計算 model 的式子，收成一個類似於 data 的屬性，與 data 不同的地方在於 computed 在 data 改變後會立即回傳計算後的結果。\n\n在 vue 框架設計中，會分門別類的區分各種功能，都有特定的收納地方，覺得撰寫與閱讀起來會很舒服。\n\n> 單純的資料宣告就放在 data\n\n> 需要經過計算才顯示的 data 就放在 computed !!\n\n```js\n<template>\n  <div class="container">\n    \x3c!-- 公式撰寫在 template --\x3e\n    <h2>華氏：{{ celsius * 9/5 + 32 }} °F</h2>\n    \x3c!-- 公式收納在 computed --\x3e\n    <h2>華氏：{{ fahrenheit }} °F</h2>\n    <div class="celsius">\n      攝氏：<input type=\'number\' v-model="celsius" /> °C\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      celsius: 0\n    }\n  },\n  computed: {\n    // ES6:\n    fahrenheit () {\n      // computed 計算後才會顯示到 template 上面。\n      return this.celsius * 9/5 + 32;\n    }\n    // ES5:\n    // fahrenheit: function () {\n    //   return this.celsius * 9/5 + 32;\n    // }\n  }\n}\n<\/script>\n\n<style>\n  .celsius {\n    font-size: 1.5em;\n  }\n</style>\n```\n\ncomputed 是一個 Object 建構子，其中 return 的結果將為此物件所顯示。\n\n因此我們將使用者輸入的 `celsius` 數值計算後 `fahrenheit` 將得到轉換後的結果。\n'},307:function(module,exports){module.exports='# Vue 指令與 methods\n\nvue Directive & vue Option 介紹：\n\n## [vue directive v-if](https://cn.vuejs.org/v2/api/index.html#v-if)\n\n這是一個可以增加在 HTML tag 上面的判斷式，如果條件成立的時候，vue 將會幫你`繪出`元素。\n\n```js\n<h2 v-if="isCelsius">攝氏：{{ celsius }} °C</h2>\n<h2 v-if="!isCelsius">華氏：{{ fahrenheit }} °F</h2>\n```\n\n當 `isCelsius = true` 的時候 vue 將會幫你繪出在瀏覽器上。\n\n結果：`攝氏： °C`\n\n## [vue directive v-show](https://cn.vuejs.org/v2/api/index.html#v-show)\n\n這是一個可以增加在 HTML tag 上面的判斷式，如果條件成立的時候，vue 將會幫你`顯示`元素。\n\n```js\n<span v-show="!isCelsius">攝氏：</span>\n<span v-show="isCelsius">華氏：</span>\n```\n\n當 `isCelsius = true` 的時候 vue 將會幫你顯示在畫面上。\n\n結果：`華氏：`\n\n再 HTML 上面可以觀察到，`不`成立條件的 DOM 被使用 display 隱藏了。\n\n```js\n<div style="display: none;">\n```\n\n到這邊可能會有一個疑問，到底 v-if 與 v-show 有什麼不同呢？\n\nv-if: 當條件成立時，會在瀏覽器上繪製此元素。\nv-show: 當條件`不`成立時，會使用隱藏的方式，不顯示元素。\n\n### 比較圖：\n\n| vue directive | 條件不成立時    |\n| ------------- | --------------- |\n| v-if          | 不繪製此 DOM    |\n| v-show        | 依然存在 DMO 中 |\n\n### 何時 if 何時 show ?\n\n存不存再 DOM 將會對效能比較有直接關係，如果使用 v-show tag 上所綁定的 model 都會雙向的數值計算，雖然畫面上看不到，可是依然在瀏覽器上面改變畫面。\n\n或者使用了 v-if 而此功能會頻繁的做切換，將會在瀏覽器上進行快速插入/刪除 DOM 的動作。\n\n所以如果是包含著一個大區塊的判斷式會比較建議使用 `v-if` 而小型區、頻繁切換的條件或只是文字/ 顏色切換，可以使用 `v-show` 既可。\n\n## [vue directive v-on](https://cn.vuejs.org/v2/api/index.html#v-on)\n\n是 vue 包裝過的事件處理，舉凡最簡單的：\n\n```js\nonclick = \'dosomething();\';\n```\n\n也要改成：\n\n```js\nv-on:click="dosomething"\n```\n\n當然這樣寫有點囉唆，因此有另一種寫法方便我們開發：\n\n```js\n@click="dosomething"\n```\n\n## [vue option methods](https://cn.vuejs.org/v2/api/index.html#methods)\n\n是 vue 建構子當中存放 function 的地方，如 onclick 按下後執行的`函式`可以放在這個區域。\n\n```js\nmethods: {\n  temperatureConversio ( val ) {\n    if ( this.isCelsius ) {\n      alert(\'攝氏: \' + this.celsius );\n    }\n    else {\n      alert(\'華氏: \' + this.fahrenheit );\n    }\n  }\n}\n```\n\n## 參考範例\n\n```js\n<template>\n  <div class="container">\n    <h1>Temperature Conversion</h1>\n    \x3c!-- 切換模式按鈕 --\x3e\n    <input id="toggleTemperature" type="checkbox" v-model="isCelsius">\n    <label for="toggleTemperature">切換：{{ toggleTemperature }}</label>\n\n    \x3c!-- 轉換顯示區域 --\x3e\n    \x3c!-- v-if 條件不成立的區域，不會存在瀏覽器上 --\x3e\n    <h2 v-if="isCelsius">攝氏：{{ celsius }} °C</h2>\n    <h2 v-if="!isCelsius">華氏：{{ fahrenheit }} °F</h2>\n\n    \x3c!-- 使用者輸入區域 --\x3e\n    \x3c!-- v-show 條件不成立的區域會使用 style 隱藏，會存在瀏覽器上 --\x3e\n    <div class="celsius">\n      <span v-show="!isCelsius">攝氏：</span>\n      <span v-show="isCelsius">華氏：</span>\n      <input type=\'number\' v-model="userInput" /> °C\n    </div>\n\n    \x3c!-- alert 顯示計算結果 --\x3e\n    <button @click="temperatureConversio( userInput );">\n      Temperature Conversio\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      userInput: 0,\n\t  // 增加此變數紀錄目前是什麼模式。\n      isCelsius: false,\n    }\n  },\n  computed: {\n    fahrenheit () {\n      return this.userInput * 9/5 + 32;\n    },\n    celsius () {\n      return (this.userInput - 32) * 5/9;\n    },\n    toggleTemperature () {\n      return this.isCelsius ? "攝氏 轉換 華氏" : "華氏 轉換 攝氏";\n    }\n  },\n  methods: {\n    temperatureConversio ( val ) {\n\t  // val 是從 click 傳進來的 userInput 這是示範 function 傳值。\n\t  // 如果不傳值，直接使用 this.userInput 也可以。\n\t  // alert 的內容直接使用 computed 已經幫我計算好的結果。\n      if ( this.isCelsius ) {\n        alert(\'攝氏: \' + this.celsius );\n      }\n      else {\n        alert(\'華氏: \' + this.fahrenheit );\n      }\n    }\n  }\n}\n<\/script>\n\n<style>\n  .userInput {\n    font-size: 30px;\n  }\n</style>\n```\n\n## javascript 中取得 data 或呼叫 methods ?\n\n在 javascript 中如果 methods 需要拿 userInput 的 value 必須加上 `this`。\n\nthis 指向這個 vue 元件本身。\n\n```js\nmethods: {\n  temperatureConversio ( val ) {\n    // 取得 data 資料\n    alert( userInput ); // 錯誤\n    alert( this.userInput ); // 正確\n\n    // 呼叫其他 method\n    someMethod();// 錯誤\n    this.someMethod(); //正確\n  },\n  someMethod () {\n      alert(\'call some method OK!\');\n  }\n}\n```\n'},308:function(module,exports){module.exports="# Vue 生命週期\n\n![image](https://github.com/akayhu/self-components/blob/master/src/file/vueFile/img/vue-lifecycle.png?raw=true)\n\nVue.js 提供實體生命週期鉤子 (instance lifecycle hooks)，讓我們在 instance 不同時期做一些事情。這裡會使用一些 instance method 來強制進入鉤子。\n\n```js\nvar vm = new Vue({\n\tbeforeCreate: function() {\n\t\t//vue instance 被 constructor 建立前\n\t\tconsole.log('beforeCreate');\n\t},\n\tcreated: function() {\n\t\t//vue instance 被 constructor 建立後，在這裡完成 data binding\n\t\tconsole.log('created');\n\t},\n\tbeforeMount: function() {\n\t\t//綁定 DOM 之前\n\t\tconsole.log('beforeMount');\n\t},\n\tmounted: function() {\n\t\t//綁定 DOM 之後\n\t\tconsole.log('mounted');\n\t},\n\tbeforeUpdate: function() {\n\t\t//資料更新，但尚未更新 DOM\n\t\tconsole.log('beforeUpdate');\n\t},\n\tupdated: function() {\n\t\t//因資料更新，而更新 DOM\n\t\tconsole.log('updated');\n\t},\n\tbeforeDestroy: function() {\n\t\t//移除 vue instance 之前\n\t\tconsole.log('beforeDestroy');\n\t},\n\tdestroyed: function() {\n\t\t//移除 vue instance 之後\n\t\tconsole.log('destroyed');\n\t},\n});\n```\n\n- `beforeCreate`: 實例初始化立即叫用，這時還未創建實例，所以任何 Vue 實體中的設定(例如: `data` )都還未配置。\n- `created`: 完成創建實例，這時 Vue 實體中的配置除了 `$el` 外已全部配置，而 `$el` 要在掛載模板後才會配置。\n- `beforeMount`: 在 Vue 實體中的定義被掛載到目標元素之前叫用，這時的 `$el` 會是還未被 Vue 實體中的定義渲染的初始設定模板。\n- `mounted`: Vue 實體上的設置已經安裝上模板，這時的 `$el` 是已經藉由實體中的定義渲染而成的真正的頁面。\n- `beforeUpdate`: 當實體中的 data 產生變化後或是執行 [vm.\\$forceUpdate()](https://vuejs.org/v2/api/#vm-forceUpdate) 叫用，這時的頁面還未被重渲染為改變後的畫面。\n- `updated`: 在重新渲染頁面後叫用，這時的頁面已經被重渲染成改變後的畫面。\n- `beforeDestroy`: 在此實體被銷毀前時叫用，這時實體還是擁有完整的功能。\n- `destroyed`: 此實體被銷毀後叫用，這時實體中的任何定義( `data` 、 `methods`...等)都已被解除綁定，代表在此做的任何操作都會失效。\n\n## beforeCreate, created\n\n打開 console tab，一開始就會看到\n\n```js\nbeforeCreate;\ncreated;\n```\n\n執行`vm.$mount('#app')`，讓實體物件綁定 DOM。\n\n```js\nvm.$mount('#app');\n```\n\n執行結果\n\n```js\nbeforeMount;\nmounted;\n```\n\n在尚未綁定前會呼叫`beforeMount`，綁定後會呼叫`mounted`。\n\n## beforeUpdate, updated\n\n執行`vm.$forceUpdate()`或更新資料，來更新 DOM。\n\n```js\nvm.$forceUpdate();\n```\n\n或修改資料\n\n```js\n<div id=\"app\">${message}</div>\n```\n\n```js\nvar vm = new Vue({\n\tel: '#app',\n\tdelimiters: ['${', '}'],\n\tdata: {\n\t\tmessage: 'Hello World!',\n\t},\n\t//省略\n});\n\nvm.message = 'Message updated!'; //修改資料\n```\n\n執行結果\n\n```js\nbeforeUpdate;\nupdated;\n```\n\n在尚未更新前會呼叫`beforeUpdate`，更新後會呼叫`updated`。\n\n## beforeDestroy, destroyed\n\n銷毀 vm。\n\n執行結果\n\n```js\nbeforeDestroy;\ndestroyed;\n```\n\n在尚未移除前會呼叫`beforeDestroy`，移除後會呼叫`destroyed`。\n\n### 備註\n\n一般狀況使用`v-if`和`v-for`來控制資料即可，不需要用到`vm.$destroy()`。\n如果是使用 server-side rendering，則除了`beforeCreate`和`created`，其他 method 都不會被呼叫。\n\n總結以上，使用 vue instance 是因為它會幫我們在原本的 DOM element 上加料，意即，所有讓我們在開發時更方便的功能都是由 vue instance 幫我們加上去的，像是雙向綁定，而這樣經由 JavaScript 操作 DOM 的方式不得不歸功於 virtual DOM 讓我們能動手腳。\n\n## 參考資料\n\n[https://cythilya.github.io/2017/04/11/vue-instance/](https://cythilya.github.io/2017/04/11/vue-instance/)\n"},309:function(module,exports){module.exports='# Vue Slot\n\nSlot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。\n\n有點像 AngularJS 的 directives\n\n```js\n<template>\n  <div>\n    <TestSlot :user-name="temperatureConversio()">\n      <p slot="aaa" v-if="isCelsius">你知道我在等你嗎</p>\n      <p slot="bbb" v-if="!isCelsius">我不知道</p>\n    </TestSlot>\n  </div>\n</template>\n\n<script>\nimport TestSlot from \'@/components/testSlot\';\n\nexport default {\n  data () {\n    return {\n      isCelsius: false\n    }\n  },\n  methods: {\n    temperatureConversio (val) {\n      if(this.isCelsius) {\n        return \'攝氏\';\n        console.log(\'攝氏： \' + this.celsius);\n      } else {\n        return \'華氏\';\n        console.log(\'華氏： \' + this.fahrenheit);\n      }\n      this.someMethod();\n    }\n  },\n  components: {\n    TestSlot\n  }\n}\n<\/script>\n```\n\ntestSlot.vue\n\n```js\n<template>\n  <div class="slot_class">\n    我是Slot內容<br />\n    <slot name="aaa"></slot>\n    <slot name="bbb"></slot>\n    <button @click="hello(userName)">say hi</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\'user-name\'],\n  methods: {\n    hello (name) {\n      alert(\'Hi! \' + name)\n    }\n  }\n}\n<\/script>\n\n<style>\n  .slot_class {\n    background-color: aquamarine;\n    color: brown;\n    font-size: 18px;\n    padding: 20px;\n    width: 500px;\n    margin: 20px auto;\n  }\n</style>\n```\n\n## 官方範例\n\nModal 範例： [Modal Component](https://vuejs.org/v2/examples/modal.html)\n\n```js\n<script type="text/x-template" id="modal-template">\n  <transition name="modal">\n    <div class="modal-mask">\n      <div class="modal-wrapper">\n        <div class="modal-container">\n\n          <div class="modal-header">\n            <slot name="header">\n              default header\n            </slot>\n          </div>\n\n          <div class="modal-body">\n            <slot name="body">\n              default body\n            </slot>\n          </div>\n\n          <div class="modal-footer">\n\n           <slot name="footer">\n              \x3c!--\n                  如果 slot 本身有包含內容，將會是預設樣式，\n                  也就是說引用頁面如果不需要自己的 footer 將會出現以下樣式\n                  如果崁入自己的 footer 這段將被覆蓋過去。\n              --\x3e\n              default footer\n              <button class="modal-default-button" @click="$emit(\'close\')">\n                OK\n              </button>\n            </slot>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </transition>\n<\/script>\n```\n\n這是一個彈跳視窗、modal 或稱 dialog 官方設計中把：`header`, `body`, `footer` 分別設計好\n在使用的頁面就可以彈性的崁入需要的樣式。\n\n如 body 有時候只需要一段文字詢問用者，或者需要 input 讓使用者在輸入一些資料等..。\n\n而 footer 大概是放 `OK` 或 `cancel` 偶爾也有需要其他按鈕選項，就可以在自己的頁面中彈性加入。\n'},33:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__}),__webpack_require__.d(__webpack_exports__,"task",function(){return task}),__webpack_require__.d(__webpack_exports__,"actions",function(){return actions});var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(50),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_storybook_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(122),_readme_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(173),_readme_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_readme_md__WEBPACK_IMPORTED_MODULE_4__),_task__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(104),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport readme from './readme.md';\nimport Task from './task';\n\nexport const task = {\n  id: 1,\n  title: 'Test Task',\n  state: 'TASK_INBOX',\n  updatedAt: new Date(2018, 0, 1, 9, 0),\n};\n\nexport const actions = {\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n};\n\nconst TaskStories = storiesOf('UI Components|React Components/Task', module);\n\nTaskStories.addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('default', () => <Task task={task} {...actions} />, {\n    notes: { markdown: readme },\n  })\n  .add('pinned', () => <Task task={{ ...task, state: 'TASK_PINNED' }} {...actions} />, { notes: { markdown: readme } })\n  .add('archived', () => <Task task={{ ...task, state: 'TASK_ARCHIVED' }} {...actions} />, {\n    notes: { markdown: readme },\n  });\n",__ADDS_MAP__={},task={id:1,title:"Test Task",state:"TASK_INBOX",updatedAt:new Date(2018,0,1,9,0)},actions={onPinTask:Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__.action)("onPinTask"),onArchiveTask:Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__.action)("onArchiveTask")};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_2__.storiesOf)("UI Components|React Components/Task",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("default",function(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_task__WEBPACK_IMPORTED_MODULE_5__.a,Object.assign({task:task},actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("pinned",function(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_task__WEBPACK_IMPORTED_MODULE_5__.a,Object.assign({task:Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__.a)({},task,{state:"TASK_PINNED"})},actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("archived",function(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_task__WEBPACK_IMPORTED_MODULE_5__.a,Object.assign({task:Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__.a)({},task,{state:"TASK_ARCHIVED"})},actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_4___default.a}})}.call(this,__webpack_require__(22)(module))},412:function(module,exports,__webpack_require__){},435:function(module,exports){module.exports="# DatePicker Component 使用說明\n\n需安裝 [ant](https://ant.design/index-cn) 第三方套件\n\n```\nnpm install antd --save\n```\n\n安裝完記得引入 ant css\n\n```\nimport 'antd/dist/antd.css';\n```\n\nTODO：\n\n- Component 待優化\n- Prop Types 待整理\n"},436:function(module,__webpack_exports__,__webpack_require__){"use strict";var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(43),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(44),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(47),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(45),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(48),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(437),react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);__webpack_require__(412);function _templateObject(){var data=Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_5__.a)(["\n\twidth: ",";\n"]);return _templateObject=function _templateObject(){return data},data}var ModalMain=__webpack_require__(438).a.div(_templateObject(),function(props){return props.width?"".concat(props.width,"px"):"600px"}),Modal=function(_PureComponent){function Modal(){return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.a)(this,Modal),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__.a)(this,Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.a)(Modal).apply(this,arguments))}return Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.a)(Modal,_PureComponent),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.a)(Modal,[{key:"render",value:function render(){var _this$props=this.props,propsClassName=_this$props.propsClassName,children=_this$props.children,width=_this$props.width;return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(ModalMain,{width:width,className:propsClassName?"".concat(propsClassName," modal__container"):"modal__container"},children)}}]),Modal}(react__WEBPACK_IMPORTED_MODULE_6__.PureComponent);__webpack_exports__.a=Modal},440:function(module,exports){module.exports="# Modal Component 使用說明\n\n請在 `body` 內加上覆蓋全背景的 `div`，也可自行改寫 Modal Component。\n帶入的內容可依專案需求面的呈現做調整，此內容為範例。\n\n改寫 sources code 可參考如下：\n\n```js\nimport { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.className = props.className || 'modal-container';\n\t\tthis.el.onclick = e => e.preventPropagation;\n\t}\n\tcomponentDidMount() {\n\t\tmodalRoot.appendChild(this.el);\n\t}\n\tcomponentWillUnmount() {\n\t\tmodalRoot.removeChild(this.el);\n\t}\n\trender() {\n\t\treturn ReactDOM.createPortal(this.props.children, this.el);\n\t}\n}\n\nexport default Modal;\n```\n\n改寫完在 `body` 內加上 `<div id=\"modal-root\" />` 即可。\n\n## 帶入參數說明\n\n| 參數      | 說明              |\n| --------- | ----------------- |\n| propsName | 要帶入的 class 名 |\n| width     | Modal 寬度        |\n\n## TODO\n\n關閉鈕、取消鈕\n"},441:function(module,__webpack_exports__,__webpack_require__){"use strict";var defineProperty=__webpack_require__(123),classCallCheck=__webpack_require__(43),createClass=__webpack_require__(44),possibleConstructorReturn=__webpack_require__(47),getPrototypeOf=__webpack_require__(45),inherits=__webpack_require__(48),react=__webpack_require__(1),react_default=__webpack_require__.n(react),moment=__webpack_require__(57),moment_default=__webpack_require__.n(moment),es_select=__webpack_require__(879),message=__webpack_require__(882),es_checkbox=__webpack_require__(881),popover=__webpack_require__(880),time_getDuration=function getDuration(){var startTime=arguments.length>0&&void 0!==arguments[0]?arguments[0]:moment_default()(),endTime=arguments.length>1&&void 0!==arguments[1]?arguments[1]:moment_default()();if(!moment_default.a.isMoment(startTime))return console.error("startTime must be valid moment object in getDuration, ",startTime),!1;if(!moment_default.a.isMoment(endTime))return console.error("endTime must be valid moment object in getDuration, ",endTime),!1;var diffYear=endTime.diff(startTime,"years"),diffMonth=Math.floor(endTime.diff(startTime,"months",!0));if(0===diffYear&&0===diffMonth)return"未滿1個月";var text="";return diffYear>0&&(text+="".concat(diffYear,"年")),diffMonth%12>0&&(text+="".concat(diffMonth%12,"個月")),text},Option=(__webpack_require__(782),es_select.a.Option),OptGroup=es_select.a.OptGroup,today=new Date,defaultTime={startYear:2015,startMonth:1,endYear:today.getFullYear(),endMonth:today.getMonth()+1},datePicker_DatePicker=function(_Component){function DatePicker(props){var _this;return Object(classCallCheck.a)(this,DatePicker),(_this=Object(possibleConstructorReturn.a)(this,Object(getPrototypeOf.a)(DatePicker).call(this,props))).handleChange=function(value,name){_this.setState(function(state){var _ref;return _ref={},Object(defineProperty.a)(_ref,name,value),Object(defineProperty.a)(_ref,"stillWorking","endYear"!==name&&"endMonth"!==name&&state.stillWorking),_ref})},_this.renderYear=function(name){var year=[];if("endYear"===name)for(var i=Number(_this.state.startYear);i<=today.getFullYear();i+=1)year.push(i);else for(var _i=1970;_i<=today.getFullYear();_i+=1)year.push(_i);return year.map(function(yearNumber,index){return react_default.a.createElement(Option,{key:index,value:yearNumber},yearNumber)})},_this.renderMonth=function(name){var month=[1,2,3,4,5,6,7,8,9,10,11,12],_this$state=_this.state,startYear=_this$state.startYear,endYear=_this$state.endYear,startMonth=_this$state.startMonth;return"endMonth"===name&&Number(startYear)===Number(endYear)&&(month=month.filter(function(item){return Number(item)>=Number(startMonth)})),month.map(function(monthNumber,index){return react_default.a.createElement(Option,{key:index,value:monthNumber},monthNumber)})},_this.renderTime=function(yearValue,yearName,monthValue,monthName){var _this$state2=_this.state,startYear=_this$state2.startYear,startMonth=_this$state2.startMonth,endYear=_this$state2.endYear,endMonth=_this$state2.endMonth,stillWorking=_this$state2.stillWorking;return react_default.a.createElement(react.Fragment,null,react_default.a.createElement(es_select.a,{defaultValue:Number(yearValue),value:"startYear"===yearName?startYear:endYear,style:{width:95},onChange:function onChange(value){return _this.handleChange(value,yearName)},disabled:!("endYear"!==yearName||!stillWorking)},react_default.a.createElement(OptGroup,{label:"年份"},_this.renderYear(yearName))),react_default.a.createElement("span",null," 年 "),react_default.a.createElement(es_select.a,{defaultValue:Number(monthValue),value:"startMonth"===monthName?startMonth:endMonth,style:{width:90},onChange:function onChange(value){return _this.handleChange(value,monthName)},disabled:!("endMonth"!==monthName||!stillWorking)},react_default.a.createElement(OptGroup,{label:"月份"},_this.renderMonth(monthName))),react_default.a.createElement("span",null," 月"))},_this.renderSeniority=function(){var _this$props=_this.props,showSeniority=_this$props.showSeniority,seniorityClassName=_this$props.seniorityClassName,stillWorking=_this$props.stillWorking,startYear=_this$props.startYear,startMonth=_this$props.startMonth,endYear=_this$props.endYear,endMonth=_this$props.endMonth;if(!showSeniority)return null;var startTime=moment_default()({year:startYear||defaultTime.startYear,month:(startMonth||defaultTime.startMonth)-1}),endTime=stillWorking?moment_default()():moment_default()({year:endYear||defaultTime.endYear,month:(endMonth||defaultTime.endMonth)-1}),seniorityText=time_getDuration(startTime,endTime);return seniorityText?react_default.a.createElement("span",{className:seniorityClassName},"(",seniorityText,")"):null},_this.hide=function(){var _this$state3=_this.state,startYear=_this$state3.startYear,startMonth=_this$state3.startMonth,endYear=_this$state3.endYear,endMonth=_this$state3.endMonth,stillWorking=_this$state3.stillWorking;_this.setState(function(state){return{endYear:stillWorking?today.getFullYear():state.endYear,endMonth:stillWorking?today.getMonth()+1:state.endMonth}},function(){endYear<startYear||startYear===endYear&&endMonth<startMonth?message.a.error("時間期間錯誤，請再重新確認一下時間。"):(_this.setState({visible:!1}),_this.props.onUpdateData(startYear,startMonth,stillWorking?null:endYear,stillWorking?null:endMonth,stillWorking))})},_this.toggleStillWorking=function(e){_this.setState(function(state){return{stillWorking:!state.stillWorking}})},_this.renderContent=function(){var _this$props2=_this.props,startYear=_this$props2.startYear,startMonth=_this$props2.startMonth,endYear=_this$props2.endYear,endMonth=_this$props2.endMonth,showStillWorking=_this$props2.showStillWorking,stillWorkingText=_this$props2.stillWorkingText,stillWorking=_this.state.stillWorking;return react_default.a.createElement("div",{className:"datePicker-main"},react_default.a.createElement("div",{className:"datePicker-main--startTimeBlock"},"開始時間：",_this.renderTime(startYear||defaultTime.startYear,"startYear",startMonth||defaultTime.startMonth,"startMonth")),"結束時間：",_this.renderTime(endYear,"endYear",endMonth,"endMonth"),react_default.a.createElement("div",{className:"datePicker-main--timeConfirmationButton"},react_default.a.createElement("div",null,showStillWorking&&react_default.a.createElement(es_checkbox.a,{defaultChecked:stillWorking,checked:stillWorking,onChange:_this.toggleStillWorking},stillWorkingText)),react_default.a.createElement("div",null,react_default.a.createElement("button",{onClick:_this.hide},"確認"))))},_this.handleVisibleChange=function(visible){var _this$props3=_this.props,startYear=_this$props3.startYear,startMonth=_this$props3.startMonth,endYear=_this$props3.endYear,endMonth=_this$props3.endMonth,stillWorking=_this$props3.stillWorking;_this.setState({visible:visible,startYear:Number(startYear)||defaultTime.startYear,startMonth:Number(startMonth)||defaultTime.startMonth,endYear:Number(endYear)||defaultTime.endYear,endMonth:Number(endMonth)||defaultTime.endMonth,stillWorking:stillWorking})},_this.renderDatePickerContent=function(){var _this$props4=_this.props,showStillWorking=_this$props4.showStillWorking,stillWorking=_this$props4.stillWorking,stillWorkingText=_this$props4.stillWorkingText,startYear=_this$props4.startYear,startMonth=_this$props4.startMonth,endYear=_this$props4.endYear,endMonth=_this$props4.endMonth,popoverClassName=_this$props4.popoverClassName,dashClassName=_this$props4.dashClassName,title=_this$props4.title,visible=_this.state.visible;return react_default.a.createElement("span",{className:popoverClassName},react_default.a.createElement(popover.a,{content:_this.renderContent(),title:title,trigger:"click",visible:visible,placement:"bottom",onVisibleChange:_this.handleVisibleChange},"".concat(startYear||defaultTime.startYear,"年"),"".concat(startMonth||defaultTime.startMonth,"月"),react_default.a.createElement("span",{className:dashClassName}," ~ "),showStillWorking&&stillWorking?react_default.a.createElement("span",null,stillWorkingText):react_default.a.createElement("span",null,"".concat(endYear||defaultTime.endYear,"年"),"".concat(endMonth||defaultTime.endMonth,"月")),_this.renderSeniority()))},_this.renderDatePickerView=function(){var _this$props5=_this.props,showStillWorking=_this$props5.showStillWorking,stillWorking=_this$props5.stillWorking,stillWorkingText=_this$props5.stillWorkingText,startYear=_this$props5.startYear,startMonth=_this$props5.startMonth,endYear=_this$props5.endYear,endMonth=_this$props5.endMonth,dashClassName=_this$props5.dashClassName;return react_default.a.createElement(react.Fragment,null,"".concat(startYear||defaultTime.startYear,"年"),"".concat(startMonth||defaultTime.startMonth,"月"),react_default.a.createElement("span",{className:dashClassName}," ~ "),showStillWorking&&stillWorking?react_default.a.createElement("span",null,stillWorkingText):react_default.a.createElement("span",null,"".concat(endYear||defaultTime.endYear,"年"),"".concat(endMonth||defaultTime.endMonth,"月")))},_this.state={startYear:Number(props.startYear)||defaultTime.startYear,startMonth:Number(props.startMonth)||defaultTime.startMonth,endYear:Number(props.endYear)||defaultTime.endYear,endMonth:Number(props.endMonth)||defaultTime.endMonth,visible:!1,stillWorking:props.stillWorking||!1},_this}return Object(inherits.a)(DatePicker,_Component),Object(createClass.a)(DatePicker,[{key:"render",value:function render(){return this.props.editable?this.renderDatePickerContent():this.renderDatePickerView()}}]),DatePicker}(react.Component);datePicker_DatePicker.defaultProps={startYear:defaultTime.startYear,startMonth:defaultTime.startMonth,endYear:defaultTime.endYear,endMonth:defaultTime.endMonth,onUpdateData:function onUpdateData(){},editable:!1,showStillWorking:!1,showSeniority:!1,stillWorking:!1,stillWorkingText:"仍在職",title:"選擇時間",popoverClassName:"default-popover-style",dashClassName:"",seniorityClassName:"default-seniority-style"};__webpack_exports__.a=datePicker_DatePicker},443:function(module,exports,__webpack_require__){__webpack_require__(444),__webpack_require__(530),module.exports=__webpack_require__(531)},531:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(10),storybook_addon_react_docgen__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(421),_storybook_addon_options__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(422),_storybook_addon_knobs_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(423),_storybook_theming__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(424);__webpack_require__(707),__webpack_require__(708);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addDecorator)(storybook_addon_react_docgen__WEBPACK_IMPORTED_MODULE_1__.withPropsTable),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addDecorator)(_storybook_addon_knobs_react__WEBPACK_IMPORTED_MODULE_3__.withKnobs),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addParameters)({options:{theme:_storybook_theming__WEBPACK_IMPORTED_MODULE_4__.themes},backgrounds:[{name:"twitter",value:"#00aced",default:!0},{name:"facebook",value:"#3b5998"}]}),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addDecorator)(Object(_storybook_addon_options__WEBPACK_IMPORTED_MODULE_2__.withOptions)({name:"自己的 Storybook"})),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)(function loadStories(){var req=__webpack_require__(709);req.keys().forEach(function(filename){return req(filename)})},module)}.call(this,__webpack_require__(22)(module))},58:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return data});var _image_cover_jpg__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(129),_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0__),_image_bg_png__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(130),_image_bg_png__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_image_bg_png__WEBPACK_IMPORTED_MODULE_1__),data=[{link:"https://www.google.com",linkTitle:"Google",defultUserImage:"",defultBgImage:"",userImage:_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0___default.a,bgImage:_image_bg_png__WEBPACK_IMPORTED_MODULE_1___default.a,userName:"孫悟空",introduction:"孫悟空，是小說《西遊記》中主要角色之一。又名孫行者，自封花果山美猴王、齊天大聖。曾任天官弼馬溫。玉帝後來為了招安孫悟空，承認了他自封的封號齊天大聖。取經後為如來佛祖授為鬪戰勝佛。"},{link:"https://www.google.com",linkTitle:"Google",defultUserImage:"",defultBgImage:"",userImage:_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0___default.a,bgImage:_image_bg_png__WEBPACK_IMPORTED_MODULE_1___default.a,userName:"孫悟空",introduction:"孫悟空，是小說《西遊記》中主要角色之一。又名孫行者，自封花果山美猴王、齊天大聖。曾任天官弼馬溫。玉帝後來為了招安孫悟空，承認了他自封的封號齊天大聖。取經後為如來佛祖授為鬪戰勝佛。"},{link:"https://www.google.com",linkTitle:"Google",defultUserImage:"",defultBgImage:"",userImage:_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0___default.a,bgImage:_image_bg_png__WEBPACK_IMPORTED_MODULE_1___default.a,userName:"孫悟空",introduction:"孫悟空，是小說《西遊記》中主要角色之一。又名孫行者，自封花果山美猴王、齊天大聖。曾任天官弼馬溫。玉帝後來為了招安孫悟空，承認了他自封的封號齊天大聖。取經後為如來佛祖授為鬪戰勝佛。"},{link:"https://www.google.com",linkTitle:"Google",defultUserImage:"",defultBgImage:"",userImage:_image_cover_jpg__WEBPACK_IMPORTED_MODULE_0___default.a,bgImage:_image_bg_png__WEBPACK_IMPORTED_MODULE_1___default.a,userName:"孫悟空",introduction:"孫悟空，是小說《西遊記》中主要角色之一。又名孫行者，自封花果山美猴王、齊天大聖。曾任天官弼馬溫。玉帝後來為了招安孫悟空，承認了他自封的封號齊天大聖。取經後為如來佛祖授為鬪戰勝佛。"}]},599:function(module,exports,__webpack_require__){var map={"./nestedObjectAssign":371,"./nestedObjectAssign.js":371};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=599},708:function(module,exports,__webpack_require__){},709:function(module,exports,__webpack_require__){var map={"./components/card/card.stories.js":710,"./components/datePicker/dataPicker.stories.js":713,"./components/modal/modal.stories.js":803,"./components/task/task.stories.js":33,"./components/taskList/taskList.stories.js":804,"./file/cssFile/cssFile.stories.js":805,"./file/httpFile/httpFile.stories.js":868,"./file/installFile/installFile.stories.js":869,"./file/javascriptFile/javascriptFile.stories.js":870,"./file/nodeFile/nodeFile.stories.js":871,"./file/phpFile/phpFile.stories.js":872,"./file/reactFile/reactFile.stories.js":873,"./file/thirdPartyFile/thirdPartyFile.stories.js":874,"./file/vueFile/vueFile.stories.js":875};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=709},710:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),_card__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(218),_readme_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(219),_readme_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_readme_md__WEBPACK_IMPORTED_MODULE_3__),_cardData__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(58),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport Card from './card';\nimport readme from './readme.md';\nimport { data } from './cardData';\n\nconst card = storiesOf('UI Components|React Components/小名片', module);\n\ncard\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add(\n    '<Card> 小名片',\n    () => (\n      <div style={{ width: '300px' }}>\n        <Card\n          key={data[0].index}\n          link={data[0].link}\n          linkTitle={data[0].linkTitle}\n          userImage={data[0].userImage}\n          bgImage={data[0].bgImage}\n          userName={data[0].userName}\n          introduction={data[0].introduction}\n        />\n      </div>\n    ),\n    {\n      notes: { markdown: readme },\n    }\n  )\n  .add(\n    '<Card> 小名片列表',\n    () => (\n      <div\n        style={{\n          flexWrap: 'wrap',\n          display: 'flex',\n          alignContent: 'flex-start',\n          width: '100%',\n        }}\n      >\n        {data.map((data, index) => (\n          <Card\n            key={index}\n            link={data.link}\n            linkTitle={data.linkTitle}\n            userImage={data.userImage}\n            bgImage={data.bgImage}\n            userName={data.userName}\n            introduction={data.introduction}\n          />\n        ))}\n      </div>\n    ),\n    {\n      notes: { markdown: readme },\n    }\n  );\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("UI Components|React Components/小名片",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("<Card> 小名片",function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{width:"300px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_card__WEBPACK_IMPORTED_MODULE_2__.a,{key:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].index,link:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].link,linkTitle:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].linkTitle,userImage:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].userImage,bgImage:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].bgImage,userName:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].userName,introduction:_cardData__WEBPACK_IMPORTED_MODULE_4__.a[0].introduction}))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("<Card> 小名片列表",function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{flexWrap:"wrap",display:"flex",alignContent:"flex-start",width:"100%"}},_cardData__WEBPACK_IMPORTED_MODULE_4__.a.map(function(data,index){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_card__WEBPACK_IMPORTED_MODULE_2__.a,{key:index,link:data.link,linkTitle:data.linkTitle,userImage:data.userImage,bgImage:data.bgImage,userName:data.userName,introduction:data.introduction})}))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_3___default.a}})}.call(this,__webpack_require__(22)(module))},712:function(module,exports,__webpack_require__){},713:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__}),__webpack_require__.d(__webpack_exports__,"data",function(){return data}),__webpack_require__.d(__webpack_exports__,"actions",function(){return actions});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(122),_datePicker__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(441),_readme_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(435),_readme_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_readme_md__WEBPACK_IMPORTED_MODULE_4__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport DatePicker from './datePicker';\nimport readme from './readme.md';\n\nexport const data = {\n  startYear: 1998,\n  startMonth: 6,\n  endYear: 2015,\n  endMonth: 6,\n};\n\nexport const actions = {\n  submitEditable: action('submitEditable'),\n};\n\nconst dataPicker = storiesOf('UI Components|React Components/Popover時間選擇器', module);\n\ndataPicker\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add(\n    '<DatePicker> 編輯狀態',\n    () => (\n      <DatePicker\n        startYear={data.startYear}\n        startMonth={data.startMonth}\n        endYear={data.endYear}\n        endMonth={data.endMonth}\n        onUpdateData={actions.submitEditable}\n        editable={true}\n        title=\"時間\"\n      />\n    ),\n    {\n      notes: { markdown: readme },\n    }\n  );\n",__ADDS_MAP__={},data={startYear:1998,startMonth:6,endYear:2015,endMonth:6},actions={submitEditable:Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)("submitEditable")};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("UI Components|React Components/Popover時間選擇器",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("<DatePicker> 編輯狀態",function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_datePicker__WEBPACK_IMPORTED_MODULE_3__.a,{startYear:data.startYear,startMonth:data.startMonth,endYear:data.endYear,endMonth:data.endMonth,onUpdateData:actions.submitEditable,editable:!0,title:"時間"})},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_4___default.a}})}.call(this,__webpack_require__(22)(module))},782:function(module,exports,__webpack_require__){},803:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),_modal__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(436),_readme_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(440),_readme_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_readme_md__WEBPACK_IMPORTED_MODULE_3__),withStorySource=(__webpack_require__(412),__webpack_require__(26).withStorySource),__STORY__="import React, { Fragment } from 'react';\nimport { storiesOf } from '@storybook/react';\nimport Modal from './modal';\nimport readme from './readme.md';\nimport './style.css';\n\nconst submit = () => {\n  console.log('ok! submit');\n};\n\nconst modal = storiesOf('UI Components|React Components/Modal 對話框', module);\n\nmodal\n  .addDecorator(story => <div>{story()}</div>)\n  .add(\n    '<Modal> 對話框',\n    () => (\n      <Fragment>\n        <Modal propsClassName=\"modal__upload modal__tag-position\" width=\"800\">\n          <div className=\"modal__title\">\n            <h3>我是標題</h3>\n          </div>\n          <div className=\"modal__content\">\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n            中間內容\n            <br />\n          </div>\n          <div className=\"modal__button\">\n            <button onClick={submit}>確定</button>\n          </div>\n        </Modal>\n        <div className=\"index__bg\" />\n      </Fragment>\n    ),\n    {\n      notes: { markdown: readme },\n    }\n  );\n",__ADDS_MAP__={},submit=function submit(){console.log("ok! submit")};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("UI Components|React Components/Modal 對話框",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,story())}).add("<Modal> 對話框",function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_modal__WEBPACK_IMPORTED_MODULE_2__.a,{propsClassName:"modal__upload modal__tag-position",width:"800"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"modal__title"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3",null,"我是標題")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"modal__content"},"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"中間內容",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"modal__button"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{onClick:submit},"確定"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"index__bg"}))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_3___default.a}})}.call(this,__webpack_require__(22)(module))},804:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__}),__webpack_require__.d(__webpack_exports__,"defaultTasks",function(){return defaultTasks}),__webpack_require__.d(__webpack_exports__,"withPinnedTasks",function(){return withPinnedTasks});var _home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(128),_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(50),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__),_storybook_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),_taskList__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(131),_readme_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(132),_readme_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_readme_md__WEBPACK_IMPORTED_MODULE_5__),_task_task_stories__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(33),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport TaskList from './taskList';\nimport readme from './readme.md';\nimport { task, actions } from '../task/task.stories';\n\nexport const defaultTasks = [\n  { ...task, id: 1, title: 'Task 1' },\n  { ...task, id: 2, title: 'Task 2' },\n  { ...task, id: 3, title: 'Task 3' },\n  { ...task, id: 4, title: 'Task 4' },\n  { ...task, id: 5, title: 'Task 5' },\n  { ...task, id: 6, title: 'Task 6' },\n];\n\nexport const withPinnedTasks = [...defaultTasks.slice(0, 5), { id: 6, title: 'Task 6 (pinned)', state: 'TASK_PINNED' }];\n\nconst TaskListStories = storiesOf('UI Components|React Components/TaskList', module);\n\nTaskListStories.addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('default', () => <TaskList tasks={defaultTasks} {...actions} />, {\n    notes: { markdown: readme },\n  })\n  .add('withPinnedTasks', () => <TaskList tasks={withPinnedTasks} {...actions} />, { notes: { markdown: readme } })\n  .add('loading', () => <TaskList loading tasks={[]} {...actions} />, {\n    notes: { markdown: readme },\n  })\n  .add('empty', () => <TaskList tasks={[]} {...actions} />, {\n    notes: { markdown: readme },\n  });\n",__ADDS_MAP__={},defaultTasks=[Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:1,title:"Task 1"}),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:2,title:"Task 2"}),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:3,title:"Task 3"}),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:4,title:"Task 4"}),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:5,title:"Task 5"}),Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__.a)({},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.task,{id:6,title:"Task 6"})],withPinnedTasks=[].concat(Object(_home_travis_build_akayhu_self_components_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.a)(defaultTasks.slice(0,5)),[{id:6,title:"Task 6 (pinned)",state:"TASK_PINNED"}]);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_3__.storiesOf)("UI Components|React Components/TaskList",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("default",function(){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_taskList__WEBPACK_IMPORTED_MODULE_4__.a,Object.assign({tasks:defaultTasks},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("withPinnedTasks",function(){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_taskList__WEBPACK_IMPORTED_MODULE_4__.a,Object.assign({tasks:withPinnedTasks},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("loading",function(){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_taskList__WEBPACK_IMPORTED_MODULE_4__.a,Object.assign({loading:!0,tasks:[]},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("empty",function(){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_taskList__WEBPACK_IMPORTED_MODULE_4__.a,Object.assign({tasks:[]},_task_task_stories__WEBPACK_IMPORTED_MODULE_6__.actions))},{notes:{markdown:_readme_md__WEBPACK_IMPORTED_MODULE_5___default.a}})}.call(this,__webpack_require__(22)(module))},805:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_rwdSize_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(223),_rwdSize_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_rwdSize_md__WEBPACK_IMPORTED_MODULE_3__),_pixelToEm_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(224),_pixelToEm_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_pixelToEm_md__WEBPACK_IMPORTED_MODULE_4__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport rwdSize from './rwdSize.md';\nimport pixelToEm from './pixelToEm.md';\n\nconst cssFile = storiesOf('筆記|CSS', module);\n\ncssFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('RWD 各尺寸參考', doc(rwdSize), { notes: { markdown: rwdSize } })\n  .add('px 與 em 轉換', doc(pixelToEm), { notes: { markdown: pixelToEm } });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|CSS",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("RWD 各尺寸參考",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_rwdSize_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_rwdSize_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("px 與 em 轉換",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_pixelToEm_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_pixelToEm_md__WEBPACK_IMPORTED_MODULE_4___default.a}})}.call(this,__webpack_require__(22)(module))},868:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_httpHeader_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(225),_httpHeader_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_httpHeader_md__WEBPACK_IMPORTED_MODULE_3__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport httpHeader from './httpHeader.md';\n\nconst httpFile = storiesOf('筆記|通訊協定', module);\n\nhttpFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('HTTP 訊息的 header', doc(httpHeader), {\n    notes: { markdown: httpHeader },\n  });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|通訊協定",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("HTTP 訊息的 header",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_httpHeader_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_httpHeader_md__WEBPACK_IMPORTED_MODULE_3___default.a}})}.call(this,__webpack_require__(22)(module))},869:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_react_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(226),_react_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_react_md__WEBPACK_IMPORTED_MODULE_3__),_storybook_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(227),_storybook_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_storybook_md__WEBPACK_IMPORTED_MODULE_4__),_rubyInstall_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(228),_rubyInstall_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_rubyInstall_md__WEBPACK_IMPORTED_MODULE_5__),_gitInstall_md__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(229),_gitInstall_md__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_gitInstall_md__WEBPACK_IMPORTED_MODULE_6__),_onlineLearning_md__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(230),_onlineLearning_md__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_onlineLearning_md__WEBPACK_IMPORTED_MODULE_7__),_travis_ci_md__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(231),_travis_ci_md__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_travis_ci_md__WEBPACK_IMPORTED_MODULE_8__),_vsCode_md__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(232),_vsCode_md__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(_vsCode_md__WEBPACK_IMPORTED_MODULE_9__),_phpInstall_md__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(233),_phpInstall_md__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(_phpInstall_md__WEBPACK_IMPORTED_MODULE_10__),_gitSSHConnection_md__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(234),_gitSSHConnection_md__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(_gitSSHConnection_md__WEBPACK_IMPORTED_MODULE_11__),_vueInstall_md__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(235),_vueInstall_md__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(_vueInstall_md__WEBPACK_IMPORTED_MODULE_12__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport react from './react.md';\nimport storybook from './storybook.md';\nimport rubyInstall from './rubyInstall.md';\nimport gitInstall from './gitInstall.md';\nimport onlineLearning from './onlineLearning.md';\nimport travisCi from './travis-ci.md';\nimport vsCode from './vsCode.md';\nimport phpInstall from './phpInstall.md';\nimport gitSSHConnection from './gitSSHConnection.md';\nimport vueInstall from './vueInstall.md';\n\nconst installFile = storiesOf('筆記|環境安裝與學習資源', module);\n\ninstallFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('安裝 React 開發環境', doc(react), { notes: { markdown: react } })\n  .add('安裝 Storybook 環境', doc(storybook), {\n    notes: { markdown: storybook },\n  })\n  .add('安裝 Vue 開發環境', doc(vueInstall), {\n    notes: { markdown: vueInstall },\n  })\n  .add('安裝 PHP Laravel 開發環境', doc(phpInstall), {\n    notes: { markdown: phpInstall },\n  })\n  .add('Apple Mac 安裝 Git 教學', doc(gitInstall), {\n    notes: { markdown: gitInstall },\n  })\n  .add('Apple Mac 安裝 Ruby 教學', doc(rubyInstall), {\n    notes: { markdown: rubyInstall },\n  })\n  .add('Git 建立 SSH Key 教學', doc(gitSSHConnection), {\n    notes: { markdown: gitSSHConnection },\n  })\n  .add('GitHub Pages 與 Travis CI 串接教學', doc(travisCi), {\n    notes: { markdown: travisCi },\n  })\n  .add('Visual Studio Code 推薦安裝套件', doc(vsCode), {\n    notes: { markdown: vsCode },\n  })\n  .add('線上學習資源', doc(onlineLearning), {\n    notes: { markdown: onlineLearning },\n  });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|環境安裝與學習資源",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("安裝 React 開發環境",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_react_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_react_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("安裝 Storybook 環境",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_storybook_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_storybook_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("安裝 Vue 開發環境",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueInstall_md__WEBPACK_IMPORTED_MODULE_12___default.a),{notes:{markdown:_vueInstall_md__WEBPACK_IMPORTED_MODULE_12___default.a}}).add("安裝 PHP Laravel 開發環境",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_phpInstall_md__WEBPACK_IMPORTED_MODULE_10___default.a),{notes:{markdown:_phpInstall_md__WEBPACK_IMPORTED_MODULE_10___default.a}}).add("Apple Mac 安裝 Git 教學",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_gitInstall_md__WEBPACK_IMPORTED_MODULE_6___default.a),{notes:{markdown:_gitInstall_md__WEBPACK_IMPORTED_MODULE_6___default.a}}).add("Apple Mac 安裝 Ruby 教學",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_rubyInstall_md__WEBPACK_IMPORTED_MODULE_5___default.a),{notes:{markdown:_rubyInstall_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("Git 建立 SSH Key 教學",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_gitSSHConnection_md__WEBPACK_IMPORTED_MODULE_11___default.a),{notes:{markdown:_gitSSHConnection_md__WEBPACK_IMPORTED_MODULE_11___default.a}}).add("GitHub Pages 與 Travis CI 串接教學",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_travis_ci_md__WEBPACK_IMPORTED_MODULE_8___default.a),{notes:{markdown:_travis_ci_md__WEBPACK_IMPORTED_MODULE_8___default.a}}).add("Visual Studio Code 推薦安裝套件",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vsCode_md__WEBPACK_IMPORTED_MODULE_9___default.a),{notes:{markdown:_vsCode_md__WEBPACK_IMPORTED_MODULE_9___default.a}}).add("線上學習資源",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_onlineLearning_md__WEBPACK_IMPORTED_MODULE_7___default.a),{notes:{markdown:_onlineLearning_md__WEBPACK_IMPORTED_MODULE_7___default.a}})}.call(this,__webpack_require__(22)(module))},870:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_cleanCode_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(236),_cleanCode_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_cleanCode_md__WEBPACK_IMPORTED_MODULE_3__),_immutable_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(237),_immutable_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_immutable_md__WEBPACK_IMPORTED_MODULE_4__),_arrayApproach_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(238),_arrayApproach_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_arrayApproach_md__WEBPACK_IMPORTED_MODULE_5__),_regular_md__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(239),_regular_md__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_regular_md__WEBPACK_IMPORTED_MODULE_6__),_browserSupport_md__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(240),_browserSupport_md__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_browserSupport_md__WEBPACK_IMPORTED_MODULE_7__),_arrayObject_md__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(241),_arrayObject_md__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_arrayObject_md__WEBPACK_IMPORTED_MODULE_8__),_curry_md__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(242),_curry_md__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(_curry_md__WEBPACK_IMPORTED_MODULE_9__),_require_md__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(243),_require_md__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(_require_md__WEBPACK_IMPORTED_MODULE_10__),_es6Module_md__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(244),_es6Module_md__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(_es6Module_md__WEBPACK_IMPORTED_MODULE_11__),_closure_md__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(245),_closure_md__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(_closure_md__WEBPACK_IMPORTED_MODULE_12__),_FPBasicConcept_md__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(246),_FPBasicConcept_md__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(_FPBasicConcept_md__WEBPACK_IMPORTED_MODULE_13__),_FPGeneralFunction_md__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(247),_FPGeneralFunction_md__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_FPGeneralFunction_md__WEBPACK_IMPORTED_MODULE_14__),_es6Class_md__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(248),_es6Class_md__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(_es6Class_md__WEBPACK_IMPORTED_MODULE_15__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport cleanCode from './cleanCode.md';\nimport immutable from './immutable.md';\nimport arrayApproach from './arrayApproach.md';\nimport reqular from './regular.md';\nimport browserSupport from './browserSupport.md';\nimport arrayObject from './arrayObject.md';\nimport curry from './curry.md';\nimport requireJs from './require.md';\nimport es6Module from './es6Module.md';\nimport closure from './closure.md';\nimport FPBasicConcept from './FPBasicConcept.md';\nimport FPGeneralFunction from './FPGeneralFunction.md';\nimport es6Class from './es6Class.md';\n\nconst javascriptFile = storiesOf('筆記|Javascript', module);\n\njavascriptFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('Immutable', doc(immutable), { notes: { markdown: immutable } })\n  .add('JavaScript 七種陣列的處理方法', doc(arrayApproach), {\n    notes: { markdown: arrayApproach },\n  })\n  .add('ES6 Class(類別)', doc(es6Class), { notes: { markdown: es6Class } })\n  .add('JavaScript：使用 Array.map、Object.values 和 Object.keys 處理一連串的資料', doc(arrayObject), {\n    notes: { markdown: arrayObject },\n  })\n  .add('JavaScript 正則表達式', doc(reqular), { notes: { markdown: reqular } })\n  .add('在 JavaScript 中編寫更好的條件的5個技巧', doc(cleanCode), {\n    notes: { markdown: cleanCode },\n  })\n  .add('JavaScript 閉包（Closure）', doc(closure), {\n    notes: { markdown: closure },\n  })\n  .add('Currying in JavaScript（柯里化）', doc(curry), {\n    notes: { markdown: curry },\n  })\n  .add('Functional Programming 基本觀念', doc(FPBasicConcept), {\n    notes: { markdown: FPBasicConcept },\n  })\n  .add('Functional Programming 通用函式', doc(FPGeneralFunction), {\n    notes: { markdown: FPGeneralFunction },\n  })\n  .add('Javascript 的 require 模塊(ES6以前)', doc(requireJs), {\n    notes: { markdown: requireJs },\n  })\n  .add('ES6 Modules(export和import)', doc(es6Module), {\n    notes: { markdown: es6Module },\n  })\n  .add('瀏覽器不支援警告視窗', doc(browserSupport), {\n    notes: { markdown: browserSupport },\n  });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|Javascript",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("Immutable",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_immutable_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_immutable_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("JavaScript 七種陣列的處理方法",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_arrayApproach_md__WEBPACK_IMPORTED_MODULE_5___default.a),{notes:{markdown:_arrayApproach_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("ES6 Class(類別)",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_es6Class_md__WEBPACK_IMPORTED_MODULE_15___default.a),{notes:{markdown:_es6Class_md__WEBPACK_IMPORTED_MODULE_15___default.a}}).add("JavaScript：使用 Array.map、Object.values 和 Object.keys 處理一連串的資料",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_arrayObject_md__WEBPACK_IMPORTED_MODULE_8___default.a),{notes:{markdown:_arrayObject_md__WEBPACK_IMPORTED_MODULE_8___default.a}}).add("JavaScript 正則表達式",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_regular_md__WEBPACK_IMPORTED_MODULE_6___default.a),{notes:{markdown:_regular_md__WEBPACK_IMPORTED_MODULE_6___default.a}}).add("在 JavaScript 中編寫更好的條件的5個技巧",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_cleanCode_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_cleanCode_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("JavaScript 閉包（Closure）",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_closure_md__WEBPACK_IMPORTED_MODULE_12___default.a),{notes:{markdown:_closure_md__WEBPACK_IMPORTED_MODULE_12___default.a}}).add("Currying in JavaScript（柯里化）",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_curry_md__WEBPACK_IMPORTED_MODULE_9___default.a),{notes:{markdown:_curry_md__WEBPACK_IMPORTED_MODULE_9___default.a}}).add("Functional Programming 基本觀念",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_FPBasicConcept_md__WEBPACK_IMPORTED_MODULE_13___default.a),{notes:{markdown:_FPBasicConcept_md__WEBPACK_IMPORTED_MODULE_13___default.a}}).add("Functional Programming 通用函式",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_FPGeneralFunction_md__WEBPACK_IMPORTED_MODULE_14___default.a),{notes:{markdown:_FPGeneralFunction_md__WEBPACK_IMPORTED_MODULE_14___default.a}}).add("Javascript 的 require 模塊(ES6以前)",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_require_md__WEBPACK_IMPORTED_MODULE_10___default.a),{notes:{markdown:_require_md__WEBPACK_IMPORTED_MODULE_10___default.a}}).add("ES6 Modules(export和import)",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_es6Module_md__WEBPACK_IMPORTED_MODULE_11___default.a),{notes:{markdown:_es6Module_md__WEBPACK_IMPORTED_MODULE_11___default.a}}).add("瀏覽器不支援警告視窗",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_browserSupport_md__WEBPACK_IMPORTED_MODULE_7___default.a),{notes:{markdown:_browserSupport_md__WEBPACK_IMPORTED_MODULE_7___default.a}})}.call(this,__webpack_require__(22)(module))},871:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_process_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(249),_process_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_process_md__WEBPACK_IMPORTED_MODULE_3__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport process from './process.md';\n\nconst nodeFile = storiesOf('筆記|Node', module);\n\nnodeFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('process對象', doc(process), { notes: { markdown: process } });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|Node",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("process對象",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_process_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_process_md__WEBPACK_IMPORTED_MODULE_3___default.a}})}.call(this,__webpack_require__(22)(module))},872:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_phpFrontend_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(250),_phpFrontend_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_phpFrontend_md__WEBPACK_IMPORTED_MODULE_3__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport phpFrontend from './phpFrontend.md';\n\nconst reactFile = storiesOf('筆記|PHP', module);\n\nreactFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('PHP 前端', doc(phpFrontend), {\n    notes: { markdown: phpFrontend },\n  });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|PHP",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("PHP 前端",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_phpFrontend_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_phpFrontend_md__WEBPACK_IMPORTED_MODULE_3___default.a}})}.call(this,__webpack_require__(22)(module))},873:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_reactLifeCycle_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(251),_reactLifeCycle_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_reactLifeCycle_md__WEBPACK_IMPORTED_MODULE_3__),_reactPropTypes_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(252),_reactPropTypes_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_reactPropTypes_md__WEBPACK_IMPORTED_MODULE_4__),_hocPreliminary_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(253),_hocPreliminary_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_hocPreliminary_md__WEBPACK_IMPORTED_MODULE_5__),_reactForm_md__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(254),_reactForm_md__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_reactForm_md__WEBPACK_IMPORTED_MODULE_6__),_reactTodoList_md__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(255),_reactTodoList_md__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_reactTodoList_md__WEBPACK_IMPORTED_MODULE_7__),_reactHocExercise_md__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(256),_reactHocExercise_md__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_reactHocExercise_md__WEBPACK_IMPORTED_MODULE_8__),_hocApi_md__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(257),_hocApi_md__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(_hocApi_md__WEBPACK_IMPORTED_MODULE_9__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport reactLifeCycle from './reactLifeCycle.md';\nimport reactPropType from './reactPropTypes.md';\nimport hocPreliminary from './hocPreliminary.md';\nimport reactForm from './reactForm.md';\nimport reactTodoList from './reactTodoList.md';\nimport reactHocExercise from './reactHocExercise.md';\nimport hocApi from './hocApi.md';\n\nconst reactFile = storiesOf('筆記|React', module);\n\nreactFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('React Life Cycle (React 16.3版之後)', doc(reactLifeCycle), {\n    notes: { markdown: reactLifeCycle },\n  })\n  .add('React 的 PropTypes 使用方法', doc(reactPropType), {\n    notes: { markdown: reactPropType },\n  })\n  .add('React 對表單元素的prop設置值', doc(reactForm), {\n    notes: { markdown: reactForm },\n  })\n  .add('React HOC API', doc(hocApi), { notes: { markdown: hocApi } })\n  .add('React HOC 初探觀念', doc(hocPreliminary), {\n    notes: { markdown: hocPreliminary },\n  })\n  .add('React HOC 練習', doc(reactHocExercise), {\n    notes: { markdown: reactHocExercise },\n  })\n  .add('React TodoList Example', doc(reactTodoList), {\n    notes: { markdown: reactTodoList },\n  });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|React",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("React Life Cycle (React 16.3版之後)",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactLifeCycle_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_reactLifeCycle_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("React 的 PropTypes 使用方法",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactPropTypes_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_reactPropTypes_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("React 對表單元素的prop設置值",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactForm_md__WEBPACK_IMPORTED_MODULE_6___default.a),{notes:{markdown:_reactForm_md__WEBPACK_IMPORTED_MODULE_6___default.a}}).add("React HOC API",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_hocApi_md__WEBPACK_IMPORTED_MODULE_9___default.a),{notes:{markdown:_hocApi_md__WEBPACK_IMPORTED_MODULE_9___default.a}}).add("React HOC 初探觀念",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_hocPreliminary_md__WEBPACK_IMPORTED_MODULE_5___default.a),{notes:{markdown:_hocPreliminary_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("React HOC 練習",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactHocExercise_md__WEBPACK_IMPORTED_MODULE_8___default.a),{notes:{markdown:_reactHocExercise_md__WEBPACK_IMPORTED_MODULE_8___default.a}}).add("React TodoList Example",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactTodoList_md__WEBPACK_IMPORTED_MODULE_7___default.a),{notes:{markdown:_reactTodoList_md__WEBPACK_IMPORTED_MODULE_7___default.a}})}.call(this,__webpack_require__(22)(module))},874:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_antd_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(258),_antd_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_antd_md__WEBPACK_IMPORTED_MODULE_3__),_propTypes_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(259),_propTypes_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_propTypes_md__WEBPACK_IMPORTED_MODULE_4__),_moment_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(260),_moment_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_moment_md__WEBPACK_IMPORTED_MODULE_5__),_styledComponents_md__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(261),_styledComponents_md__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_styledComponents_md__WEBPACK_IMPORTED_MODULE_6__),_materialUi_md__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(262),_materialUi_md__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_materialUi_md__WEBPACK_IMPORTED_MODULE_7__),_reactDeviceDetect_md__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(263),_reactDeviceDetect_md__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_reactDeviceDetect_md__WEBPACK_IMPORTED_MODULE_8__),_recompose_md__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(264),_recompose_md__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(_recompose_md__WEBPACK_IMPORTED_MODULE_9__),_loremIpsum_md__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(265),_loremIpsum_md__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(_loremIpsum_md__WEBPACK_IMPORTED_MODULE_10__),_reactAutocomplete_md__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(266),_reactAutocomplete_md__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(_reactAutocomplete_md__WEBPACK_IMPORTED_MODULE_11__),_autosize_md__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(267),_autosize_md__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(_autosize_md__WEBPACK_IMPORTED_MODULE_12__),_reactImageCrop_md__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(268),_reactImageCrop_md__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(_reactImageCrop_md__WEBPACK_IMPORTED_MODULE_13__),_localStorage_md__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(269),_localStorage_md__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_localStorage_md__WEBPACK_IMPORTED_MODULE_14__),_reactDnD_md__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(270),_reactDnD_md__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(_reactDnD_md__WEBPACK_IMPORTED_MODULE_15__),_draftJsPluginsEditor_md__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(271),_draftJsPluginsEditor_md__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(_draftJsPluginsEditor_md__WEBPACK_IMPORTED_MODULE_16__),_draftJsInlineToolbarPlugin_md__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(272),_draftJsInlineToolbarPlugin_md__WEBPACK_IMPORTED_MODULE_17___default=__webpack_require__.n(_draftJsInlineToolbarPlugin_md__WEBPACK_IMPORTED_MODULE_17__),_dompurify_md__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(273),_dompurify_md__WEBPACK_IMPORTED_MODULE_18___default=__webpack_require__.n(_dompurify_md__WEBPACK_IMPORTED_MODULE_18__),_draftJs_md__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(274),_draftJs_md__WEBPACK_IMPORTED_MODULE_19___default=__webpack_require__.n(_draftJs_md__WEBPACK_IMPORTED_MODULE_19__),_draftConvert_md__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(275),_draftConvert_md__WEBPACK_IMPORTED_MODULE_20___default=__webpack_require__.n(_draftConvert_md__WEBPACK_IMPORTED_MODULE_20__),_ajv_md__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(276),_ajv_md__WEBPACK_IMPORTED_MODULE_21___default=__webpack_require__.n(_ajv_md__WEBPACK_IMPORTED_MODULE_21__),_draftJsButtons_md__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(277),_draftJsButtons_md__WEBPACK_IMPORTED_MODULE_22___default=__webpack_require__.n(_draftJsButtons_md__WEBPACK_IMPORTED_MODULE_22__),_decorateComponentWithProps_md__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__(278),_decorateComponentWithProps_md__WEBPACK_IMPORTED_MODULE_23___default=__webpack_require__.n(_decorateComponentWithProps_md__WEBPACK_IMPORTED_MODULE_23__),_reactRouterDom_md__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__(279),_reactRouterDom_md__WEBPACK_IMPORTED_MODULE_24___default=__webpack_require__.n(_reactRouterDom_md__WEBPACK_IMPORTED_MODULE_24__),_reactCssModules_md__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__(280),_reactCssModules_md__WEBPACK_IMPORTED_MODULE_25___default=__webpack_require__.n(_reactCssModules_md__WEBPACK_IMPORTED_MODULE_25__),_htmlparser2_md__WEBPACK_IMPORTED_MODULE_26__=__webpack_require__(281),_htmlparser2_md__WEBPACK_IMPORTED_MODULE_26___default=__webpack_require__.n(_htmlparser2_md__WEBPACK_IMPORTED_MODULE_26__),_reactRouter_md__WEBPACK_IMPORTED_MODULE_27__=__webpack_require__(282),_reactRouter_md__WEBPACK_IMPORTED_MODULE_27___default=__webpack_require__.n(_reactRouter_md__WEBPACK_IMPORTED_MODULE_27__),_lodash_md__WEBPACK_IMPORTED_MODULE_28__=__webpack_require__(283),_lodash_md__WEBPACK_IMPORTED_MODULE_28___default=__webpack_require__.n(_lodash_md__WEBPACK_IMPORTED_MODULE_28__),_graphqlTag_md__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__(284),_graphqlTag_md__WEBPACK_IMPORTED_MODULE_29___default=__webpack_require__.n(_graphqlTag_md__WEBPACK_IMPORTED_MODULE_29__),_apolloClient_md__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__(285),_apolloClient_md__WEBPACK_IMPORTED_MODULE_30___default=__webpack_require__.n(_apolloClient_md__WEBPACK_IMPORTED_MODULE_30__),_apolloCacheInmemory_md__WEBPACK_IMPORTED_MODULE_31__=__webpack_require__(286),_apolloCacheInmemory_md__WEBPACK_IMPORTED_MODULE_31___default=__webpack_require__.n(_apolloCacheInmemory_md__WEBPACK_IMPORTED_MODULE_31__),_apolloLinkHttp_md__WEBPACK_IMPORTED_MODULE_32__=__webpack_require__(287),_apolloLinkHttp_md__WEBPACK_IMPORTED_MODULE_32___default=__webpack_require__.n(_apolloLinkHttp_md__WEBPACK_IMPORTED_MODULE_32__),_apolloLinkError_md__WEBPACK_IMPORTED_MODULE_33__=__webpack_require__(288),_apolloLinkError_md__WEBPACK_IMPORTED_MODULE_33___default=__webpack_require__.n(_apolloLinkError_md__WEBPACK_IMPORTED_MODULE_33__),_apolloLink_md__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__(289),_apolloLink_md__WEBPACK_IMPORTED_MODULE_34___default=__webpack_require__.n(_apolloLink_md__WEBPACK_IMPORTED_MODULE_34__),_qrcode_md__WEBPACK_IMPORTED_MODULE_35__=__webpack_require__(290),_qrcode_md__WEBPACK_IMPORTED_MODULE_35___default=__webpack_require__.n(_qrcode_md__WEBPACK_IMPORTED_MODULE_35__),_uuid_md__WEBPACK_IMPORTED_MODULE_36__=__webpack_require__(291),_uuid_md__WEBPACK_IMPORTED_MODULE_36___default=__webpack_require__.n(_uuid_md__WEBPACK_IMPORTED_MODULE_36__),_xstate_md__WEBPACK_IMPORTED_MODULE_37__=__webpack_require__(292),_xstate_md__WEBPACK_IMPORTED_MODULE_37___default=__webpack_require__.n(_xstate_md__WEBPACK_IMPORTED_MODULE_37__),_reactApollo_md__WEBPACK_IMPORTED_MODULE_38__=__webpack_require__(293),_reactApollo_md__WEBPACK_IMPORTED_MODULE_38___default=__webpack_require__.n(_reactApollo_md__WEBPACK_IMPORTED_MODULE_38__),_reactHelmet_md__WEBPACK_IMPORTED_MODULE_39__=__webpack_require__(294),_reactHelmet_md__WEBPACK_IMPORTED_MODULE_39___default=__webpack_require__.n(_reactHelmet_md__WEBPACK_IMPORTED_MODULE_39__),_reactStickyEl_md__WEBPACK_IMPORTED_MODULE_40__=__webpack_require__(295),_reactStickyEl_md__WEBPACK_IMPORTED_MODULE_40___default=__webpack_require__.n(_reactStickyEl_md__WEBPACK_IMPORTED_MODULE_40__),_reactAddonsShallowCompare_md__WEBPACK_IMPORTED_MODULE_41__=__webpack_require__(296),_reactAddonsShallowCompare_md__WEBPACK_IMPORTED_MODULE_41___default=__webpack_require__.n(_reactAddonsShallowCompare_md__WEBPACK_IMPORTED_MODULE_41__),_html2canvas_md__WEBPACK_IMPORTED_MODULE_42__=__webpack_require__(297),_html2canvas_md__WEBPACK_IMPORTED_MODULE_42___default=__webpack_require__.n(_html2canvas_md__WEBPACK_IMPORTED_MODULE_42__),_bezierEasing_md__WEBPACK_IMPORTED_MODULE_43__=__webpack_require__(298),_bezierEasing_md__WEBPACK_IMPORTED_MODULE_43___default=__webpack_require__.n(_bezierEasing_md__WEBPACK_IMPORTED_MODULE_43__),_reactScrollchor_md__WEBPACK_IMPORTED_MODULE_44__=__webpack_require__(299),_reactScrollchor_md__WEBPACK_IMPORTED_MODULE_44___default=__webpack_require__.n(_reactScrollchor_md__WEBPACK_IMPORTED_MODULE_44__),_momentTimezone_md__WEBPACK_IMPORTED_MODULE_45__=__webpack_require__(300),_momentTimezone_md__WEBPACK_IMPORTED_MODULE_45___default=__webpack_require__.n(_momentTimezone_md__WEBPACK_IMPORTED_MODULE_45__),_reactHtmlParser_md__WEBPACK_IMPORTED_MODULE_46__=__webpack_require__(301),_reactHtmlParser_md__WEBPACK_IMPORTED_MODULE_46___default=__webpack_require__.n(_reactHtmlParser_md__WEBPACK_IMPORTED_MODULE_46__),_pathToRegexp_md__WEBPACK_IMPORTED_MODULE_47__=__webpack_require__(302),_pathToRegexp_md__WEBPACK_IMPORTED_MODULE_47___default=__webpack_require__.n(_pathToRegexp_md__WEBPACK_IMPORTED_MODULE_47__),_flag_md__WEBPACK_IMPORTED_MODULE_48__=__webpack_require__(303),_flag_md__WEBPACK_IMPORTED_MODULE_48___default=__webpack_require__.n(_flag_md__WEBPACK_IMPORTED_MODULE_48__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport antd from './antd.md';\nimport propTypes from './propTypes.md';\nimport moment from './moment.md';\nimport styledComponents from './styledComponents.md';\nimport materialUi from './materialUi.md';\nimport reactDeviceDetect from './reactDeviceDetect.md';\nimport recompose from './recompose.md';\nimport loremIpsum from './loremIpsum.md';\nimport reactAutocomplete from './reactAutocomplete.md';\nimport autosize from './autosize.md';\nimport reactImageCrop from './reactImageCrop.md';\nimport localStorage from './localStorage.md';\nimport reactDnD from './reactDnD.md';\nimport draftJsPluginsEditor from './draftJsPluginsEditor.md';\nimport draftJsInlineToolbarPlugin from './draftJsInlineToolbarPlugin.md';\nimport dompurify from './dompurify.md';\nimport draftJs from './draftJs.md';\nimport draftConvert from './draftConvert.md';\nimport ajv from './ajv.md';\nimport draftJsButtons from './draftJsButtons.md';\nimport decorateComponentWithProps from './decorateComponentWithProps.md';\nimport reactRouterDom from './reactRouterDom.md';\nimport reactCssModules from './reactCssModules.md';\nimport htmlparser2 from './htmlparser2.md';\nimport reactRouter from './reactRouter.md';\nimport lodash from './lodash.md';\nimport graphqlTag from './graphqlTag.md';\nimport apolloClient from './apolloClient.md';\nimport apolloCacheInmemory from './apolloCacheInmemory.md';\nimport apolloLinkHttp from './apolloLinkHttp.md';\nimport apolloLinkError from './apolloLinkError.md';\nimport apolloLink from './apolloLink.md';\nimport qrcode from './qrcode.md';\nimport uuid from './uuid.md';\nimport xstate from './xstate.md';\nimport reactApollo from './reactApollo.md';\nimport reactHelmet from './reactHelmet.md';\nimport reactStickyEl from './reactStickyEl.md';\nimport reactAddonsShallowCompare from './reactAddonsShallowCompare.md';\nimport html2canvas from './html2canvas.md';\nimport bezierEasing from './bezierEasing.md';\nimport reactScrollchor from './reactScrollchor.md';\nimport momentTimezone from './momentTimezone.md';\nimport reactHtmlParser from './reactHtmlParser.md';\nimport pathToRegexp from './pathToRegexp.md';\nimport flag from './flag.md';\n\nconst reactFile = storiesOf('筆記|第三方套件', module);\n\nreactFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('ajv', doc(ajv), { notes: { markdown: ajv } })\n  .add('apollo-client', doc(apolloClient), {\n    notes: { markdown: apolloClient },\n  })\n  .add('apollo-cache-inmemory', doc(apolloCacheInmemory), {\n    notes: { markdown: apolloCacheInmemory },\n  })\n  .add('apollo-link-http', doc(apolloLinkHttp), {\n    notes: { markdown: apolloLinkHttp },\n  })\n  .add('apollo-link-error', doc(apolloLinkError), {\n    notes: { markdown: apolloLinkError },\n  })\n  .add('apollo-link', doc(apolloLink), { notes: { markdown: apolloLink } })\n  .add('ant Design', doc(antd), {\n    notes: { markdown: antd },\n  })\n  .add('autosize', doc(autosize), { notes: { markdown: autosize } })\n  .add('bezier-easing', doc(bezierEasing), {\n    notes: { markdown: bezierEasing },\n  })\n  .add('decorate-component-with-props', doc(decorateComponentWithProps), {\n    notes: { markdown: decorateComponentWithProps },\n  })\n  .add('draft-js', doc(draftJs), { notes: { markdown: draftJs } })\n  .add('draft-convert', doc(draftConvert), {\n    notes: { markdown: draftConvert },\n  })\n  .add('draft-js-buttons', doc(draftJsButtons), {\n    notes: { markdown: draftJsButtons },\n  })\n  .add('draft-js-plugins-editor', doc(draftJsPluginsEditor), {\n    notes: { markdown: draftJsPluginsEditor },\n  })\n  .add('draft-js-inline-toolbar-plugin', doc(draftJsInlineToolbarPlugin), {\n    notes: { markdown: draftJsInlineToolbarPlugin },\n  })\n  .add('dompurify', doc(dompurify), { notes: { markdown: dompurify } })\n  .add('flag', doc(flag), { notes: { markdown: flag } })\n  .add('graphql-tag', doc(graphqlTag), { notes: { markdown: graphqlTag } })\n  .add('htmlparser2', doc(htmlparser2), { notes: { markdown: htmlparser2 } })\n  .add('html2canvas', doc(html2canvas), { notes: { markdown: html2canvas } })\n  .add('lodash', doc(lodash), { notes: { markdown: lodash } })\n  .add('localStorage', doc(localStorage), { notes: { markdown: localStorage } })\n  .add('lorem-ipsum', doc(loremIpsum), { notes: { markdown: loremIpsum } })\n  .add('material-UI ', doc(materialUi), { notes: { markdown: materialUi } })\n  .add('moment', doc(moment), { notes: { markdown: moment } })\n  .add('moment-timezone', doc(momentTimezone), {\n    notes: { markdown: momentTimezone },\n  })\n  .add('prop-types', doc(propTypes), { notes: { markdown: propTypes } })\n  .add('path-to-regexp', doc(pathToRegexp), {\n    notes: { markdown: pathToRegexp },\n  })\n  .add('qrcode.react', doc(qrcode), { notes: { markdown: qrcode } })\n  .add('react-apollo', doc(reactApollo), { notes: { markdown: reactApollo } })\n  .add('react-Autocomplete', doc(reactAutocomplete), {\n    notes: { markdown: reactAutocomplete },\n  })\n  .add('react-addons-shallow-compare', doc(reactAddonsShallowCompare), {\n    notes: { markdown: reactAddonsShallowCompare },\n  })\n  .add('react-device-detect', doc(reactDeviceDetect), {\n    notes: { markdown: reactDeviceDetect },\n  })\n  .add('react DnD', doc(reactDnD), { notes: { markdown: reactDnD } })\n  .add('recompose', doc(recompose), { notes: { markdown: recompose } })\n  .add('react-helmet', doc(reactHelmet), { notes: { markdown: reactHelmet } })\n  .add('react-Image-Crop', doc(reactImageCrop), {\n    notes: { markdown: reactImageCrop },\n  })\n  .add('react-html-parser', doc(reactHtmlParser), {\n    notes: { markdown: reactHtmlParser },\n  })\n  .add('react-scrollchor', doc(reactScrollchor), {\n    notes: { markdown: reactScrollchor },\n  })\n  .add('react-sticky-el', doc(reactStickyEl), {\n    notes: { markdown: reactStickyEl },\n  })\n  .add('react-css-modules', doc(reactCssModules), {\n    notes: { markdown: reactCssModules },\n  })\n  .add('react-router', doc(reactRouter), { notes: { markdown: reactRouter } })\n  .add('react-router-dom', doc(reactRouterDom), {\n    notes: { markdown: reactRouterDom },\n  })\n  .add('styled-Components', doc(styledComponents), {\n    notes: { markdown: styledComponents },\n  })\n  .add('uuid', doc(uuid), { notes: { markdown: uuid } })\n  .add('xstate', doc(xstate), { notes: { markdown: xstate } });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|第三方套件",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("ajv",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_ajv_md__WEBPACK_IMPORTED_MODULE_21___default.a),{notes:{markdown:_ajv_md__WEBPACK_IMPORTED_MODULE_21___default.a}}).add("apollo-client",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_apolloClient_md__WEBPACK_IMPORTED_MODULE_30___default.a),{notes:{markdown:_apolloClient_md__WEBPACK_IMPORTED_MODULE_30___default.a}}).add("apollo-cache-inmemory",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_apolloCacheInmemory_md__WEBPACK_IMPORTED_MODULE_31___default.a),{notes:{markdown:_apolloCacheInmemory_md__WEBPACK_IMPORTED_MODULE_31___default.a}}).add("apollo-link-http",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_apolloLinkHttp_md__WEBPACK_IMPORTED_MODULE_32___default.a),{notes:{markdown:_apolloLinkHttp_md__WEBPACK_IMPORTED_MODULE_32___default.a}}).add("apollo-link-error",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_apolloLinkError_md__WEBPACK_IMPORTED_MODULE_33___default.a),{notes:{markdown:_apolloLinkError_md__WEBPACK_IMPORTED_MODULE_33___default.a}}).add("apollo-link",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_apolloLink_md__WEBPACK_IMPORTED_MODULE_34___default.a),{notes:{markdown:_apolloLink_md__WEBPACK_IMPORTED_MODULE_34___default.a}}).add("ant Design",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_antd_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_antd_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("autosize",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_autosize_md__WEBPACK_IMPORTED_MODULE_12___default.a),{notes:{markdown:_autosize_md__WEBPACK_IMPORTED_MODULE_12___default.a}}).add("bezier-easing",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_bezierEasing_md__WEBPACK_IMPORTED_MODULE_43___default.a),{notes:{markdown:_bezierEasing_md__WEBPACK_IMPORTED_MODULE_43___default.a}}).add("decorate-component-with-props",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_decorateComponentWithProps_md__WEBPACK_IMPORTED_MODULE_23___default.a),{notes:{markdown:_decorateComponentWithProps_md__WEBPACK_IMPORTED_MODULE_23___default.a}}).add("draft-js",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_draftJs_md__WEBPACK_IMPORTED_MODULE_19___default.a),{notes:{markdown:_draftJs_md__WEBPACK_IMPORTED_MODULE_19___default.a}}).add("draft-convert",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_draftConvert_md__WEBPACK_IMPORTED_MODULE_20___default.a),{notes:{markdown:_draftConvert_md__WEBPACK_IMPORTED_MODULE_20___default.a}}).add("draft-js-buttons",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_draftJsButtons_md__WEBPACK_IMPORTED_MODULE_22___default.a),{notes:{markdown:_draftJsButtons_md__WEBPACK_IMPORTED_MODULE_22___default.a}}).add("draft-js-plugins-editor",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_draftJsPluginsEditor_md__WEBPACK_IMPORTED_MODULE_16___default.a),{notes:{markdown:_draftJsPluginsEditor_md__WEBPACK_IMPORTED_MODULE_16___default.a}}).add("draft-js-inline-toolbar-plugin",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_draftJsInlineToolbarPlugin_md__WEBPACK_IMPORTED_MODULE_17___default.a),{notes:{markdown:_draftJsInlineToolbarPlugin_md__WEBPACK_IMPORTED_MODULE_17___default.a}}).add("dompurify",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_dompurify_md__WEBPACK_IMPORTED_MODULE_18___default.a),{notes:{markdown:_dompurify_md__WEBPACK_IMPORTED_MODULE_18___default.a}}).add("flag",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_flag_md__WEBPACK_IMPORTED_MODULE_48___default.a),{notes:{markdown:_flag_md__WEBPACK_IMPORTED_MODULE_48___default.a}}).add("graphql-tag",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_graphqlTag_md__WEBPACK_IMPORTED_MODULE_29___default.a),{notes:{markdown:_graphqlTag_md__WEBPACK_IMPORTED_MODULE_29___default.a}}).add("htmlparser2",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_htmlparser2_md__WEBPACK_IMPORTED_MODULE_26___default.a),{notes:{markdown:_htmlparser2_md__WEBPACK_IMPORTED_MODULE_26___default.a}}).add("html2canvas",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_html2canvas_md__WEBPACK_IMPORTED_MODULE_42___default.a),{notes:{markdown:_html2canvas_md__WEBPACK_IMPORTED_MODULE_42___default.a}}).add("lodash",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_lodash_md__WEBPACK_IMPORTED_MODULE_28___default.a),{notes:{markdown:_lodash_md__WEBPACK_IMPORTED_MODULE_28___default.a}}).add("localStorage",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_localStorage_md__WEBPACK_IMPORTED_MODULE_14___default.a),{notes:{markdown:_localStorage_md__WEBPACK_IMPORTED_MODULE_14___default.a}}).add("lorem-ipsum",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_loremIpsum_md__WEBPACK_IMPORTED_MODULE_10___default.a),{notes:{markdown:_loremIpsum_md__WEBPACK_IMPORTED_MODULE_10___default.a}}).add("material-UI ",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_materialUi_md__WEBPACK_IMPORTED_MODULE_7___default.a),{notes:{markdown:_materialUi_md__WEBPACK_IMPORTED_MODULE_7___default.a}}).add("moment",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_moment_md__WEBPACK_IMPORTED_MODULE_5___default.a),{notes:{markdown:_moment_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("moment-timezone",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_momentTimezone_md__WEBPACK_IMPORTED_MODULE_45___default.a),{notes:{markdown:_momentTimezone_md__WEBPACK_IMPORTED_MODULE_45___default.a}}).add("prop-types",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_propTypes_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_propTypes_md__WEBPACK_IMPORTED_MODULE_4___default.a}}).add("path-to-regexp",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_pathToRegexp_md__WEBPACK_IMPORTED_MODULE_47___default.a),{notes:{markdown:_pathToRegexp_md__WEBPACK_IMPORTED_MODULE_47___default.a}}).add("qrcode.react",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_qrcode_md__WEBPACK_IMPORTED_MODULE_35___default.a),{notes:{markdown:_qrcode_md__WEBPACK_IMPORTED_MODULE_35___default.a}}).add("react-apollo",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactApollo_md__WEBPACK_IMPORTED_MODULE_38___default.a),{notes:{markdown:_reactApollo_md__WEBPACK_IMPORTED_MODULE_38___default.a}}).add("react-Autocomplete",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactAutocomplete_md__WEBPACK_IMPORTED_MODULE_11___default.a),{notes:{markdown:_reactAutocomplete_md__WEBPACK_IMPORTED_MODULE_11___default.a}}).add("react-addons-shallow-compare",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactAddonsShallowCompare_md__WEBPACK_IMPORTED_MODULE_41___default.a),{notes:{markdown:_reactAddonsShallowCompare_md__WEBPACK_IMPORTED_MODULE_41___default.a}}).add("react-device-detect",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactDeviceDetect_md__WEBPACK_IMPORTED_MODULE_8___default.a),{notes:{markdown:_reactDeviceDetect_md__WEBPACK_IMPORTED_MODULE_8___default.a}}).add("react DnD",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactDnD_md__WEBPACK_IMPORTED_MODULE_15___default.a),{notes:{markdown:_reactDnD_md__WEBPACK_IMPORTED_MODULE_15___default.a}}).add("recompose",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_recompose_md__WEBPACK_IMPORTED_MODULE_9___default.a),{notes:{markdown:_recompose_md__WEBPACK_IMPORTED_MODULE_9___default.a}}).add("react-helmet",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactHelmet_md__WEBPACK_IMPORTED_MODULE_39___default.a),{notes:{markdown:_reactHelmet_md__WEBPACK_IMPORTED_MODULE_39___default.a}}).add("react-Image-Crop",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactImageCrop_md__WEBPACK_IMPORTED_MODULE_13___default.a),{notes:{markdown:_reactImageCrop_md__WEBPACK_IMPORTED_MODULE_13___default.a}}).add("react-html-parser",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactHtmlParser_md__WEBPACK_IMPORTED_MODULE_46___default.a),{notes:{markdown:_reactHtmlParser_md__WEBPACK_IMPORTED_MODULE_46___default.a}}).add("react-scrollchor",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactScrollchor_md__WEBPACK_IMPORTED_MODULE_44___default.a),{notes:{markdown:_reactScrollchor_md__WEBPACK_IMPORTED_MODULE_44___default.a}}).add("react-sticky-el",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactStickyEl_md__WEBPACK_IMPORTED_MODULE_40___default.a),{notes:{markdown:_reactStickyEl_md__WEBPACK_IMPORTED_MODULE_40___default.a}}).add("react-css-modules",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactCssModules_md__WEBPACK_IMPORTED_MODULE_25___default.a),{notes:{markdown:_reactCssModules_md__WEBPACK_IMPORTED_MODULE_25___default.a}}).add("react-router",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactRouter_md__WEBPACK_IMPORTED_MODULE_27___default.a),{notes:{markdown:_reactRouter_md__WEBPACK_IMPORTED_MODULE_27___default.a}}).add("react-router-dom",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_reactRouterDom_md__WEBPACK_IMPORTED_MODULE_24___default.a),{notes:{markdown:_reactRouterDom_md__WEBPACK_IMPORTED_MODULE_24___default.a}}).add("styled-Components",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_styledComponents_md__WEBPACK_IMPORTED_MODULE_6___default.a),{notes:{markdown:_styledComponents_md__WEBPACK_IMPORTED_MODULE_6___default.a}}).add("uuid",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_uuid_md__WEBPACK_IMPORTED_MODULE_36___default.a),{notes:{markdown:_uuid_md__WEBPACK_IMPORTED_MODULE_36___default.a}}).add("xstate",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_xstate_md__WEBPACK_IMPORTED_MODULE_37___default.a),{notes:{markdown:_xstate_md__WEBPACK_IMPORTED_MODULE_37___default.a}})}.call(this,__webpack_require__(22)(module))},875:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"withStorySource",function(){return withStorySource}),__webpack_require__.d(__webpack_exports__,"__STORY__",function(){return __STORY__}),__webpack_require__.d(__webpack_exports__,"__ADDS_MAP__",function(){return __ADDS_MAP__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),storybook_readme__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2),_vueFrontend_md__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(304),_vueFrontend_md__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_vueFrontend_md__WEBPACK_IMPORTED_MODULE_3__),_vueRouter_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(305),_vueRouter_md__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_vueRouter_md__WEBPACK_IMPORTED_MODULE_4__),_vueComputed_md__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(306),_vueComputed_md__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_vueComputed_md__WEBPACK_IMPORTED_MODULE_5__),_vueInstruction_md__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(307),_vueInstruction_md__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_vueInstruction_md__WEBPACK_IMPORTED_MODULE_6__),_vueLifecycle_md__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(308),_vueLifecycle_md__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_vueLifecycle_md__WEBPACK_IMPORTED_MODULE_7__),_vueSlot_md__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(309),_vueSlot_md__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_vueSlot_md__WEBPACK_IMPORTED_MODULE_8__),withStorySource=__webpack_require__(26).withStorySource,__STORY__="import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { doc } from 'storybook-readme';\nimport vueFrontend from './vueFrontend.md';\nimport vueRouter from './vueRouter.md';\nimport vueComputed from './vueComputed.md';\nimport vueInstruction from './vueInstruction.md';\nimport vueLifecycle from './vueLifecycle.md';\nimport vueSlot from './vueSlot.md';\n\nconst reactFile = storiesOf('筆記|Vue', module);\n\nreactFile\n  .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n  .add('Vue 基礎介紹', doc(vueFrontend), {\n    notes: { markdown: vueFrontend },\n  })\n  .add('Vue 生命週期', doc(vueLifecycle), { notes: { markdown: vueLifecycle } })\n  .add('Vue 指令與methods', doc(vueInstruction), {\n    notes: { markdown: vueInstruction },\n  })\n  .add('vue Slot', doc(vueSlot), { notes: { markdown: vueSlot } })\n  .add('Vue Computed', doc(vueComputed), { notes: { markdown: vueComputed } })\n  .add('Vue Router', doc(vueRouter), { notes: { markdown: vueRouter } });\n",__ADDS_MAP__={};Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)("筆記|Vue",module).addDecorator(withStorySource(__STORY__,__ADDS_MAP__)).addDecorator(function(story){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{padding:"3rem"}},story())}).add("Vue 基礎介紹",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueFrontend_md__WEBPACK_IMPORTED_MODULE_3___default.a),{notes:{markdown:_vueFrontend_md__WEBPACK_IMPORTED_MODULE_3___default.a}}).add("Vue 生命週期",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueLifecycle_md__WEBPACK_IMPORTED_MODULE_7___default.a),{notes:{markdown:_vueLifecycle_md__WEBPACK_IMPORTED_MODULE_7___default.a}}).add("Vue 指令與methods",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueInstruction_md__WEBPACK_IMPORTED_MODULE_6___default.a),{notes:{markdown:_vueInstruction_md__WEBPACK_IMPORTED_MODULE_6___default.a}}).add("vue Slot",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueSlot_md__WEBPACK_IMPORTED_MODULE_8___default.a),{notes:{markdown:_vueSlot_md__WEBPACK_IMPORTED_MODULE_8___default.a}}).add("Vue Computed",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueComputed_md__WEBPACK_IMPORTED_MODULE_5___default.a),{notes:{markdown:_vueComputed_md__WEBPACK_IMPORTED_MODULE_5___default.a}}).add("Vue Router",Object(storybook_readme__WEBPACK_IMPORTED_MODULE_2__.doc)(_vueRouter_md__WEBPACK_IMPORTED_MODULE_4___default.a),{notes:{markdown:_vueRouter_md__WEBPACK_IMPORTED_MODULE_4___default.a}})}.call(this,__webpack_require__(22)(module))}},[[443,1,2]]]);
//# sourceMappingURL=main.0dab5d9b629b81e9c37d.bundle.js.map